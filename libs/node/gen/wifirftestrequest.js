// source: spacex/api/device/wifi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.WifiRfTestRequest');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.WifiRfTestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.WifiRfTestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.WifiRfTestRequest.displayName = 'proto.SpaceX.API.Device.WifiRfTestRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.WifiRfTestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.WifiRfTestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiRfTestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
numMeasurements: jspb.Message.getFieldWithDefault(msg, 1, 0),
channel2ghz: jspb.Message.getFieldWithDefault(msg, 2, 0),
channel5ghz: jspb.Message.getFieldWithDefault(msg, 3, 0),
channel5ghzHigh: jspb.Message.getFieldWithDefault(msg, 4, 0),
mcs2ghz: jspb.Message.getFieldWithDefault(msg, 5, 0),
mcs5ghz: jspb.Message.getFieldWithDefault(msg, 6, 0),
mcs5ghzHigh: jspb.Message.getFieldWithDefault(msg, 7, 0),
phyMode2ghz: jspb.Message.getFieldWithDefault(msg, 8, 0),
phyMode5ghz: jspb.Message.getFieldWithDefault(msg, 9, 0),
phyMode5ghzHigh: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.WifiRfTestRequest;
  return proto.SpaceX.API.Device.WifiRfTestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.WifiRfTestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumMeasurements(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel2ghz(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel5ghz(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel5ghzHigh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMcs2ghz(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMcs5ghz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMcs5ghzHigh(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhyMode2ghz(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhyMode5ghz(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhyMode5ghzHigh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.WifiRfTestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.WifiRfTestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiRfTestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumMeasurements();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannel2ghz();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getChannel5ghz();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getChannel5ghzHigh();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMcs2ghz();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMcs5ghz();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMcs5ghzHigh();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getPhyMode2ghz();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getPhyMode5ghz();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPhyMode5ghzHigh();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional uint32 num_measurements = 1;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getNumMeasurements = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setNumMeasurements = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 channel_2ghz = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getChannel2ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setChannel2ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 channel_5ghz = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getChannel5ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setChannel5ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 channel_5ghz_high = 4;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getChannel5ghzHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setChannel5ghzHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 mcs_2ghz = 5;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getMcs2ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setMcs2ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 mcs_5ghz = 6;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getMcs5ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setMcs5ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 mcs_5ghz_high = 7;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getMcs5ghzHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setMcs5ghzHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 phy_mode_2ghz = 8;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getPhyMode2ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setPhyMode2ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 phy_mode_5ghz = 9;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getPhyMode5ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setPhyMode5ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 phy_mode_5ghz_high = 10;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.getPhyMode5ghzHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiRfTestRequest} returns this
 */
proto.SpaceX.API.Device.WifiRfTestRequest.prototype.setPhyMode5ghzHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


