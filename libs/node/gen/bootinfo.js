// source: spacex/api/device/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.BootInfo');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');

goog.forwardDeclare('proto.SpaceX.API.Device.BootReason');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.BootInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.BootInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.BootInfo.displayName = 'proto.SpaceX.API.Device.BootInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.BootInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.BootInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.BootInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.BootInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
countByReasonMap: (f = msg.getCountByReasonMap()) ? f.toObject(includeInstance, undefined) : [],
countByReasonDeltaMap: (f = msg.getCountByReasonDeltaMap()) ? f.toObject(includeInstance, undefined) : [],
lastReason: jspb.Message.getFieldWithDefault(msg, 2, 0),
lastCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
crashBoot: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
crashBootCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.BootInfo}
 */
proto.SpaceX.API.Device.BootInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.BootInfo;
  return proto.SpaceX.API.Device.BootInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.BootInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.BootInfo}
 */
proto.SpaceX.API.Device.BootInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCountByReasonMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 4:
      var value = msg.getCountByReasonDeltaMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);
         });
      break;
    case 2:
      var value = /** @type {!proto.SpaceX.API.Device.BootReason} */ (reader.readEnum());
      msg.setLastReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastCount(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrashBoot(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrashBootCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.BootInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.BootInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.BootInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.BootInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountByReasonMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getCountByReasonDeltaMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getLastReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLastCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCrashBoot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getCrashBootCount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * map<int32, int32> count_by_reason = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getCountByReasonMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.clearCountByReasonMap = function() {
  this.getCountByReasonMap().clear();
  return this;
};


/**
 * map<int32, int32> count_by_reason_delta = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getCountByReasonDeltaMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.clearCountByReasonDeltaMap = function() {
  this.getCountByReasonDeltaMap().clear();
  return this;
};


/**
 * optional BootReason last_reason = 2;
 * @return {!proto.SpaceX.API.Device.BootReason}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getLastReason = function() {
  return /** @type {!proto.SpaceX.API.Device.BootReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.BootReason} value
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.setLastReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 last_count = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getLastCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.setLastCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool crash_boot = 5;
 * @return {boolean}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getCrashBoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.setCrashBoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 crash_boot_count = 6;
 * @return {number}
 */
proto.SpaceX.API.Device.BootInfo.prototype.getCrashBootCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.BootInfo} returns this
 */
proto.SpaceX.API.Device.BootInfo.prototype.setCrashBootCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


