// source: spacex/api/device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.DishGetEmcResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.DishGetEmcResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.DishGetEmcResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.DishGetEmcResponse.displayName = 'proto.SpaceX.API.Device.DishGetEmcResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.DishGetEmcResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.DishGetEmcResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetEmcResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
cplaneUpdates: jspb.Message.getFieldWithDefault(msg, 11, 0),
gpsLatitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
gpsLongitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
gpsPdop: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
rfMode: jspb.Message.getFieldWithDefault(msg, 19, 0),
phi: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
theta: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
rxChannel: jspb.Message.getFieldWithDefault(msg, 22, 0),
txChannel: jspb.Message.getFieldWithDefault(msg, 23, 0),
tDbfMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
tCenter: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 0.0),
autoPowerSnowMeltEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 30, false),
voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 0.0),
rxBeamState: jspb.Message.getFieldWithDefault(msg, 33, 0),
txBeamState: jspb.Message.getFieldWithDefault(msg, 34, 0),
halfDuplexState: jspb.Message.getFieldWithDefault(msg, 35, 0),
manualTiltEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 36, false),
tiltAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 37, 0.0),
pllTxLockDetected: jspb.Message.getFieldWithDefault(msg, 38, 0),
eirpExceededThreshold: jspb.Message.getBooleanFieldWithDefault(msg, 39, false),
idleOverrideEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 41, false),
thetaOverrideEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 42, false),
thetaOverrideValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 43, 0.0),
phiOverrideEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 44, false),
phiOverrideValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 45, 0.0),
rxChanOverrideValue: jspb.Message.getFieldWithDefault(msg, 46, 0),
txChanOverrideValue: jspb.Message.getFieldWithDefault(msg, 47, 0),
skySearchOverrideEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 48, false),
fastSwitchingEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 49, false),
modulationOverrideValue: jspb.Message.getFieldWithDefault(msg, 50, 0),
forceEirpFailure: jspb.Message.getBooleanFieldWithDefault(msg, 51, false),
forcePllUnlock: jspb.Message.getBooleanFieldWithDefault(msg, 52, false),
utIneSuccess: jspb.Message.getFieldWithDefault(msg, 53, 0),
rfReady: jspb.Message.getBooleanFieldWithDefault(msg, 54, false),
tiltToStowed: jspb.Message.getBooleanFieldWithDefault(msg, 55, false),
reboot: jspb.Message.getBooleanFieldWithDefault(msg, 56, false),
continuousMotorTest: jspb.Message.getBooleanFieldWithDefault(msg, 57, false),
distanceOverrideMeters: jspb.Message.getFloatingPointFieldWithDefault(msg, 58, 0.0),
amplitudeTaperOverride: jspb.Message.getFieldWithDefault(msg, 59, 0),
amplitudeTaperEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 60, false),
amplitudeTaperScale: jspb.Message.getFloatingPointFieldWithDefault(msg, 61, 0.0),
countryCodeOverride: jspb.Message.getFieldWithDefault(msg, 62, 0),
maxPointingDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 63, 0.0),
distanceScalingFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 64, 0.0),
txDutyCycleOverride: jspb.Message.getFieldWithDefault(msg, 65, 0),
rxDutyCycleOverride: jspb.Message.getFieldWithDefault(msg, 66, 0),
txTimeMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 67, 0.0),
rxTimeMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 68, 0.0),
eirpLegalLimitDbw: jspb.Message.getFloatingPointFieldWithDefault(msg, 69, 0.0),
eirpLegalLimitDbwOverride: jspb.Message.getFloatingPointFieldWithDefault(msg, 70, 0.0),
eirpAdjustmentDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 71, 0.0),
eirpPredictedDbw: jspb.Message.getFloatingPointFieldWithDefault(msg, 72, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.DishGetEmcResponse;
  return proto.SpaceX.API.Device.DishGetEmcResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.DishGetEmcResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCplaneUpdates(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGpsLatitude(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGpsLongitude(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGpsPdop(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRfMode(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhi(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxChannel(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxChannel(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTDbfMax(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTCenter(value);
      break;
    case 30:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoPowerSnowMeltEnabled(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVoltage(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxBeamState(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxBeamState(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHalfDuplexState(value);
      break;
    case 36:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setManualTiltEnabled(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTiltAngle(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPllTxLockDetected(value);
      break;
    case 39:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEirpExceededThreshold(value);
      break;
    case 41:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdleOverrideEnabled(value);
      break;
    case 42:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThetaOverrideEnabled(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThetaOverrideValue(value);
      break;
    case 44:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhiOverrideEnabled(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhiOverrideValue(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxChanOverrideValue(value);
      break;
    case 47:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxChanOverrideValue(value);
      break;
    case 48:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkySearchOverrideEnabled(value);
      break;
    case 49:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFastSwitchingEnabled(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModulationOverrideValue(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceEirpFailure(value);
      break;
    case 52:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcePllUnlock(value);
      break;
    case 53:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUtIneSuccess(value);
      break;
    case 54:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRfReady(value);
      break;
    case 55:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTiltToStowed(value);
      break;
    case 56:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReboot(value);
      break;
    case 57:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinuousMotorTest(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceOverrideMeters(value);
      break;
    case 59:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmplitudeTaperOverride(value);
      break;
    case 60:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAmplitudeTaperEnabled(value);
      break;
    case 61:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmplitudeTaperScale(value);
      break;
    case 62:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountryCodeOverride(value);
      break;
    case 63:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxPointingDistance(value);
      break;
    case 64:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceScalingFactor(value);
      break;
    case 65:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxDutyCycleOverride(value);
      break;
    case 66:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRxDutyCycleOverride(value);
      break;
    case 67:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTxTimeMs(value);
      break;
    case 68:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRxTimeMs(value);
      break;
    case 69:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpLegalLimitDbw(value);
      break;
    case 70:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpLegalLimitDbwOverride(value);
      break;
    case 71:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpAdjustmentDb(value);
      break;
    case 72:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpPredictedDbw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.DishGetEmcResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.DishGetEmcResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetEmcResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCplaneUpdates();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getGpsLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getGpsLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getGpsPdop();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getRfMode();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getPhi();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getTheta();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getRxChannel();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getTxChannel();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getTDbfMax();
  if (f !== 0.0) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = message.getTCenter();
  if (f !== 0.0) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = message.getAutoPowerSnowMeltEnabled();
  if (f) {
    writer.writeBool(
      30,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = message.getRxBeamState();
  if (f !== 0) {
    writer.writeUint32(
      33,
      f
    );
  }
  f = message.getTxBeamState();
  if (f !== 0) {
    writer.writeUint32(
      34,
      f
    );
  }
  f = message.getHalfDuplexState();
  if (f !== 0) {
    writer.writeUint32(
      35,
      f
    );
  }
  f = message.getManualTiltEnabled();
  if (f) {
    writer.writeBool(
      36,
      f
    );
  }
  f = message.getTiltAngle();
  if (f !== 0.0) {
    writer.writeDouble(
      37,
      f
    );
  }
  f = message.getPllTxLockDetected();
  if (f !== 0) {
    writer.writeUint32(
      38,
      f
    );
  }
  f = message.getEirpExceededThreshold();
  if (f) {
    writer.writeBool(
      39,
      f
    );
  }
  f = message.getIdleOverrideEnabled();
  if (f) {
    writer.writeBool(
      41,
      f
    );
  }
  f = message.getThetaOverrideEnabled();
  if (f) {
    writer.writeBool(
      42,
      f
    );
  }
  f = message.getThetaOverrideValue();
  if (f !== 0.0) {
    writer.writeDouble(
      43,
      f
    );
  }
  f = message.getPhiOverrideEnabled();
  if (f) {
    writer.writeBool(
      44,
      f
    );
  }
  f = message.getPhiOverrideValue();
  if (f !== 0.0) {
    writer.writeDouble(
      45,
      f
    );
  }
  f = message.getRxChanOverrideValue();
  if (f !== 0) {
    writer.writeUint32(
      46,
      f
    );
  }
  f = message.getTxChanOverrideValue();
  if (f !== 0) {
    writer.writeUint32(
      47,
      f
    );
  }
  f = message.getSkySearchOverrideEnabled();
  if (f) {
    writer.writeBool(
      48,
      f
    );
  }
  f = message.getFastSwitchingEnabled();
  if (f) {
    writer.writeBool(
      49,
      f
    );
  }
  f = message.getModulationOverrideValue();
  if (f !== 0) {
    writer.writeUint32(
      50,
      f
    );
  }
  f = message.getForceEirpFailure();
  if (f) {
    writer.writeBool(
      51,
      f
    );
  }
  f = message.getForcePllUnlock();
  if (f) {
    writer.writeBool(
      52,
      f
    );
  }
  f = message.getUtIneSuccess();
  if (f !== 0) {
    writer.writeUint32(
      53,
      f
    );
  }
  f = message.getRfReady();
  if (f) {
    writer.writeBool(
      54,
      f
    );
  }
  f = message.getTiltToStowed();
  if (f) {
    writer.writeBool(
      55,
      f
    );
  }
  f = message.getReboot();
  if (f) {
    writer.writeBool(
      56,
      f
    );
  }
  f = message.getContinuousMotorTest();
  if (f) {
    writer.writeBool(
      57,
      f
    );
  }
  f = message.getDistanceOverrideMeters();
  if (f !== 0.0) {
    writer.writeDouble(
      58,
      f
    );
  }
  f = message.getAmplitudeTaperOverride();
  if (f !== 0) {
    writer.writeUint32(
      59,
      f
    );
  }
  f = message.getAmplitudeTaperEnabled();
  if (f) {
    writer.writeBool(
      60,
      f
    );
  }
  f = message.getAmplitudeTaperScale();
  if (f !== 0.0) {
    writer.writeDouble(
      61,
      f
    );
  }
  f = message.getCountryCodeOverride();
  if (f !== 0) {
    writer.writeUint32(
      62,
      f
    );
  }
  f = message.getMaxPointingDistance();
  if (f !== 0.0) {
    writer.writeDouble(
      63,
      f
    );
  }
  f = message.getDistanceScalingFactor();
  if (f !== 0.0) {
    writer.writeDouble(
      64,
      f
    );
  }
  f = message.getTxDutyCycleOverride();
  if (f !== 0) {
    writer.writeInt32(
      65,
      f
    );
  }
  f = message.getRxDutyCycleOverride();
  if (f !== 0) {
    writer.writeInt32(
      66,
      f
    );
  }
  f = message.getTxTimeMs();
  if (f !== 0.0) {
    writer.writeFloat(
      67,
      f
    );
  }
  f = message.getRxTimeMs();
  if (f !== 0.0) {
    writer.writeFloat(
      68,
      f
    );
  }
  f = message.getEirpLegalLimitDbw();
  if (f !== 0.0) {
    writer.writeDouble(
      69,
      f
    );
  }
  f = message.getEirpLegalLimitDbwOverride();
  if (f !== 0.0) {
    writer.writeDouble(
      70,
      f
    );
  }
  f = message.getEirpAdjustmentDb();
  if (f !== 0.0) {
    writer.writeDouble(
      71,
      f
    );
  }
  f = message.getEirpPredictedDbw();
  if (f !== 0.0) {
    writer.writeDouble(
      72,
      f
    );
  }
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 cplane_updates = 11;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getCplaneUpdates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setCplaneUpdates = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double gps_latitude = 16;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getGpsLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setGpsLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double gps_longitude = 17;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getGpsLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setGpsLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double gps_pdop = 18;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getGpsPdop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setGpsPdop = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional uint32 rf_mode = 19;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRfMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRfMode = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional double phi = 20;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setPhi = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double theta = 21;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTheta = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional uint32 rx_channel = 22;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRxChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRxChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint32 tx_channel = 23;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTxChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTxChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional float t_dbf_max = 24;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTDbfMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTDbfMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional double t_center = 25;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTCenter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTCenter = function(value) {
  return jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional bool auto_power_snow_melt_enabled = 30;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getAutoPowerSnowMeltEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 30, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setAutoPowerSnowMeltEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 30, value);
};


/**
 * optional double voltage = 32;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * optional uint32 rx_beam_state = 33;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRxBeamState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRxBeamState = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional uint32 tx_beam_state = 34;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTxBeamState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTxBeamState = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional uint32 half_duplex_state = 35;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getHalfDuplexState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setHalfDuplexState = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional bool manual_tilt_enabled = 36;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getManualTiltEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 36, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setManualTiltEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 36, value);
};


/**
 * optional double tilt_angle = 37;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTiltAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 37, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTiltAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 37, value);
};


/**
 * optional uint32 pll_tx_lock_detected = 38;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getPllTxLockDetected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setPllTxLockDetected = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional bool eirp_exceeded_threshold = 39;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getEirpExceededThreshold = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 39, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setEirpExceededThreshold = function(value) {
  return jspb.Message.setProto3BooleanField(this, 39, value);
};


/**
 * optional bool idle_override_enabled = 41;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getIdleOverrideEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 41, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setIdleOverrideEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 41, value);
};


/**
 * optional bool theta_override_enabled = 42;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getThetaOverrideEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 42, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setThetaOverrideEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 42, value);
};


/**
 * optional double theta_override_value = 43;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getThetaOverrideValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 43, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setThetaOverrideValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 43, value);
};


/**
 * optional bool phi_override_enabled = 44;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getPhiOverrideEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 44, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setPhiOverrideEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 44, value);
};


/**
 * optional double phi_override_value = 45;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getPhiOverrideValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 45, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setPhiOverrideValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 45, value);
};


/**
 * optional uint32 rx_chan_override_value = 46;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRxChanOverrideValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRxChanOverrideValue = function(value) {
  return jspb.Message.setProto3IntField(this, 46, value);
};


/**
 * optional uint32 tx_chan_override_value = 47;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTxChanOverrideValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 47, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTxChanOverrideValue = function(value) {
  return jspb.Message.setProto3IntField(this, 47, value);
};


/**
 * optional bool sky_search_override_enabled = 48;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getSkySearchOverrideEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 48, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setSkySearchOverrideEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 48, value);
};


/**
 * optional bool fast_switching_enabled = 49;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getFastSwitchingEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 49, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setFastSwitchingEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 49, value);
};


/**
 * optional uint32 modulation_override_value = 50;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getModulationOverrideValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setModulationOverrideValue = function(value) {
  return jspb.Message.setProto3IntField(this, 50, value);
};


/**
 * optional bool force_eirp_failure = 51;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getForceEirpFailure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 51, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setForceEirpFailure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 51, value);
};


/**
 * optional bool force_pll_unlock = 52;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getForcePllUnlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 52, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setForcePllUnlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 52, value);
};


/**
 * optional uint32 ut_ine_success = 53;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getUtIneSuccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setUtIneSuccess = function(value) {
  return jspb.Message.setProto3IntField(this, 53, value);
};


/**
 * optional bool rf_ready = 54;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRfReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 54, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRfReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 54, value);
};


/**
 * optional bool tilt_to_stowed = 55;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTiltToStowed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 55, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTiltToStowed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 55, value);
};


/**
 * optional bool reboot = 56;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 56, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setReboot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 56, value);
};


/**
 * optional bool continuous_motor_test = 57;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getContinuousMotorTest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 57, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setContinuousMotorTest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 57, value);
};


/**
 * optional double distance_override_meters = 58;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getDistanceOverrideMeters = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 58, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setDistanceOverrideMeters = function(value) {
  return jspb.Message.setProto3FloatField(this, 58, value);
};


/**
 * optional uint32 amplitude_taper_override = 59;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getAmplitudeTaperOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 59, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setAmplitudeTaperOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 59, value);
};


/**
 * optional bool amplitude_taper_enabled = 60;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getAmplitudeTaperEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 60, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setAmplitudeTaperEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 60, value);
};


/**
 * optional double amplitude_taper_scale = 61;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getAmplitudeTaperScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 61, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setAmplitudeTaperScale = function(value) {
  return jspb.Message.setProto3FloatField(this, 61, value);
};


/**
 * optional uint32 country_code_override = 62;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getCountryCodeOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 62, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setCountryCodeOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 62, value);
};


/**
 * optional double max_pointing_distance = 63;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getMaxPointingDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 63, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setMaxPointingDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 63, value);
};


/**
 * optional double distance_scaling_factor = 64;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getDistanceScalingFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 64, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setDistanceScalingFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 64, value);
};


/**
 * optional int32 tx_duty_cycle_override = 65;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTxDutyCycleOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 65, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTxDutyCycleOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 65, value);
};


/**
 * optional int32 rx_duty_cycle_override = 66;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRxDutyCycleOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 66, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRxDutyCycleOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 66, value);
};


/**
 * optional float tx_time_ms = 67;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getTxTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 67, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setTxTimeMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 67, value);
};


/**
 * optional float rx_time_ms = 68;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getRxTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 68, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setRxTimeMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 68, value);
};


/**
 * optional double eirp_legal_limit_dbw = 69;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getEirpLegalLimitDbw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 69, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setEirpLegalLimitDbw = function(value) {
  return jspb.Message.setProto3FloatField(this, 69, value);
};


/**
 * optional double eirp_legal_limit_dbw_override = 70;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getEirpLegalLimitDbwOverride = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 70, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setEirpLegalLimitDbwOverride = function(value) {
  return jspb.Message.setProto3FloatField(this, 70, value);
};


/**
 * optional double eirp_adjustment_db = 71;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getEirpAdjustmentDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 71, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setEirpAdjustmentDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 71, value);
};


/**
 * optional double eirp_predicted_dbw = 72;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.getEirpPredictedDbw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 72, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetEmcResponse} returns this
 */
proto.SpaceX.API.Device.DishGetEmcResponse.prototype.setEirpPredictedDbw = function(value) {
  return jspb.Message.setProto3FloatField(this, 72, value);
};


