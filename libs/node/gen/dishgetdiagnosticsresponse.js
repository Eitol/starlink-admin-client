// source: spacex/api/device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.DishGetDiagnosticsResponse');
goog.provide('proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts');
goog.provide('proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode');
goog.provide('proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location');
goog.provide('proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.DishGetDiagnosticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.displayName = 'proto.SpaceX.API.Device.DishGetDiagnosticsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.displayName = 'proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.displayName = 'proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
hardwareVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
softwareVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
utcOffsetS: jspb.Message.getFieldWithDefault(msg, 4, 0),
hardwareSelfTest: jspb.Message.getFieldWithDefault(msg, 7, 0),
alerts: (f = msg.getAlerts()) && proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.toObject(includeInstance, f),
disablementCode: jspb.Message.getFieldWithDefault(msg, 6, 0),
location: (f = msg.getLocation()) && proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.DishGetDiagnosticsResponse;
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardwareVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSoftwareVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUtcOffsetS(value);
      break;
    case 7:
      var value = /** @type {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult} */ (reader.readEnum());
      msg.setHardwareSelfTest(value);
      break;
    case 5:
      var value = new proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts;
      reader.readMessage(value,proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.deserializeBinaryFromReader);
      msg.setAlerts(value);
      break;
    case 6:
      var value = /** @type {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode} */ (reader.readEnum());
      msg.setDisablementCode(value);
      break;
    case 8:
      var value = new proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location;
      reader.readMessage(value,proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHardwareVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSoftwareVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUtcOffsetS();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHardwareSelfTest();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAlerts();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.serializeBinaryToWriter
    );
  }
  f = message.getDisablementCode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult = {
  NO_RESULT: 0,
  PASSED: 1,
  FAILED: 2
};

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode = {
  UNKNOWN: 0,
  OKAY: 1,
  NO_ACTIVE_ACCOUNT: 2,
  TOO_FAR_FROM_SERVICE_ADDRESS: 3,
  IN_OCEAN: 4,
  INVALID_COUNTRY: 5,
  BLOCKED_COUNTRY: 6,
  DATA_OVERAGE_SANDBOX_POLICY: 7,
  CELL_IS_DISABLED: 8,
  UNLICENSED_COUNTRY: 9
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.toObject = function(includeInstance, msg) {
  var f, obj = {
dishIsHeating: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
dishThermalThrottle: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
dishThermalShutdown: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
powerSupplyThermalThrottle: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
motorsStuck: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
mastNotNearVertical: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
slowEthernetSpeeds: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
softwareInstallPending: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
movingTooFastForPolicy: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
obstructed: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts;
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDishIsHeating(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDishThermalThrottle(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDishThermalShutdown(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPowerSupplyThermalThrottle(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotorsStuck(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMastNotNearVertical(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSlowEthernetSpeeds(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSoftwareInstallPending(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMovingTooFastForPolicy(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setObstructed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDishIsHeating();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDishThermalThrottle();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDishThermalShutdown();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPowerSupplyThermalThrottle();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMotorsStuck();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMastNotNearVertical();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSlowEthernetSpeeds();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSoftwareInstallPending();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMovingTooFastForPolicy();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getObstructed();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional bool dish_is_heating = 1;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getDishIsHeating = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setDishIsHeating = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool dish_thermal_throttle = 2;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getDishThermalThrottle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setDishThermalThrottle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool dish_thermal_shutdown = 3;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getDishThermalShutdown = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setDishThermalShutdown = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool power_supply_thermal_throttle = 4;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getPowerSupplyThermalThrottle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setPowerSupplyThermalThrottle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool motors_stuck = 5;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getMotorsStuck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setMotorsStuck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool mast_not_near_vertical = 6;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getMastNotNearVertical = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setMastNotNearVertical = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool slow_ethernet_speeds = 7;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getSlowEthernetSpeeds = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setSlowEthernetSpeeds = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool software_install_pending = 8;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getSoftwareInstallPending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setSoftwareInstallPending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool moving_too_fast_for_policy = 9;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getMovingTooFastForPolicy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setMovingTooFastForPolicy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool obstructed = 10;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.getObstructed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts.prototype.setObstructed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
altitudeMeters: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location;
  return proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitudeMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAltitudeMeters();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double latitude = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double longitude = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double altitude_meters = 4;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.getAltitudeMeters = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location.prototype.setAltitudeMeters = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hardware_version = 2;
 * @return {string}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getHardwareVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setHardwareVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string software_version = 3;
 * @return {string}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getSoftwareVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setSoftwareVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 utc_offset_s = 4;
 * @return {number}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getUtcOffsetS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setUtcOffsetS = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TestResult hardware_self_test = 7;
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getHardwareSelfTest = function() {
  return /** @type {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.TestResult} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setHardwareSelfTest = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Alerts alerts = 5;
 * @return {?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getAlerts = function() {
  return /** @type{?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts, 5));
};


/**
 * @param {?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Alerts|undefined} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
*/
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setAlerts = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.clearAlerts = function() {
  return this.setAlerts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.hasAlerts = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional DisablementCode disablement_code = 6;
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getDisablementCode = function() {
  return /** @type {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse.DisablementCode} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setDisablementCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Location location = 8;
 * @return {?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.getLocation = function() {
  return /** @type{?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location, 8));
};


/**
 * @param {?proto.SpaceX.API.Device.DishGetDiagnosticsResponse.Location|undefined} value
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
*/
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.DishGetDiagnosticsResponse} returns this
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishGetDiagnosticsResponse.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 8) != null;
};


