// source: spacex/api/device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.SpeedTestResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SpaceX.API.Device.SpeedTestStats');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.SpeedTestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.SpeedTestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.SpeedTestResponse.displayName = 'proto.SpaceX.API.Device.SpeedTestResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.SpeedTestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.SpeedTestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedTestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
downloadBps: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
uploadBps: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
latencyS: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
downloadMbps: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
uploadMbps: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
latencyMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
routerSpeedtest: (f = msg.getRouterSpeedtest()) && proto.SpaceX.API.Device.SpeedTestStats.toObject(includeInstance, f),
downloadMbps1TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
uploadMbps1TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
downloadMbps4TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
uploadMbps4TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
downloadMbps16TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
uploadMbps16TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
downloadMbps64TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
uploadMbps64TcpConn: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse}
 */
proto.SpaceX.API.Device.SpeedTestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.SpeedTestResponse;
  return proto.SpaceX.API.Device.SpeedTestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.SpeedTestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse}
 */
proto.SpaceX.API.Device.SpeedTestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadBps(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadBps(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatencyS(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadMbps(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadMbps(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatencyMs(value);
      break;
    case 15:
      var value = new proto.SpaceX.API.Device.SpeedTestStats;
      reader.readMessage(value,proto.SpaceX.API.Device.SpeedTestStats.deserializeBinaryFromReader);
      msg.setRouterSpeedtest(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadMbps1TcpConn(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadMbps1TcpConn(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadMbps4TcpConn(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadMbps4TcpConn(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadMbps16TcpConn(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadMbps16TcpConn(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDownloadMbps64TcpConn(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUploadMbps64TcpConn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.SpeedTestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.SpeedTestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedTestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDownloadBps();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getUploadBps();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLatencyS();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDownloadMbps();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getUploadMbps();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getLatencyMs();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getRouterSpeedtest();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.SpaceX.API.Device.SpeedTestStats.serializeBinaryToWriter
    );
  }
  f = message.getDownloadMbps1TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getUploadMbps1TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getDownloadMbps4TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getUploadMbps4TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getDownloadMbps16TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getUploadMbps16TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getDownloadMbps64TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getUploadMbps64TcpConn();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
};


/**
 * optional float download_bps = 1;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadBps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadBps = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float upload_bps = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadBps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadBps = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float latency_s = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getLatencyS = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setLatencyS = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float download_mbps = 4;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadMbps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadMbps = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float upload_mbps = 5;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadMbps = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadMbps = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float latency_ms = 6;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getLatencyMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setLatencyMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional SpeedTestStats router_speedtest = 15;
 * @return {?proto.SpaceX.API.Device.SpeedTestStats}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getRouterSpeedtest = function() {
  return /** @type{?proto.SpaceX.API.Device.SpeedTestStats} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.SpeedTestStats, 15));
};


/**
 * @param {?proto.SpaceX.API.Device.SpeedTestStats|undefined} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
*/
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setRouterSpeedtest = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.clearRouterSpeedtest = function() {
  return this.setRouterSpeedtest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.hasRouterSpeedtest = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float download_mbps_1_tcp_conn = 7;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadMbps1TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadMbps1TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float upload_mbps_1_tcp_conn = 8;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadMbps1TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadMbps1TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float download_mbps_4_tcp_conn = 9;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadMbps4TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadMbps4TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float upload_mbps_4_tcp_conn = 10;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadMbps4TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadMbps4TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float download_mbps_16_tcp_conn = 11;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadMbps16TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadMbps16TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float upload_mbps_16_tcp_conn = 12;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadMbps16TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadMbps16TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float download_mbps_64_tcp_conn = 13;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getDownloadMbps64TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setDownloadMbps64TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float upload_mbps_64_tcp_conn = 14;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.getUploadMbps64TcpConn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedTestResponse} returns this
 */
proto.SpaceX.API.Device.SpeedTestResponse.prototype.setUploadMbps64TcpConn = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


