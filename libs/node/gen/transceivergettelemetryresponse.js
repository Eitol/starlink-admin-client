// source: spacex/api/device/transceiver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.TransceiverGetTelemetryResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.SpaceX.API.Device.TransceiverGetTelemetryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.displayName = 'proto.SpaceX.API.Device.TransceiverGetTelemetryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
antennaPointingMode: jspb.Message.getFieldWithDefault(msg, 1001, 0),
antennaPitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 1002, 0.0),
antennaRoll: jspb.Message.getFloatingPointFieldWithDefault(msg, 1003, 0.0),
antennaRxTheta: jspb.Message.getFloatingPointFieldWithDefault(msg, 1004, 0.0),
antennaTrueHeading: jspb.Message.getFloatingPointFieldWithDefault(msg, 1005, 0.0),
rxChannel: jspb.Message.getFieldWithDefault(msg, 1006, 0),
currentCellId: jspb.Message.getFieldWithDefault(msg, 1007, 0),
secondsUntilSlotEnd: jspb.Message.getFloatingPointFieldWithDefault(msg, 1008, 0.0),
wbRssiPeakMagDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1009, 0.0),
popPingDropRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 1010, 0.0),
snrDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1011, 0.0),
l1SnrAvgDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1012, 0.0),
l1SnrMinDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1013, 0.0),
l1SnrMaxDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1014, 0.0),
lmacSatelliteId: jspb.Message.getFieldWithDefault(msg, 1015, 0),
targetSatelliteId: jspb.Message.getFieldWithDefault(msg, 1016, 0),
grantMcs: jspb.Message.getFieldWithDefault(msg, 1017, 0),
grantSymbolsAvg: jspb.Message.getFloatingPointFieldWithDefault(msg, 1018, 0.0),
dedGrant: jspb.Message.getFieldWithDefault(msg, 1019, 0),
mobilityProactiveSlotChange: jspb.Message.getFieldWithDefault(msg, 1020, 0),
mobilityReactiveSlotChange: jspb.Message.getFieldWithDefault(msg, 1021, 0),
rfpTotalSynFailed: jspb.Message.getFieldWithDefault(msg, 1022, 0),
numOutOfSeq: jspb.Message.getFieldWithDefault(msg, 1023, 0),
numUlmapDrop: jspb.Message.getFieldWithDefault(msg, 1024, 0),
currentSecondsOfSchedule: jspb.Message.getFloatingPointFieldWithDefault(msg, 1025, 0.0),
sendLabelSwitchToGroundFailedCalls: jspb.Message.getFieldWithDefault(msg, 1026, 0),
emaVelocityX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1027, 0.0),
emaVelocityY: jspb.Message.getFloatingPointFieldWithDefault(msg, 1028, 0.0),
emaVelocityZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 1029, 0.0),
ceRssiDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1030, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.TransceiverGetTelemetryResponse;
  return proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1001:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAntennaPointingMode(value);
      break;
    case 1002:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAntennaPitch(value);
      break;
    case 1003:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAntennaRoll(value);
      break;
    case 1004:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAntennaRxTheta(value);
      break;
    case 1005:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAntennaTrueHeading(value);
      break;
    case 1006:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxChannel(value);
      break;
    case 1007:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentCellId(value);
      break;
    case 1008:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSecondsUntilSlotEnd(value);
      break;
    case 1009:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWbRssiPeakMagDb(value);
      break;
    case 1010:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPopPingDropRate(value);
      break;
    case 1011:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSnrDb(value);
      break;
    case 1012:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setL1SnrAvgDb(value);
      break;
    case 1013:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setL1SnrMinDb(value);
      break;
    case 1014:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setL1SnrMaxDb(value);
      break;
    case 1015:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLmacSatelliteId(value);
      break;
    case 1016:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetSatelliteId(value);
      break;
    case 1017:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrantMcs(value);
      break;
    case 1018:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGrantSymbolsAvg(value);
      break;
    case 1019:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDedGrant(value);
      break;
    case 1020:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMobilityProactiveSlotChange(value);
      break;
    case 1021:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMobilityReactiveSlotChange(value);
      break;
    case 1022:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRfpTotalSynFailed(value);
      break;
    case 1023:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutOfSeq(value);
      break;
    case 1024:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumUlmapDrop(value);
      break;
    case 1025:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentSecondsOfSchedule(value);
      break;
    case 1026:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendLabelSwitchToGroundFailedCalls(value);
      break;
    case 1027:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEmaVelocityX(value);
      break;
    case 1028:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEmaVelocityY(value);
      break;
    case 1029:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEmaVelocityZ(value);
      break;
    case 1030:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCeRssiDb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAntennaPointingMode();
  if (f !== 0) {
    writer.writeUint32(
      1001,
      f
    );
  }
  f = message.getAntennaPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      1002,
      f
    );
  }
  f = message.getAntennaRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      1003,
      f
    );
  }
  f = message.getAntennaRxTheta();
  if (f !== 0.0) {
    writer.writeFloat(
      1004,
      f
    );
  }
  f = message.getAntennaTrueHeading();
  if (f !== 0.0) {
    writer.writeFloat(
      1005,
      f
    );
  }
  f = message.getRxChannel();
  if (f !== 0) {
    writer.writeUint32(
      1006,
      f
    );
  }
  f = message.getCurrentCellId();
  if (f !== 0) {
    writer.writeUint32(
      1007,
      f
    );
  }
  f = message.getSecondsUntilSlotEnd();
  if (f !== 0.0) {
    writer.writeFloat(
      1008,
      f
    );
  }
  f = message.getWbRssiPeakMagDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1009,
      f
    );
  }
  f = message.getPopPingDropRate();
  if (f !== 0.0) {
    writer.writeFloat(
      1010,
      f
    );
  }
  f = message.getSnrDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1011,
      f
    );
  }
  f = message.getL1SnrAvgDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1012,
      f
    );
  }
  f = message.getL1SnrMinDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1013,
      f
    );
  }
  f = message.getL1SnrMaxDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1014,
      f
    );
  }
  f = message.getLmacSatelliteId();
  if (f !== 0) {
    writer.writeUint32(
      1015,
      f
    );
  }
  f = message.getTargetSatelliteId();
  if (f !== 0) {
    writer.writeUint32(
      1016,
      f
    );
  }
  f = message.getGrantMcs();
  if (f !== 0) {
    writer.writeUint32(
      1017,
      f
    );
  }
  f = message.getGrantSymbolsAvg();
  if (f !== 0.0) {
    writer.writeFloat(
      1018,
      f
    );
  }
  f = message.getDedGrant();
  if (f !== 0) {
    writer.writeUint32(
      1019,
      f
    );
  }
  f = message.getMobilityProactiveSlotChange();
  if (f !== 0) {
    writer.writeUint32(
      1020,
      f
    );
  }
  f = message.getMobilityReactiveSlotChange();
  if (f !== 0) {
    writer.writeUint32(
      1021,
      f
    );
  }
  f = message.getRfpTotalSynFailed();
  if (f !== 0) {
    writer.writeUint32(
      1022,
      f
    );
  }
  f = message.getNumOutOfSeq();
  if (f !== 0) {
    writer.writeUint32(
      1023,
      f
    );
  }
  f = message.getNumUlmapDrop();
  if (f !== 0) {
    writer.writeUint32(
      1024,
      f
    );
  }
  f = message.getCurrentSecondsOfSchedule();
  if (f !== 0.0) {
    writer.writeFloat(
      1025,
      f
    );
  }
  f = message.getSendLabelSwitchToGroundFailedCalls();
  if (f !== 0) {
    writer.writeUint32(
      1026,
      f
    );
  }
  f = message.getEmaVelocityX();
  if (f !== 0.0) {
    writer.writeDouble(
      1027,
      f
    );
  }
  f = message.getEmaVelocityY();
  if (f !== 0.0) {
    writer.writeDouble(
      1028,
      f
    );
  }
  f = message.getEmaVelocityZ();
  if (f !== 0.0) {
    writer.writeDouble(
      1029,
      f
    );
  }
  f = message.getCeRssiDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1030,
      f
    );
  }
};


/**
 * optional uint32 antenna_pointing_mode = 1001;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getAntennaPointingMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1001, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setAntennaPointingMode = function(value) {
  return jspb.Message.setProto3IntField(this, 1001, value);
};


/**
 * optional float antenna_pitch = 1002;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getAntennaPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1002, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setAntennaPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 1002, value);
};


/**
 * optional float antenna_roll = 1003;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getAntennaRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1003, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setAntennaRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 1003, value);
};


/**
 * optional float antenna_rx_theta = 1004;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getAntennaRxTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1004, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setAntennaRxTheta = function(value) {
  return jspb.Message.setProto3FloatField(this, 1004, value);
};


/**
 * optional float antenna_true_heading = 1005;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getAntennaTrueHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1005, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setAntennaTrueHeading = function(value) {
  return jspb.Message.setProto3FloatField(this, 1005, value);
};


/**
 * optional uint32 rx_channel = 1006;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getRxChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1006, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setRxChannel = function(value) {
  return jspb.Message.setProto3IntField(this, 1006, value);
};


/**
 * optional uint32 current_cell_id = 1007;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getCurrentCellId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1007, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setCurrentCellId = function(value) {
  return jspb.Message.setProto3IntField(this, 1007, value);
};


/**
 * optional float seconds_until_slot_end = 1008;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getSecondsUntilSlotEnd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1008, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setSecondsUntilSlotEnd = function(value) {
  return jspb.Message.setProto3FloatField(this, 1008, value);
};


/**
 * optional float wb_rssi_peak_mag_db = 1009;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getWbRssiPeakMagDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1009, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setWbRssiPeakMagDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1009, value);
};


/**
 * optional float pop_ping_drop_rate = 1010;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getPopPingDropRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1010, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setPopPingDropRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 1010, value);
};


/**
 * optional float snr_db = 1011;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getSnrDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1011, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setSnrDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1011, value);
};


/**
 * optional float l1_snr_avg_db = 1012;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getL1SnrAvgDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1012, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setL1SnrAvgDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1012, value);
};


/**
 * optional float l1_snr_min_db = 1013;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getL1SnrMinDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1013, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setL1SnrMinDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1013, value);
};


/**
 * optional float l1_snr_max_db = 1014;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getL1SnrMaxDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1014, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setL1SnrMaxDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1014, value);
};


/**
 * optional uint32 lmac_satellite_id = 1015;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getLmacSatelliteId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1015, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setLmacSatelliteId = function(value) {
  return jspb.Message.setProto3IntField(this, 1015, value);
};


/**
 * optional uint32 target_satellite_id = 1016;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getTargetSatelliteId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1016, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setTargetSatelliteId = function(value) {
  return jspb.Message.setProto3IntField(this, 1016, value);
};


/**
 * optional uint32 grant_mcs = 1017;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getGrantMcs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1017, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setGrantMcs = function(value) {
  return jspb.Message.setProto3IntField(this, 1017, value);
};


/**
 * optional float grant_symbols_avg = 1018;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getGrantSymbolsAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1018, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setGrantSymbolsAvg = function(value) {
  return jspb.Message.setProto3FloatField(this, 1018, value);
};


/**
 * optional uint32 ded_grant = 1019;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getDedGrant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1019, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setDedGrant = function(value) {
  return jspb.Message.setProto3IntField(this, 1019, value);
};


/**
 * optional uint32 mobility_proactive_slot_change = 1020;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getMobilityProactiveSlotChange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1020, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setMobilityProactiveSlotChange = function(value) {
  return jspb.Message.setProto3IntField(this, 1020, value);
};


/**
 * optional uint32 mobility_reactive_slot_change = 1021;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getMobilityReactiveSlotChange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1021, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setMobilityReactiveSlotChange = function(value) {
  return jspb.Message.setProto3IntField(this, 1021, value);
};


/**
 * optional uint32 rfp_total_syn_failed = 1022;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getRfpTotalSynFailed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1022, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setRfpTotalSynFailed = function(value) {
  return jspb.Message.setProto3IntField(this, 1022, value);
};


/**
 * optional uint32 num_out_of_seq = 1023;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getNumOutOfSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1023, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setNumOutOfSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 1023, value);
};


/**
 * optional uint32 num_ulmap_drop = 1024;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getNumUlmapDrop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1024, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setNumUlmapDrop = function(value) {
  return jspb.Message.setProto3IntField(this, 1024, value);
};


/**
 * optional float current_seconds_of_schedule = 1025;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getCurrentSecondsOfSchedule = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1025, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setCurrentSecondsOfSchedule = function(value) {
  return jspb.Message.setProto3FloatField(this, 1025, value);
};


/**
 * optional uint32 send_label_switch_to_ground_failed_calls = 1026;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getSendLabelSwitchToGroundFailedCalls = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1026, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setSendLabelSwitchToGroundFailedCalls = function(value) {
  return jspb.Message.setProto3IntField(this, 1026, value);
};


/**
 * optional double ema_velocity_x = 1027;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getEmaVelocityX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1027, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setEmaVelocityX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1027, value);
};


/**
 * optional double ema_velocity_y = 1028;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getEmaVelocityY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1028, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setEmaVelocityY = function(value) {
  return jspb.Message.setProto3FloatField(this, 1028, value);
};


/**
 * optional double ema_velocity_z = 1029;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getEmaVelocityZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1029, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setEmaVelocityZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 1029, value);
};


/**
 * optional float ce_rssi_db = 1030;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.getCeRssiDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1030, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetTelemetryResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetTelemetryResponse.prototype.setCeRssiDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1030, value);
};


