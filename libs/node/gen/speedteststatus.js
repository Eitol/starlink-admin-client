// source: spacex/api/device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.SpeedtestStatus');
goog.provide('proto.SpaceX.API.Device.SpeedtestStatus.Direction');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.SpaceX.API.Device.SpeedtestError');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.SpeedtestStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.SpaceX.API.Device.SpeedtestStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.SpeedtestStatus.displayName = 'proto.SpaceX.API.Device.SpeedtestStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SpaceX.API.Device.SpeedtestStatus.Direction.repeatedFields_, null);
};
goog.inherits(proto.SpaceX.API.Device.SpeedtestStatus.Direction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.SpeedtestStatus.Direction.displayName = 'proto.SpaceX.API.Device.SpeedtestStatus.Direction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.SpeedtestStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedtestStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
running: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
id: jspb.Message.getFieldWithDefault(msg, 2, 0),
up: (f = msg.getUp()) && proto.SpaceX.API.Device.SpeedtestStatus.Direction.toObject(includeInstance, f),
down: (f = msg.getDown()) && proto.SpaceX.API.Device.SpeedtestStatus.Direction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus}
 */
proto.SpaceX.API.Device.SpeedtestStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.SpeedtestStatus;
  return proto.SpaceX.API.Device.SpeedtestStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus}
 */
proto.SpaceX.API.Device.SpeedtestStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRunning(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 1000:
      var value = new proto.SpaceX.API.Device.SpeedtestStatus.Direction;
      reader.readMessage(value,proto.SpaceX.API.Device.SpeedtestStatus.Direction.deserializeBinaryFromReader);
      msg.setUp(value);
      break;
    case 1001:
      var value = new proto.SpaceX.API.Device.SpeedtestStatus.Direction;
      reader.readMessage(value,proto.SpaceX.API.Device.SpeedtestStatus.Direction.deserializeBinaryFromReader);
      msg.setDown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.SpeedtestStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedtestStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunning();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUp();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.SpaceX.API.Device.SpeedtestStatus.Direction.serializeBinaryToWriter
    );
  }
  f = message.getDown();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.SpaceX.API.Device.SpeedtestStatus.Direction.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.SpeedtestStatus.Direction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.toObject = function(includeInstance, msg) {
  var f, obj = {
throughputsMbpsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
err: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.SpeedtestStatus.Direction;
  return proto.SpaceX.API.Device.SpeedtestStatus.Direction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addThroughputsMbps(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!proto.SpaceX.API.Device.SpeedtestError} */ (reader.readEnum());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.SpeedtestStatus.Direction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThroughputsMbpsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getErr();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated float throughputs_mbps = 1;
 * @return {!Array<number>}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.getThroughputsMbpsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.setThroughputsMbpsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.addThroughputsMbps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.clearThroughputsMbpsList = function() {
  return this.setThroughputsMbpsList([]);
};


/**
 * optional SpeedtestError err = 2;
 * @return {!proto.SpaceX.API.Device.SpeedtestError}
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.getErr = function() {
  return /** @type {!proto.SpaceX.API.Device.SpeedtestError} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.SpeedtestError} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus.Direction} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.Direction.prototype.setErr = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool running = 1;
 * @return {boolean}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.getRunning = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.setRunning = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Direction up = 1000;
 * @return {?proto.SpaceX.API.Device.SpeedtestStatus.Direction}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.getUp = function() {
  return /** @type{?proto.SpaceX.API.Device.SpeedtestStatus.Direction} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.SpeedtestStatus.Direction, 1000));
};


/**
 * @param {?proto.SpaceX.API.Device.SpeedtestStatus.Direction|undefined} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
*/
proto.SpaceX.API.Device.SpeedtestStatus.prototype.setUp = function(value) {
  return jspb.Message.setWrapperField(this, 1000, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.clearUp = function() {
  return this.setUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.hasUp = function() {
  return jspb.Message.getField(this, 1000) != null;
};


/**
 * optional Direction down = 1001;
 * @return {?proto.SpaceX.API.Device.SpeedtestStatus.Direction}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.getDown = function() {
  return /** @type{?proto.SpaceX.API.Device.SpeedtestStatus.Direction} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.SpeedtestStatus.Direction, 1001));
};


/**
 * @param {?proto.SpaceX.API.Device.SpeedtestStatus.Direction|undefined} value
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
*/
proto.SpaceX.API.Device.SpeedtestStatus.prototype.setDown = function(value) {
  return jspb.Message.setWrapperField(this, 1001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.SpeedtestStatus} returns this
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.clearDown = function() {
  return this.setDown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.SpeedtestStatus.prototype.hasDown = function() {
  return jspb.Message.getField(this, 1001) != null;
};


