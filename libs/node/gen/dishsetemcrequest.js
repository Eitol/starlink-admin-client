// source: spacex/api/device/device.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.DishSetEmcRequest');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.DishSetEmcRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.DishSetEmcRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.DishSetEmcRequest.displayName = 'proto.SpaceX.API.Device.DishSetEmcRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.DishSetEmcRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.DishSetEmcRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishSetEmcRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
theta: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
phi: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
rxChan: jspb.Message.getFieldWithDefault(msg, 3, 0),
txChan: jspb.Message.getFieldWithDefault(msg, 4, 0),
modulation: jspb.Message.getFieldWithDefault(msg, 5, 0),
desiredTiltAngle: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
chanOverride: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
thetaEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
phiEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
idle: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
fastSwitching: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
skySearch: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
forcePllUnlock: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
forceEirpFailure: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
snowActiveOverride: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
manualTilting: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
tiltToStowed: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
reboot: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
continuousMotorTest: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
distanceOverrideMeters: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
amplitudeTaperOverride: jspb.Message.getFieldWithDefault(msg, 23, 0),
countryCodeOverride: jspb.Message.getFieldWithDefault(msg, 24, 0),
txDutyCycleOverride: jspb.Message.getFieldWithDefault(msg, 25, 0),
rxDutyCycleOverride: jspb.Message.getFieldWithDefault(msg, 26, 0),
eirpLegalLimitDbwOverride: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.0),
eirpAdjustmentDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.DishSetEmcRequest;
  return proto.SpaceX.API.Device.DishSetEmcRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.DishSetEmcRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTheta(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPhi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxChan(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxChan(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModulation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDesiredTiltAngle(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChanOverride(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setThetaEnabled(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhiEnabled(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdle(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFastSwitching(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkySearch(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcePllUnlock(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceEirpFailure(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSnowActiveOverride(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setManualTilting(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTiltToStowed(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReboot(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinuousMotorTest(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDistanceOverrideMeters(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmplitudeTaperOverride(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountryCodeOverride(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTxDutyCycleOverride(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRxDutyCycleOverride(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpLegalLimitDbwOverride(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEirpAdjustmentDb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.DishSetEmcRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.DishSetEmcRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.DishSetEmcRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTheta();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPhi();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRxChan();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTxChan();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getModulation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDesiredTiltAngle();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getChanOverride();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getThetaEnabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPhiEnabled();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIdle();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getFastSwitching();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getSkySearch();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getForcePllUnlock();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getForceEirpFailure();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getSnowActiveOverride();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getManualTilting();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getTiltToStowed();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getReboot();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getContinuousMotorTest();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getDistanceOverrideMeters();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getAmplitudeTaperOverride();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getCountryCodeOverride();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = message.getTxDutyCycleOverride();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getRxDutyCycleOverride();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getEirpLegalLimitDbwOverride();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getEirpAdjustmentDb();
  if (f !== 0.0) {
    writer.writeDouble(
      28,
      f
    );
  }
};


/**
 * optional double theta = 1;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getTheta = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setTheta = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double phi = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getPhi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setPhi = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 rx_chan = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getRxChan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setRxChan = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 tx_chan = 4;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getTxChan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setTxChan = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 modulation = 5;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getModulation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setModulation = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double desired_tilt_angle = 7;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getDesiredTiltAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setDesiredTiltAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool chan_override = 8;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getChanOverride = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setChanOverride = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool theta_enabled = 9;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getThetaEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setThetaEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool phi_enabled = 10;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getPhiEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setPhiEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool idle = 11;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getIdle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setIdle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool fast_switching = 12;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getFastSwitching = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setFastSwitching = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool sky_search = 13;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getSkySearch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setSkySearch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool force_pll_unlock = 14;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getForcePllUnlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setForcePllUnlock = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool force_eirp_failure = 15;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getForceEirpFailure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setForceEirpFailure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional bool snow_active_override = 16;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getSnowActiveOverride = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setSnowActiveOverride = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional bool manual_tilting = 18;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getManualTilting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setManualTilting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional bool tilt_to_stowed = 19;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getTiltToStowed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setTiltToStowed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional bool reboot = 20;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setReboot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool continuous_motor_test = 21;
 * @return {boolean}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getContinuousMotorTest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setContinuousMotorTest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional double distance_override_meters = 22;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getDistanceOverrideMeters = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setDistanceOverrideMeters = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional uint32 amplitude_taper_override = 23;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getAmplitudeTaperOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setAmplitudeTaperOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint32 country_code_override = 24;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getCountryCodeOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setCountryCodeOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 tx_duty_cycle_override = 25;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getTxDutyCycleOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setTxDutyCycleOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 rx_duty_cycle_override = 26;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getRxDutyCycleOverride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setRxDutyCycleOverride = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional double eirp_legal_limit_dbw_override = 27;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getEirpLegalLimitDbwOverride = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setEirpLegalLimitDbwOverride = function(value) {
  return jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional double eirp_adjustment_db = 28;
 * @return {number}
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.getEirpAdjustmentDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.DishSetEmcRequest} returns this
 */
proto.SpaceX.API.Device.DishSetEmcRequest.prototype.setEirpAdjustmentDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 28, value);
};


