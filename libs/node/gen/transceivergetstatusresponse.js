// source: spacex/api/device/transceiver.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.TransceiverGetStatusResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SpaceX.API.Device.TransceiverFaults');

goog.forwardDeclare('proto.SpaceX.API.Device.DishState');
goog.forwardDeclare('proto.SpaceX.API.Device.TransceiverModulatorState');
goog.forwardDeclare('proto.SpaceX.API.Device.TransceiverTransmitBlankingState');
goog.forwardDeclare('proto.SpaceX.API.Device.TransceiverTxRxState');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.SpaceX.API.Device.TransceiverGetStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.TransceiverGetStatusResponse.displayName = 'proto.SpaceX.API.Device.TransceiverGetStatusResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.TransceiverGetStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
modState: jspb.Message.getFieldWithDefault(msg, 1, 0),
demodState: jspb.Message.getFieldWithDefault(msg, 2, 0),
txState: jspb.Message.getFieldWithDefault(msg, 3, 0),
rxState: jspb.Message.getFieldWithDefault(msg, 4, 0),
state: jspb.Message.getFieldWithDefault(msg, 1006, 0),
faults: (f = msg.getFaults()) && proto.SpaceX.API.Device.TransceiverFaults.toObject(includeInstance, f),
transmitBlankingState: jspb.Message.getFieldWithDefault(msg, 1008, 0),
modemAsicTemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1009, 0.0),
txIfTemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1010, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.TransceiverGetStatusResponse;
  return proto.SpaceX.API.Device.TransceiverGetStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SpaceX.API.Device.TransceiverModulatorState} */ (reader.readEnum());
      msg.setModState(value);
      break;
    case 2:
      var value = /** @type {!proto.SpaceX.API.Device.TransceiverModulatorState} */ (reader.readEnum());
      msg.setDemodState(value);
      break;
    case 3:
      var value = /** @type {!proto.SpaceX.API.Device.TransceiverTxRxState} */ (reader.readEnum());
      msg.setTxState(value);
      break;
    case 4:
      var value = /** @type {!proto.SpaceX.API.Device.TransceiverTxRxState} */ (reader.readEnum());
      msg.setRxState(value);
      break;
    case 1006:
      var value = /** @type {!proto.SpaceX.API.Device.DishState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 1007:
      var value = new proto.SpaceX.API.Device.TransceiverFaults;
      reader.readMessage(value,proto.SpaceX.API.Device.TransceiverFaults.deserializeBinaryFromReader);
      msg.setFaults(value);
      break;
    case 1008:
      var value = /** @type {!proto.SpaceX.API.Device.TransceiverTransmitBlankingState} */ (reader.readEnum());
      msg.setTransmitBlankingState(value);
      break;
    case 1009:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setModemAsicTemp(value);
      break;
    case 1010:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTxIfTemp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.TransceiverGetStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDemodState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTxState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRxState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1006,
      f
    );
  }
  f = message.getFaults();
  if (f != null) {
    writer.writeMessage(
      1007,
      f,
      proto.SpaceX.API.Device.TransceiverFaults.serializeBinaryToWriter
    );
  }
  f = message.getTransmitBlankingState();
  if (f !== 0.0) {
    writer.writeEnum(
      1008,
      f
    );
  }
  f = message.getModemAsicTemp();
  if (f !== 0.0) {
    writer.writeFloat(
      1009,
      f
    );
  }
  f = message.getTxIfTemp();
  if (f !== 0.0) {
    writer.writeFloat(
      1010,
      f
    );
  }
};


/**
 * optional TransceiverModulatorState mod_state = 1;
 * @return {!proto.SpaceX.API.Device.TransceiverModulatorState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getModState = function() {
  return /** @type {!proto.SpaceX.API.Device.TransceiverModulatorState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TransceiverModulatorState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setModState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TransceiverModulatorState demod_state = 2;
 * @return {!proto.SpaceX.API.Device.TransceiverModulatorState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getDemodState = function() {
  return /** @type {!proto.SpaceX.API.Device.TransceiverModulatorState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TransceiverModulatorState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setDemodState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TransceiverTxRxState tx_state = 3;
 * @return {!proto.SpaceX.API.Device.TransceiverTxRxState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getTxState = function() {
  return /** @type {!proto.SpaceX.API.Device.TransceiverTxRxState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TransceiverTxRxState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setTxState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional TransceiverTxRxState rx_state = 4;
 * @return {!proto.SpaceX.API.Device.TransceiverTxRxState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getRxState = function() {
  return /** @type {!proto.SpaceX.API.Device.TransceiverTxRxState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TransceiverTxRxState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setRxState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional DishState state = 1006;
 * @return {!proto.SpaceX.API.Device.DishState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getState = function() {
  return /** @type {!proto.SpaceX.API.Device.DishState} */ (jspb.Message.getFieldWithDefault(this, 1006, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.DishState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1006, value);
};


/**
 * optional TransceiverFaults faults = 1007;
 * @return {?proto.SpaceX.API.Device.TransceiverFaults}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getFaults = function() {
  return /** @type{?proto.SpaceX.API.Device.TransceiverFaults} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.TransceiverFaults, 1007));
};


/**
 * @param {?proto.SpaceX.API.Device.TransceiverFaults|undefined} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
*/
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setFaults = function(value) {
  return jspb.Message.setWrapperField(this, 1007, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.clearFaults = function() {
  return this.setFaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.hasFaults = function() {
  return jspb.Message.getField(this, 1007) != null;
};


/**
 * optional TransceiverTransmitBlankingState transmit_blanking_state = 1008;
 * @return {!proto.SpaceX.API.Device.TransceiverTransmitBlankingState}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getTransmitBlankingState = function() {
  return /** @type {!proto.SpaceX.API.Device.TransceiverTransmitBlankingState} */ (jspb.Message.getFieldWithDefault(this, 1008, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TransceiverTransmitBlankingState} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setTransmitBlankingState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1008, value);
};


/**
 * optional float modem_asic_temp = 1009;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getModemAsicTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1009, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setModemAsicTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1009, value);
};


/**
 * optional float tx_if_temp = 1010;
 * @return {number}
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.getTxIfTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1010, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.TransceiverGetStatusResponse} returns this
 */
proto.SpaceX.API.Device.TransceiverGetStatusResponse.prototype.setTxIfTemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1010, value);
};


