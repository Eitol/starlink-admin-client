// source: spacex/api/device/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.NetworkInterface');
goog.provide('proto.SpaceX.API.Device.NetworkInterface.InterfaceCase');
goog.provide('proto.SpaceX.API.Device.NetworkInterface.RxStats');
goog.provide('proto.SpaceX.API.Device.NetworkInterface.TxStats');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SpaceX.API.Device.BridgeNetworkInterface');
goog.require('proto.SpaceX.API.Device.EthernetNetworkInterface');
goog.require('proto.SpaceX.API.Device.WifiNetworkInterface');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.NetworkInterface = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.SpaceX.API.Device.NetworkInterface.repeatedFields_, proto.SpaceX.API.Device.NetworkInterface.oneofGroups_);
};
goog.inherits(proto.SpaceX.API.Device.NetworkInterface, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.NetworkInterface.displayName = 'proto.SpaceX.API.Device.NetworkInterface';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.NetworkInterface.RxStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.NetworkInterface.RxStats.displayName = 'proto.SpaceX.API.Device.NetworkInterface.RxStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SpaceX.API.Device.NetworkInterface.TxStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.NetworkInterface.TxStats.displayName = 'proto.SpaceX.API.Device.NetworkInterface.TxStats';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpaceX.API.Device.NetworkInterface.repeatedFields_ = [6,7];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SpaceX.API.Device.NetworkInterface.oneofGroups_ = [[1000,1001,1002]];

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.NetworkInterface.InterfaceCase = {
  INTERFACE_NOT_SET: 0,
  ETHERNET: 1000,
  WIFI: 1001,
  BRIDGE: 1002
};

/**
 * @return {proto.SpaceX.API.Device.NetworkInterface.InterfaceCase}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getInterfaceCase = function() {
  return /** @type {proto.SpaceX.API.Device.NetworkInterface.InterfaceCase} */(jspb.Message.computeOneofCase(this, proto.SpaceX.API.Device.NetworkInterface.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.NetworkInterface.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.NetworkInterface} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
up: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
macAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
ipv4AddressesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
ipv6AddressesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
rxStats: (f = msg.getRxStats()) && proto.SpaceX.API.Device.NetworkInterface.RxStats.toObject(includeInstance, f),
txStats: (f = msg.getTxStats()) && proto.SpaceX.API.Device.NetworkInterface.TxStats.toObject(includeInstance, f),
ethernet: (f = msg.getEthernet()) && proto.SpaceX.API.Device.EthernetNetworkInterface.toObject(includeInstance, f),
wifi: (f = msg.getWifi()) && proto.SpaceX.API.Device.WifiNetworkInterface.toObject(includeInstance, f),
bridge: (f = msg.getBridge()) && proto.SpaceX.API.Device.BridgeNetworkInterface.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.NetworkInterface}
 */
proto.SpaceX.API.Device.NetworkInterface.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.NetworkInterface;
  return proto.SpaceX.API.Device.NetworkInterface.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.NetworkInterface} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.NetworkInterface}
 */
proto.SpaceX.API.Device.NetworkInterface.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacAddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addIpv4Addresses(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addIpv6Addresses(value);
      break;
    case 2:
      var value = new proto.SpaceX.API.Device.NetworkInterface.RxStats;
      reader.readMessage(value,proto.SpaceX.API.Device.NetworkInterface.RxStats.deserializeBinaryFromReader);
      msg.setRxStats(value);
      break;
    case 3:
      var value = new proto.SpaceX.API.Device.NetworkInterface.TxStats;
      reader.readMessage(value,proto.SpaceX.API.Device.NetworkInterface.TxStats.deserializeBinaryFromReader);
      msg.setTxStats(value);
      break;
    case 1000:
      var value = new proto.SpaceX.API.Device.EthernetNetworkInterface;
      reader.readMessage(value,proto.SpaceX.API.Device.EthernetNetworkInterface.deserializeBinaryFromReader);
      msg.setEthernet(value);
      break;
    case 1001:
      var value = new proto.SpaceX.API.Device.WifiNetworkInterface;
      reader.readMessage(value,proto.SpaceX.API.Device.WifiNetworkInterface.deserializeBinaryFromReader);
      msg.setWifi(value);
      break;
    case 1002:
      var value = new proto.SpaceX.API.Device.BridgeNetworkInterface;
      reader.readMessage(value,proto.SpaceX.API.Device.BridgeNetworkInterface.deserializeBinaryFromReader);
      msg.setBridge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.NetworkInterface.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.NetworkInterface} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMacAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIpv4AddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getIpv6AddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getRxStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SpaceX.API.Device.NetworkInterface.RxStats.serializeBinaryToWriter
    );
  }
  f = message.getTxStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SpaceX.API.Device.NetworkInterface.TxStats.serializeBinaryToWriter
    );
  }
  f = message.getEthernet();
  if (f != null) {
    writer.writeMessage(
      1000,
      f,
      proto.SpaceX.API.Device.EthernetNetworkInterface.serializeBinaryToWriter
    );
  }
  f = message.getWifi();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.SpaceX.API.Device.WifiNetworkInterface.serializeBinaryToWriter
    );
  }
  f = message.getBridge();
  if (f != null) {
    writer.writeMessage(
      1002,
      f,
      proto.SpaceX.API.Device.BridgeNetworkInterface.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.NetworkInterface.RxStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.NetworkInterface.RxStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.toObject = function(includeInstance, msg) {
  var f, obj = {
bytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
packets: jspb.Message.getFieldWithDefault(msg, 2, 0),
frameErrors: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.NetworkInterface.RxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.NetworkInterface.RxStats;
  return proto.SpaceX.API.Device.NetworkInterface.RxStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.NetworkInterface.RxStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.NetworkInterface.RxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPackets(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.NetworkInterface.RxStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.NetworkInterface.RxStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPackets();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFrameErrors();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 bytes = 1;
 * @return {number}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface.RxStats} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.setBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 packets = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.getPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface.RxStats} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.setPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 frame_errors = 3;
 * @return {number}
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.getFrameErrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface.RxStats} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.RxStats.prototype.setFrameErrors = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.NetworkInterface.TxStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.NetworkInterface.TxStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.toObject = function(includeInstance, msg) {
  var f, obj = {
bytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
packets: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.NetworkInterface.TxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.NetworkInterface.TxStats;
  return proto.SpaceX.API.Device.NetworkInterface.TxStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.NetworkInterface.TxStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.NetworkInterface.TxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPackets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.NetworkInterface.TxStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.NetworkInterface.TxStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPackets();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 bytes = 1;
 * @return {number}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface.TxStats} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.setBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 packets = 2;
 * @return {number}
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.getPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface.TxStats} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.TxStats.prototype.setPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool up = 4;
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getUp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.setUp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string mac_address = 5;
 * @return {string}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getMacAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.setMacAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string ipv4_addresses = 6;
 * @return {!Array<string>}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getIpv4AddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.setIpv4AddressesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.addIpv4Addresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearIpv4AddressesList = function() {
  return this.setIpv4AddressesList([]);
};


/**
 * repeated string ipv6_addresses = 7;
 * @return {!Array<string>}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getIpv6AddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.setIpv6AddressesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.addIpv6Addresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearIpv6AddressesList = function() {
  return this.setIpv6AddressesList([]);
};


/**
 * optional RxStats rx_stats = 2;
 * @return {?proto.SpaceX.API.Device.NetworkInterface.RxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getRxStats = function() {
  return /** @type{?proto.SpaceX.API.Device.NetworkInterface.RxStats} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.NetworkInterface.RxStats, 2));
};


/**
 * @param {?proto.SpaceX.API.Device.NetworkInterface.RxStats|undefined} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
*/
proto.SpaceX.API.Device.NetworkInterface.prototype.setRxStats = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearRxStats = function() {
  return this.setRxStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.hasRxStats = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TxStats tx_stats = 3;
 * @return {?proto.SpaceX.API.Device.NetworkInterface.TxStats}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getTxStats = function() {
  return /** @type{?proto.SpaceX.API.Device.NetworkInterface.TxStats} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.NetworkInterface.TxStats, 3));
};


/**
 * @param {?proto.SpaceX.API.Device.NetworkInterface.TxStats|undefined} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
*/
proto.SpaceX.API.Device.NetworkInterface.prototype.setTxStats = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearTxStats = function() {
  return this.setTxStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.hasTxStats = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EthernetNetworkInterface ethernet = 1000;
 * @return {?proto.SpaceX.API.Device.EthernetNetworkInterface}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getEthernet = function() {
  return /** @type{?proto.SpaceX.API.Device.EthernetNetworkInterface} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.EthernetNetworkInterface, 1000));
};


/**
 * @param {?proto.SpaceX.API.Device.EthernetNetworkInterface|undefined} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
*/
proto.SpaceX.API.Device.NetworkInterface.prototype.setEthernet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1000, proto.SpaceX.API.Device.NetworkInterface.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearEthernet = function() {
  return this.setEthernet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.hasEthernet = function() {
  return jspb.Message.getField(this, 1000) != null;
};


/**
 * optional WifiNetworkInterface wifi = 1001;
 * @return {?proto.SpaceX.API.Device.WifiNetworkInterface}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getWifi = function() {
  return /** @type{?proto.SpaceX.API.Device.WifiNetworkInterface} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.WifiNetworkInterface, 1001));
};


/**
 * @param {?proto.SpaceX.API.Device.WifiNetworkInterface|undefined} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
*/
proto.SpaceX.API.Device.NetworkInterface.prototype.setWifi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1001, proto.SpaceX.API.Device.NetworkInterface.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearWifi = function() {
  return this.setWifi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.hasWifi = function() {
  return jspb.Message.getField(this, 1001) != null;
};


/**
 * optional BridgeNetworkInterface bridge = 1002;
 * @return {?proto.SpaceX.API.Device.BridgeNetworkInterface}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.getBridge = function() {
  return /** @type{?proto.SpaceX.API.Device.BridgeNetworkInterface} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.BridgeNetworkInterface, 1002));
};


/**
 * @param {?proto.SpaceX.API.Device.BridgeNetworkInterface|undefined} value
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
*/
proto.SpaceX.API.Device.NetworkInterface.prototype.setBridge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1002, proto.SpaceX.API.Device.NetworkInterface.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.NetworkInterface} returns this
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.clearBridge = function() {
  return this.setBridge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.NetworkInterface.prototype.hasBridge = function() {
  return jspb.Message.getField(this, 1002) != null;
};


