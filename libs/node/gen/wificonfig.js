// source: spacex/api/device/wifi_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.SpaceX.API.Device.WifiConfig');
goog.provide('proto.SpaceX.API.Device.WifiConfig.Band');
goog.provide('proto.SpaceX.API.Device.WifiConfig.BasicServiceSet');
goog.provide('proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.AuthCase');
goog.provide('proto.SpaceX.API.Device.WifiConfig.HTBandwidth');
goog.provide('proto.SpaceX.API.Device.WifiConfig.Network');
goog.provide('proto.SpaceX.API.Device.WifiConfig.Security');
goog.provide('proto.SpaceX.API.Device.WifiConfig.VHTBandwidth');
goog.provide('proto.SpaceX.API.Device.WifiConfig.WanTrafficControlCase');
goog.provide('proto.SpaceX.API.Device.WifiConfig.WirelessMode');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.SpaceX.API.Device.AckSuppression');
goog.require('proto.SpaceX.API.Device.AuthOpen');
goog.require('proto.SpaceX.API.Device.AuthRadius');
goog.require('proto.SpaceX.API.Device.AuthWpa2');
goog.require('proto.SpaceX.API.Device.AuthWpa2Wpa3');
goog.require('proto.SpaceX.API.Device.AuthWpa3');
goog.require('proto.SpaceX.API.Device.BootInfo');
goog.require('proto.SpaceX.API.Device.CakeRateLimit');
goog.require('proto.SpaceX.API.Device.ClientConfig');
goog.require('proto.SpaceX.API.Device.ClientName');
goog.require('proto.SpaceX.API.Device.MeshConfig');
goog.require('proto.SpaceX.API.Device.NoTrafficControl');
goog.require('proto.SpaceX.API.Device.PublicKey');

goog.forwardDeclare('proto.SpaceX.API.Device.IfaceType');
goog.forwardDeclare('proto.SpaceX.API.Device.TxPowerLevel');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.WifiConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.SpaceX.API.Device.WifiConfig.repeatedFields_, proto.SpaceX.API.Device.WifiConfig.oneofGroups_);
};
goog.inherits(proto.SpaceX.API.Device.WifiConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.WifiConfig.displayName = 'proto.SpaceX.API.Device.WifiConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_);
};
goog.inherits(proto.SpaceX.API.Device.WifiConfig.BasicServiceSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.displayName = 'proto.SpaceX.API.Device.WifiConfig.BasicServiceSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SpaceX.API.Device.WifiConfig.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.SpaceX.API.Device.WifiConfig.Network.repeatedFields_, null);
};
goog.inherits(proto.SpaceX.API.Device.WifiConfig.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SpaceX.API.Device.WifiConfig.Network.displayName = 'proto.SpaceX.API.Device.WifiConfig.Network';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpaceX.API.Device.WifiConfig.repeatedFields_ = [22,30,1100,62,74];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SpaceX.API.Device.WifiConfig.oneofGroups_ = [[4001,4002,4003]];

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.WanTrafficControlCase = {
  WAN_TRAFFIC_CONTROL_NOT_SET: 0,
  WAN_NO_TRAFFIC_CONTROL: 4001,
  WAN_ACK_SUPPRESSION: 4002,
  WAN_CAKE_RATE_LIMIT: 4003
};

/**
 * @return {proto.SpaceX.API.Device.WifiConfig.WanTrafficControlCase}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWanTrafficControlCase = function() {
  return /** @type {proto.SpaceX.API.Device.WifiConfig.WanTrafficControlCase} */(jspb.Message.computeOneofCase(this, proto.SpaceX.API.Device.WifiConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.WifiConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.WifiConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
countryCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
applyCountryCode: jspb.Message.getBooleanFieldWithDefault(msg, 1085, false),
pinCountryCode: jspb.Message.getBooleanFieldWithDefault(msg, 53, false),
applyPinCountryCode: jspb.Message.getBooleanFieldWithDefault(msg, 1086, false),
customPowerTable: jspb.Message.getBooleanFieldWithDefault(msg, 54, false),
applyCustomPowerTable: jspb.Message.getBooleanFieldWithDefault(msg, 1087, false),
setupComplete: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
applySetupComplete: jspb.Message.getBooleanFieldWithDefault(msg, 1010, false),
version: jspb.Message.getFieldWithDefault(msg, 9, 0),
macWan: jspb.Message.getFieldWithDefault(msg, 12, ""),
macLan: jspb.Message.getFieldWithDefault(msg, 13, ""),
channel2ghz: jspb.Message.getFieldWithDefault(msg, 19, 0),
applyChannel2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1013, false),
channel5ghz: jspb.Message.getFieldWithDefault(msg, 20, 0),
applyChannel5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1014, false),
channel5ghzHigh: jspb.Message.getFieldWithDefault(msg, 57, 0),
applyChannel5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1016, false),
meshConfigsMap: (f = msg.getMeshConfigsMap()) ? f.toObject(includeInstance, proto.SpaceX.API.Device.MeshConfig.toObject) : [],
meshConfigsUpdatesMap: (f = msg.getMeshConfigsUpdatesMap()) ? f.toObject(includeInstance, proto.SpaceX.API.Device.MeshConfig.toObject) : [],
applyMeshConfigs: jspb.Message.getBooleanFieldWithDefault(msg, 1033, false),
dynamicKeysList: jspb.Message.toObjectList(msg.getDynamicKeysList(),
    proto.SpaceX.API.Device.PublicKey.toObject, includeInstance),
applyDynamicKeys: jspb.Message.getBooleanFieldWithDefault(msg, 39, false),
isRepeater: jspb.Message.getBooleanFieldWithDefault(msg, 23, false),
applyIsRepeater: jspb.Message.getBooleanFieldWithDefault(msg, 1031, false),
apMode: jspb.Message.getBooleanFieldWithDefault(msg, 51, false),
applyApMode: jspb.Message.getBooleanFieldWithDefault(msg, 1066, false),
isAviation: jspb.Message.getBooleanFieldWithDefault(msg, 49, false),
applyIsAviation: jspb.Message.getBooleanFieldWithDefault(msg, 1064, false),
bootCount: jspb.Message.getFieldWithDefault(msg, 26, 0),
boot: (f = msg.getBoot()) && proto.SpaceX.API.Device.BootInfo.toObject(includeInstance, f),
nameserversList: (f = jspb.Message.getRepeatedField(msg, 30)) == null ? undefined : f,
applyNameservers: jspb.Message.getBooleanFieldWithDefault(msg, 1054, false),
secureDns: jspb.Message.getBooleanFieldWithDefault(msg, 50, false),
applySecureDns: jspb.Message.getBooleanFieldWithDefault(msg, 1065, false),
bypassMode: jspb.Message.getBooleanFieldWithDefault(msg, 31, false),
applyBypassMode: jspb.Message.getBooleanFieldWithDefault(msg, 1055, false),
dfsEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 42, false),
applyDfsEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1058, false),
disableMeshOnboarding: jspb.Message.getBooleanFieldWithDefault(msg, 52, false),
applyDisableMeshOnboarding: jspb.Message.getBooleanFieldWithDefault(msg, 1067, false),
networksList: jspb.Message.toObjectList(msg.getNetworksList(),
    proto.SpaceX.API.Device.WifiConfig.Network.toObject, includeInstance),
applyNetworks: jspb.Message.getBooleanFieldWithDefault(msg, 1101, false),
incarnation: jspb.Message.getFieldWithDefault(msg, 43, 0),
wirelessMode2ghz: jspb.Message.getFieldWithDefault(msg, 44, 0),
applyWirelessMode2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1059, false),
wirelessMode5ghz: jspb.Message.getFieldWithDefault(msg, 45, 0),
applyWirelessMode5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1060, false),
wirelessMode5ghzHigh: jspb.Message.getFieldWithDefault(msg, 58, 0),
applyWirelessMode5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1070, false),
htBandwidth2ghz: jspb.Message.getFieldWithDefault(msg, 46, 0),
applyHtBandwidth2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1061, false),
htBandwidth5ghz: jspb.Message.getFieldWithDefault(msg, 47, 0),
applyHtBandwidth5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1062, false),
htBandwidth5ghzHigh: jspb.Message.getFieldWithDefault(msg, 59, 0),
applyHtBandwidth5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1071, false),
vhtBandwidth: jspb.Message.getFieldWithDefault(msg, 48, 0),
applyVhtBandwidth: jspb.Message.getBooleanFieldWithDefault(msg, 1063, false),
vhtBandwidth5ghzHigh: jspb.Message.getFieldWithDefault(msg, 60, 0),
applyVhtBandwidth5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1072, false),
usePublicServices: jspb.Message.getBooleanFieldWithDefault(msg, 55, false),
applyUsePublicServices: jspb.Message.getBooleanFieldWithDefault(msg, 1068, false),
disableAutomatedSpeedtests: jspb.Message.getBooleanFieldWithDefault(msg, 56, false),
applyDisableAutomatedSpeedtests: jspb.Message.getBooleanFieldWithDefault(msg, 1069, false),
enableUmbilicalVlan: jspb.Message.getBooleanFieldWithDefault(msg, 61, false),
applyEnableUmbilicalVlan: jspb.Message.getBooleanFieldWithDefault(msg, 1073, false),
clientNamesList: jspb.Message.toObjectList(msg.getClientNamesList(),
    proto.SpaceX.API.Device.ClientName.toObject, includeInstance),
applyClientNames: jspb.Message.getBooleanFieldWithDefault(msg, 1074, false),
outdoorMode: jspb.Message.getBooleanFieldWithDefault(msg, 63, false),
applyOutdoorMode: jspb.Message.getBooleanFieldWithDefault(msg, 1075, false),
disable2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 64, false),
applyDisable2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1076, false),
disable5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 65, false),
applyDisable5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1077, false),
disable5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 66, false),
applyDisable5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1078, false),
disableXMeshBackhaul: jspb.Message.getBooleanFieldWithDefault(msg, 67, false),
applyDisableXMeshBackhaul: jspb.Message.getBooleanFieldWithDefault(msg, 1079, false),
goldenBssid: jspb.Message.getFieldWithDefault(msg, 68, ""),
applyGoldenBssid: jspb.Message.getBooleanFieldWithDefault(msg, 1080, false),
goldenIfaceType: jspb.Message.getFieldWithDefault(msg, 69, 0),
applyGoldenIfaceType: jspb.Message.getBooleanFieldWithDefault(msg, 1081, false),
txPowerLevel2ghz: jspb.Message.getFieldWithDefault(msg, 70, 0),
applyTxPowerLevel2ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1082, false),
txPowerLevel5ghz: jspb.Message.getFieldWithDefault(msg, 71, 0),
applyTxPowerLevel5ghz: jspb.Message.getBooleanFieldWithDefault(msg, 1083, false),
txPowerLevel5ghzHigh: jspb.Message.getFieldWithDefault(msg, 72, 0),
applyTxPowerLevel5ghzHigh: jspb.Message.getBooleanFieldWithDefault(msg, 1084, false),
disablePendingUpdateReboot: jspb.Message.getBooleanFieldWithDefault(msg, 73, false),
applyDisablePendingUpdateReboot: jspb.Message.getBooleanFieldWithDefault(msg, 1088, false),
clientConfigsList: jspb.Message.toObjectList(msg.getClientConfigsList(),
    proto.SpaceX.API.Device.ClientConfig.toObject, includeInstance),
applyClientConfigs: jspb.Message.getBooleanFieldWithDefault(msg, 1089, false),
disableSetWifiConfigFromController: jspb.Message.getBooleanFieldWithDefault(msg, 75, false),
applyDisableSetWifiConfigFromController: jspb.Message.getBooleanFieldWithDefault(msg, 1090, false),
clientKey: msg.getClientKey_asB64(),
applyClientKey: jspb.Message.getBooleanFieldWithDefault(msg, 1091, false),
wanNoTrafficControl: (f = msg.getWanNoTrafficControl()) && proto.SpaceX.API.Device.NoTrafficControl.toObject(includeInstance, f),
wanAckSuppression: (f = msg.getWanAckSuppression()) && proto.SpaceX.API.Device.AckSuppression.toObject(includeInstance, f),
wanCakeRateLimit: (f = msg.getWanCakeRateLimit()) && proto.SpaceX.API.Device.CakeRateLimit.toObject(includeInstance, f),
applyWanTrafficControl: jspb.Message.getBooleanFieldWithDefault(msg, 1092, false),
wanHostDscpMark: jspb.Message.getFieldWithDefault(msg, 77, 0),
applyWanHostDscpMark: jspb.Message.getBooleanFieldWithDefault(msg, 1093, false),
debugPopPings: jspb.Message.getBooleanFieldWithDefault(msg, 79, false),
applyDebugPopPings: jspb.Message.getBooleanFieldWithDefault(msg, 1095, false),
clientTester: jspb.Message.getBooleanFieldWithDefault(msg, 80, false),
applyClientTester: jspb.Message.getBooleanFieldWithDefault(msg, 1096, false),
tag: jspb.Message.getFieldWithDefault(msg, 78, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.WifiConfig}
 */
proto.SpaceX.API.Device.WifiConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.WifiConfig;
  return proto.SpaceX.API.Device.WifiConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.WifiConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.WifiConfig}
 */
proto.SpaceX.API.Device.WifiConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 1085:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyCountryCode(value);
      break;
    case 53:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinCountryCode(value);
      break;
    case 1086:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyPinCountryCode(value);
      break;
    case 54:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCustomPowerTable(value);
      break;
    case 1087:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyCustomPowerTable(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSetupComplete(value);
      break;
    case 1010:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplySetupComplete(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacWan(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacLan(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel2ghz(value);
      break;
    case 1013:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyChannel2ghz(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel5ghz(value);
      break;
    case 1014:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyChannel5ghz(value);
      break;
    case 57:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel5ghzHigh(value);
      break;
    case 1016:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyChannel5ghzHigh(value);
      break;
    case 33:
      var value = msg.getMeshConfigsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.SpaceX.API.Device.MeshConfig.deserializeBinaryFromReader, "", new proto.SpaceX.API.Device.MeshConfig());
         });
      break;
    case 3033:
      var value = msg.getMeshConfigsUpdatesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.SpaceX.API.Device.MeshConfig.deserializeBinaryFromReader, "", new proto.SpaceX.API.Device.MeshConfig());
         });
      break;
    case 1033:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyMeshConfigs(value);
      break;
    case 22:
      var value = new proto.SpaceX.API.Device.PublicKey;
      reader.readMessage(value,proto.SpaceX.API.Device.PublicKey.deserializeBinaryFromReader);
      msg.addDynamicKeys(value);
      break;
    case 39:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDynamicKeys(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRepeater(value);
      break;
    case 1031:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyIsRepeater(value);
      break;
    case 51:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApMode(value);
      break;
    case 1066:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyApMode(value);
      break;
    case 49:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAviation(value);
      break;
    case 1064:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyIsAviation(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBootCount(value);
      break;
    case 3001:
      var value = new proto.SpaceX.API.Device.BootInfo;
      reader.readMessage(value,proto.SpaceX.API.Device.BootInfo.deserializeBinaryFromReader);
      msg.setBoot(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.addNameservers(value);
      break;
    case 1054:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyNameservers(value);
      break;
    case 50:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecureDns(value);
      break;
    case 1065:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplySecureDns(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBypassMode(value);
      break;
    case 1055:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyBypassMode(value);
      break;
    case 42:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDfsEnabled(value);
      break;
    case 1058:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDfsEnabled(value);
      break;
    case 52:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableMeshOnboarding(value);
      break;
    case 1067:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisableMeshOnboarding(value);
      break;
    case 1100:
      var value = new proto.SpaceX.API.Device.WifiConfig.Network;
      reader.readMessage(value,proto.SpaceX.API.Device.WifiConfig.Network.deserializeBinaryFromReader);
      msg.addNetworks(value);
      break;
    case 1101:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyNetworks(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIncarnation(value);
      break;
    case 44:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (reader.readEnum());
      msg.setWirelessMode2ghz(value);
      break;
    case 1059:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyWirelessMode2ghz(value);
      break;
    case 45:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (reader.readEnum());
      msg.setWirelessMode5ghz(value);
      break;
    case 1060:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyWirelessMode5ghz(value);
      break;
    case 58:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (reader.readEnum());
      msg.setWirelessMode5ghzHigh(value);
      break;
    case 1070:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyWirelessMode5ghzHigh(value);
      break;
    case 46:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (reader.readEnum());
      msg.setHtBandwidth2ghz(value);
      break;
    case 1061:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyHtBandwidth2ghz(value);
      break;
    case 47:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (reader.readEnum());
      msg.setHtBandwidth5ghz(value);
      break;
    case 1062:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyHtBandwidth5ghz(value);
      break;
    case 59:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (reader.readEnum());
      msg.setHtBandwidth5ghzHigh(value);
      break;
    case 1071:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyHtBandwidth5ghzHigh(value);
      break;
    case 48:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} */ (reader.readEnum());
      msg.setVhtBandwidth(value);
      break;
    case 1063:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyVhtBandwidth(value);
      break;
    case 60:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} */ (reader.readEnum());
      msg.setVhtBandwidth5ghzHigh(value);
      break;
    case 1072:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyVhtBandwidth5ghzHigh(value);
      break;
    case 55:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsePublicServices(value);
      break;
    case 1068:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyUsePublicServices(value);
      break;
    case 56:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableAutomatedSpeedtests(value);
      break;
    case 1069:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisableAutomatedSpeedtests(value);
      break;
    case 61:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableUmbilicalVlan(value);
      break;
    case 1073:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyEnableUmbilicalVlan(value);
      break;
    case 62:
      var value = new proto.SpaceX.API.Device.ClientName;
      reader.readMessage(value,proto.SpaceX.API.Device.ClientName.deserializeBinaryFromReader);
      msg.addClientNames(value);
      break;
    case 1074:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyClientNames(value);
      break;
    case 63:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutdoorMode(value);
      break;
    case 1075:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyOutdoorMode(value);
      break;
    case 64:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable2ghz(value);
      break;
    case 1076:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisable2ghz(value);
      break;
    case 65:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable5ghz(value);
      break;
    case 1077:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisable5ghz(value);
      break;
    case 66:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable5ghzHigh(value);
      break;
    case 1078:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisable5ghzHigh(value);
      break;
    case 67:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableXMeshBackhaul(value);
      break;
    case 1079:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisableXMeshBackhaul(value);
      break;
    case 68:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoldenBssid(value);
      break;
    case 1080:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyGoldenBssid(value);
      break;
    case 69:
      var value = /** @type {!proto.SpaceX.API.Device.IfaceType} */ (reader.readEnum());
      msg.setGoldenIfaceType(value);
      break;
    case 1081:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyGoldenIfaceType(value);
      break;
    case 70:
      var value = /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (reader.readEnum());
      msg.setTxPowerLevel2ghz(value);
      break;
    case 1082:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyTxPowerLevel2ghz(value);
      break;
    case 71:
      var value = /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (reader.readEnum());
      msg.setTxPowerLevel5ghz(value);
      break;
    case 1083:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyTxPowerLevel5ghz(value);
      break;
    case 72:
      var value = /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (reader.readEnum());
      msg.setTxPowerLevel5ghzHigh(value);
      break;
    case 1084:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyTxPowerLevel5ghzHigh(value);
      break;
    case 73:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablePendingUpdateReboot(value);
      break;
    case 1088:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisablePendingUpdateReboot(value);
      break;
    case 74:
      var value = new proto.SpaceX.API.Device.ClientConfig;
      reader.readMessage(value,proto.SpaceX.API.Device.ClientConfig.deserializeBinaryFromReader);
      msg.addClientConfigs(value);
      break;
    case 1089:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyClientConfigs(value);
      break;
    case 75:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableSetWifiConfigFromController(value);
      break;
    case 1090:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDisableSetWifiConfigFromController(value);
      break;
    case 76:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientKey(value);
      break;
    case 1091:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyClientKey(value);
      break;
    case 4001:
      var value = new proto.SpaceX.API.Device.NoTrafficControl;
      reader.readMessage(value,proto.SpaceX.API.Device.NoTrafficControl.deserializeBinaryFromReader);
      msg.setWanNoTrafficControl(value);
      break;
    case 4002:
      var value = new proto.SpaceX.API.Device.AckSuppression;
      reader.readMessage(value,proto.SpaceX.API.Device.AckSuppression.deserializeBinaryFromReader);
      msg.setWanAckSuppression(value);
      break;
    case 4003:
      var value = new proto.SpaceX.API.Device.CakeRateLimit;
      reader.readMessage(value,proto.SpaceX.API.Device.CakeRateLimit.deserializeBinaryFromReader);
      msg.setWanCakeRateLimit(value);
      break;
    case 1092:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyWanTrafficControl(value);
      break;
    case 77:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWanHostDscpMark(value);
      break;
    case 1093:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyWanHostDscpMark(value);
      break;
    case 79:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugPopPings(value);
      break;
    case 1095:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyDebugPopPings(value);
      break;
    case 80:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClientTester(value);
      break;
    case 1096:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyClientTester(value);
      break;
    case 78:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.WifiConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.WifiConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountryCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApplyCountryCode();
  if (f) {
    writer.writeBool(
      1085,
      f
    );
  }
  f = message.getPinCountryCode();
  if (f) {
    writer.writeBool(
      53,
      f
    );
  }
  f = message.getApplyPinCountryCode();
  if (f) {
    writer.writeBool(
      1086,
      f
    );
  }
  f = message.getCustomPowerTable();
  if (f) {
    writer.writeBool(
      54,
      f
    );
  }
  f = message.getApplyCustomPowerTable();
  if (f) {
    writer.writeBool(
      1087,
      f
    );
  }
  f = message.getSetupComplete();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getApplySetupComplete();
  if (f) {
    writer.writeBool(
      1010,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMacWan();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getMacLan();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getChannel2ghz();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getApplyChannel2ghz();
  if (f) {
    writer.writeBool(
      1013,
      f
    );
  }
  f = message.getChannel5ghz();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getApplyChannel5ghz();
  if (f) {
    writer.writeBool(
      1014,
      f
    );
  }
  f = message.getChannel5ghzHigh();
  if (f !== 0) {
    writer.writeUint32(
      57,
      f
    );
  }
  f = message.getApplyChannel5ghzHigh();
  if (f) {
    writer.writeBool(
      1016,
      f
    );
  }
  f = message.getMeshConfigsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(33, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.SpaceX.API.Device.MeshConfig.serializeBinaryToWriter);
  }
  f = message.getMeshConfigsUpdatesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3033, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.SpaceX.API.Device.MeshConfig.serializeBinaryToWriter);
  }
  f = message.getApplyMeshConfigs();
  if (f) {
    writer.writeBool(
      1033,
      f
    );
  }
  f = message.getDynamicKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.SpaceX.API.Device.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getApplyDynamicKeys();
  if (f) {
    writer.writeBool(
      39,
      f
    );
  }
  f = message.getIsRepeater();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
  f = message.getApplyIsRepeater();
  if (f) {
    writer.writeBool(
      1031,
      f
    );
  }
  f = message.getApMode();
  if (f) {
    writer.writeBool(
      51,
      f
    );
  }
  f = message.getApplyApMode();
  if (f) {
    writer.writeBool(
      1066,
      f
    );
  }
  f = message.getIsAviation();
  if (f) {
    writer.writeBool(
      49,
      f
    );
  }
  f = message.getApplyIsAviation();
  if (f) {
    writer.writeBool(
      1064,
      f
    );
  }
  f = message.getBootCount();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getBoot();
  if (f != null) {
    writer.writeMessage(
      3001,
      f,
      proto.SpaceX.API.Device.BootInfo.serializeBinaryToWriter
    );
  }
  f = message.getNameserversList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      30,
      f
    );
  }
  f = message.getApplyNameservers();
  if (f) {
    writer.writeBool(
      1054,
      f
    );
  }
  f = message.getSecureDns();
  if (f) {
    writer.writeBool(
      50,
      f
    );
  }
  f = message.getApplySecureDns();
  if (f) {
    writer.writeBool(
      1065,
      f
    );
  }
  f = message.getBypassMode();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getApplyBypassMode();
  if (f) {
    writer.writeBool(
      1055,
      f
    );
  }
  f = message.getDfsEnabled();
  if (f) {
    writer.writeBool(
      42,
      f
    );
  }
  f = message.getApplyDfsEnabled();
  if (f) {
    writer.writeBool(
      1058,
      f
    );
  }
  f = message.getDisableMeshOnboarding();
  if (f) {
    writer.writeBool(
      52,
      f
    );
  }
  f = message.getApplyDisableMeshOnboarding();
  if (f) {
    writer.writeBool(
      1067,
      f
    );
  }
  f = message.getNetworksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1100,
      f,
      proto.SpaceX.API.Device.WifiConfig.Network.serializeBinaryToWriter
    );
  }
  f = message.getApplyNetworks();
  if (f) {
    writer.writeBool(
      1101,
      f
    );
  }
  f = message.getIncarnation();
  if (f !== 0) {
    writer.writeUint64(
      43,
      f
    );
  }
  f = message.getWirelessMode2ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      44,
      f
    );
  }
  f = message.getApplyWirelessMode2ghz();
  if (f) {
    writer.writeBool(
      1059,
      f
    );
  }
  f = message.getWirelessMode5ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      45,
      f
    );
  }
  f = message.getApplyWirelessMode5ghz();
  if (f) {
    writer.writeBool(
      1060,
      f
    );
  }
  f = message.getWirelessMode5ghzHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      58,
      f
    );
  }
  f = message.getApplyWirelessMode5ghzHigh();
  if (f) {
    writer.writeBool(
      1070,
      f
    );
  }
  f = message.getHtBandwidth2ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      46,
      f
    );
  }
  f = message.getApplyHtBandwidth2ghz();
  if (f) {
    writer.writeBool(
      1061,
      f
    );
  }
  f = message.getHtBandwidth5ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      47,
      f
    );
  }
  f = message.getApplyHtBandwidth5ghz();
  if (f) {
    writer.writeBool(
      1062,
      f
    );
  }
  f = message.getHtBandwidth5ghzHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      59,
      f
    );
  }
  f = message.getApplyHtBandwidth5ghzHigh();
  if (f) {
    writer.writeBool(
      1071,
      f
    );
  }
  f = message.getVhtBandwidth();
  if (f !== 0.0) {
    writer.writeEnum(
      48,
      f
    );
  }
  f = message.getApplyVhtBandwidth();
  if (f) {
    writer.writeBool(
      1063,
      f
    );
  }
  f = message.getVhtBandwidth5ghzHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      60,
      f
    );
  }
  f = message.getApplyVhtBandwidth5ghzHigh();
  if (f) {
    writer.writeBool(
      1072,
      f
    );
  }
  f = message.getUsePublicServices();
  if (f) {
    writer.writeBool(
      55,
      f
    );
  }
  f = message.getApplyUsePublicServices();
  if (f) {
    writer.writeBool(
      1068,
      f
    );
  }
  f = message.getDisableAutomatedSpeedtests();
  if (f) {
    writer.writeBool(
      56,
      f
    );
  }
  f = message.getApplyDisableAutomatedSpeedtests();
  if (f) {
    writer.writeBool(
      1069,
      f
    );
  }
  f = message.getEnableUmbilicalVlan();
  if (f) {
    writer.writeBool(
      61,
      f
    );
  }
  f = message.getApplyEnableUmbilicalVlan();
  if (f) {
    writer.writeBool(
      1073,
      f
    );
  }
  f = message.getClientNamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      62,
      f,
      proto.SpaceX.API.Device.ClientName.serializeBinaryToWriter
    );
  }
  f = message.getApplyClientNames();
  if (f) {
    writer.writeBool(
      1074,
      f
    );
  }
  f = message.getOutdoorMode();
  if (f) {
    writer.writeBool(
      63,
      f
    );
  }
  f = message.getApplyOutdoorMode();
  if (f) {
    writer.writeBool(
      1075,
      f
    );
  }
  f = message.getDisable2ghz();
  if (f) {
    writer.writeBool(
      64,
      f
    );
  }
  f = message.getApplyDisable2ghz();
  if (f) {
    writer.writeBool(
      1076,
      f
    );
  }
  f = message.getDisable5ghz();
  if (f) {
    writer.writeBool(
      65,
      f
    );
  }
  f = message.getApplyDisable5ghz();
  if (f) {
    writer.writeBool(
      1077,
      f
    );
  }
  f = message.getDisable5ghzHigh();
  if (f) {
    writer.writeBool(
      66,
      f
    );
  }
  f = message.getApplyDisable5ghzHigh();
  if (f) {
    writer.writeBool(
      1078,
      f
    );
  }
  f = message.getDisableXMeshBackhaul();
  if (f) {
    writer.writeBool(
      67,
      f
    );
  }
  f = message.getApplyDisableXMeshBackhaul();
  if (f) {
    writer.writeBool(
      1079,
      f
    );
  }
  f = message.getGoldenBssid();
  if (f.length > 0) {
    writer.writeString(
      68,
      f
    );
  }
  f = message.getApplyGoldenBssid();
  if (f) {
    writer.writeBool(
      1080,
      f
    );
  }
  f = message.getGoldenIfaceType();
  if (f !== 0.0) {
    writer.writeEnum(
      69,
      f
    );
  }
  f = message.getApplyGoldenIfaceType();
  if (f) {
    writer.writeBool(
      1081,
      f
    );
  }
  f = message.getTxPowerLevel2ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      70,
      f
    );
  }
  f = message.getApplyTxPowerLevel2ghz();
  if (f) {
    writer.writeBool(
      1082,
      f
    );
  }
  f = message.getTxPowerLevel5ghz();
  if (f !== 0.0) {
    writer.writeEnum(
      71,
      f
    );
  }
  f = message.getApplyTxPowerLevel5ghz();
  if (f) {
    writer.writeBool(
      1083,
      f
    );
  }
  f = message.getTxPowerLevel5ghzHigh();
  if (f !== 0.0) {
    writer.writeEnum(
      72,
      f
    );
  }
  f = message.getApplyTxPowerLevel5ghzHigh();
  if (f) {
    writer.writeBool(
      1084,
      f
    );
  }
  f = message.getDisablePendingUpdateReboot();
  if (f) {
    writer.writeBool(
      73,
      f
    );
  }
  f = message.getApplyDisablePendingUpdateReboot();
  if (f) {
    writer.writeBool(
      1088,
      f
    );
  }
  f = message.getClientConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      74,
      f,
      proto.SpaceX.API.Device.ClientConfig.serializeBinaryToWriter
    );
  }
  f = message.getApplyClientConfigs();
  if (f) {
    writer.writeBool(
      1089,
      f
    );
  }
  f = message.getDisableSetWifiConfigFromController();
  if (f) {
    writer.writeBool(
      75,
      f
    );
  }
  f = message.getApplyDisableSetWifiConfigFromController();
  if (f) {
    writer.writeBool(
      1090,
      f
    );
  }
  f = message.getClientKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      76,
      f
    );
  }
  f = message.getApplyClientKey();
  if (f) {
    writer.writeBool(
      1091,
      f
    );
  }
  f = message.getWanNoTrafficControl();
  if (f != null) {
    writer.writeMessage(
      4001,
      f,
      proto.SpaceX.API.Device.NoTrafficControl.serializeBinaryToWriter
    );
  }
  f = message.getWanAckSuppression();
  if (f != null) {
    writer.writeMessage(
      4002,
      f,
      proto.SpaceX.API.Device.AckSuppression.serializeBinaryToWriter
    );
  }
  f = message.getWanCakeRateLimit();
  if (f != null) {
    writer.writeMessage(
      4003,
      f,
      proto.SpaceX.API.Device.CakeRateLimit.serializeBinaryToWriter
    );
  }
  f = message.getApplyWanTrafficControl();
  if (f) {
    writer.writeBool(
      1092,
      f
    );
  }
  f = message.getWanHostDscpMark();
  if (f !== 0) {
    writer.writeInt32(
      77,
      f
    );
  }
  f = message.getApplyWanHostDscpMark();
  if (f) {
    writer.writeBool(
      1093,
      f
    );
  }
  f = message.getDebugPopPings();
  if (f) {
    writer.writeBool(
      79,
      f
    );
  }
  f = message.getApplyDebugPopPings();
  if (f) {
    writer.writeBool(
      1095,
      f
    );
  }
  f = message.getClientTester();
  if (f) {
    writer.writeBool(
      80,
      f
    );
  }
  f = message.getApplyClientTester();
  if (f) {
    writer.writeBool(
      1096,
      f
    );
  }
  f = message.getTag();
  if (f !== 0) {
    writer.writeUint32(
      78,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.Security = {
  UNKNOWN: 0,
  WPA2: 1,
  WPA3: 2,
  WPA2WPA3: 3
};

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.Band = {
  RF_UNKNOWN: 0,
  RF_2GHZ: 2,
  RF_5GHZ: 5,
  RF_5GHZ_HIGH: 6
};

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.WirelessMode = {
  WIRELESS_MODE_DEFAULT: 0,
  A_ONLY: 1,
  B_ONLY: 2,
  G_ONLY: 3,
  N_ONLY: 4,
  B_G_MIXED: 5,
  A_N_MIXED: 6,
  G_N_MIXED: 7,
  B_G_N_MIXED: 8,
  A_AN_AC_MIXED: 9,
  AN_AC_MIXED: 10,
  B_G_N_AX_MIXED: 11,
  A_AN_AC_AX_MIXED: 12
};

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.HTBandwidth = {
  HT_BANDWIDTH_DEFAULT: 0,
  HT_BANDWIDTH_20_MHZ: 1,
  HT_BANDWIDTH_20_OR_40_MHZ: 2
};

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.VHTBandwidth = {
  VHT_BANDWIDTH_DEFAULT: 0,
  VHT_BANDWIDTH_DISABLED: 1,
  VHT_BANDWIDTH_80_MHZ: 2,
  VHT_BANDWIDTH_160_MHZ: 3,
  VHT_BANDWIDTH_80_PLUS_80_MHZ: 4
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_ = [[2001,2002,2003,2004,2005]];

/**
 * @enum {number}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.AuthCase = {
  AUTH_NOT_SET: 0,
  AUTH_OPEN: 2001,
  AUTH_WPA2: 2002,
  AUTH_WPA3: 2003,
  AUTH_WPA2_WPA3: 2004,
  AUTH_RADIUS: 2005
};

/**
 * @return {proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.AuthCase}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthCase = function() {
  return /** @type {proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.AuthCase} */(jspb.Message.computeOneofCase(this, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.toObject = function(includeInstance, msg) {
  var f, obj = {
bssid: jspb.Message.getFieldWithDefault(msg, 1003, ""),
ssid: jspb.Message.getFieldWithDefault(msg, 1005, ""),
authOpen: (f = msg.getAuthOpen()) && proto.SpaceX.API.Device.AuthOpen.toObject(includeInstance, f),
authWpa2: (f = msg.getAuthWpa2()) && proto.SpaceX.API.Device.AuthWpa2.toObject(includeInstance, f),
authWpa3: (f = msg.getAuthWpa3()) && proto.SpaceX.API.Device.AuthWpa3.toObject(includeInstance, f),
authWpa2Wpa3: (f = msg.getAuthWpa2Wpa3()) && proto.SpaceX.API.Device.AuthWpa2Wpa3.toObject(includeInstance, f),
authRadius: (f = msg.getAuthRadius()) && proto.SpaceX.API.Device.AuthRadius.toObject(includeInstance, f),
band: jspb.Message.getFieldWithDefault(msg, 1011, 0),
ifaceName: jspb.Message.getFieldWithDefault(msg, 1017, ""),
disable: jspb.Message.getBooleanFieldWithDefault(msg, 1013, false),
hidden: jspb.Message.getBooleanFieldWithDefault(msg, 1015, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.WifiConfig.BasicServiceSet;
  return proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1003:
      var value = /** @type {string} */ (reader.readString());
      msg.setBssid(value);
      break;
    case 1005:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 2001:
      var value = new proto.SpaceX.API.Device.AuthOpen;
      reader.readMessage(value,proto.SpaceX.API.Device.AuthOpen.deserializeBinaryFromReader);
      msg.setAuthOpen(value);
      break;
    case 2002:
      var value = new proto.SpaceX.API.Device.AuthWpa2;
      reader.readMessage(value,proto.SpaceX.API.Device.AuthWpa2.deserializeBinaryFromReader);
      msg.setAuthWpa2(value);
      break;
    case 2003:
      var value = new proto.SpaceX.API.Device.AuthWpa3;
      reader.readMessage(value,proto.SpaceX.API.Device.AuthWpa3.deserializeBinaryFromReader);
      msg.setAuthWpa3(value);
      break;
    case 2004:
      var value = new proto.SpaceX.API.Device.AuthWpa2Wpa3;
      reader.readMessage(value,proto.SpaceX.API.Device.AuthWpa2Wpa3.deserializeBinaryFromReader);
      msg.setAuthWpa2Wpa3(value);
      break;
    case 2005:
      var value = new proto.SpaceX.API.Device.AuthRadius;
      reader.readMessage(value,proto.SpaceX.API.Device.AuthRadius.deserializeBinaryFromReader);
      msg.setAuthRadius(value);
      break;
    case 1011:
      var value = /** @type {!proto.SpaceX.API.Device.WifiConfig.Band} */ (reader.readEnum());
      msg.setBand(value);
      break;
    case 1017:
      var value = /** @type {string} */ (reader.readString());
      msg.setIfaceName(value);
      break;
    case 1013:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisable(value);
      break;
    case 1015:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBssid();
  if (f.length > 0) {
    writer.writeString(
      1003,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      1005,
      f
    );
  }
  f = message.getAuthOpen();
  if (f != null) {
    writer.writeMessage(
      2001,
      f,
      proto.SpaceX.API.Device.AuthOpen.serializeBinaryToWriter
    );
  }
  f = message.getAuthWpa2();
  if (f != null) {
    writer.writeMessage(
      2002,
      f,
      proto.SpaceX.API.Device.AuthWpa2.serializeBinaryToWriter
    );
  }
  f = message.getAuthWpa3();
  if (f != null) {
    writer.writeMessage(
      2003,
      f,
      proto.SpaceX.API.Device.AuthWpa3.serializeBinaryToWriter
    );
  }
  f = message.getAuthWpa2Wpa3();
  if (f != null) {
    writer.writeMessage(
      2004,
      f,
      proto.SpaceX.API.Device.AuthWpa2Wpa3.serializeBinaryToWriter
    );
  }
  f = message.getAuthRadius();
  if (f != null) {
    writer.writeMessage(
      2005,
      f,
      proto.SpaceX.API.Device.AuthRadius.serializeBinaryToWriter
    );
  }
  f = message.getBand();
  if (f !== 0.0) {
    writer.writeEnum(
      1011,
      f
    );
  }
  f = message.getIfaceName();
  if (f.length > 0) {
    writer.writeString(
      1017,
      f
    );
  }
  f = message.getDisable();
  if (f) {
    writer.writeBool(
      1013,
      f
    );
  }
  f = message.getHidden();
  if (f) {
    writer.writeBool(
      1015,
      f
    );
  }
};


/**
 * optional string bssid = 1003;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1003, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setBssid = function(value) {
  return jspb.Message.setProto3StringField(this, 1003, value);
};


/**
 * optional string ssid = 1005;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1005, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 1005, value);
};


/**
 * optional AuthOpen auth_open = 2001;
 * @return {?proto.SpaceX.API.Device.AuthOpen}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthOpen = function() {
  return /** @type{?proto.SpaceX.API.Device.AuthOpen} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AuthOpen, 2001));
};


/**
 * @param {?proto.SpaceX.API.Device.AuthOpen|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
*/
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setAuthOpen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2001, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.clearAuthOpen = function() {
  return this.setAuthOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.hasAuthOpen = function() {
  return jspb.Message.getField(this, 2001) != null;
};


/**
 * optional AuthWpa2 auth_wpa2 = 2002;
 * @return {?proto.SpaceX.API.Device.AuthWpa2}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthWpa2 = function() {
  return /** @type{?proto.SpaceX.API.Device.AuthWpa2} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AuthWpa2, 2002));
};


/**
 * @param {?proto.SpaceX.API.Device.AuthWpa2|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
*/
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setAuthWpa2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2002, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.clearAuthWpa2 = function() {
  return this.setAuthWpa2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.hasAuthWpa2 = function() {
  return jspb.Message.getField(this, 2002) != null;
};


/**
 * optional AuthWpa3 auth_wpa3 = 2003;
 * @return {?proto.SpaceX.API.Device.AuthWpa3}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthWpa3 = function() {
  return /** @type{?proto.SpaceX.API.Device.AuthWpa3} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AuthWpa3, 2003));
};


/**
 * @param {?proto.SpaceX.API.Device.AuthWpa3|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
*/
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setAuthWpa3 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2003, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.clearAuthWpa3 = function() {
  return this.setAuthWpa3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.hasAuthWpa3 = function() {
  return jspb.Message.getField(this, 2003) != null;
};


/**
 * optional AuthWpa2Wpa3 auth_wpa2_wpa3 = 2004;
 * @return {?proto.SpaceX.API.Device.AuthWpa2Wpa3}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthWpa2Wpa3 = function() {
  return /** @type{?proto.SpaceX.API.Device.AuthWpa2Wpa3} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AuthWpa2Wpa3, 2004));
};


/**
 * @param {?proto.SpaceX.API.Device.AuthWpa2Wpa3|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
*/
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setAuthWpa2Wpa3 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2004, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.clearAuthWpa2Wpa3 = function() {
  return this.setAuthWpa2Wpa3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.hasAuthWpa2Wpa3 = function() {
  return jspb.Message.getField(this, 2004) != null;
};


/**
 * optional AuthRadius auth_radius = 2005;
 * @return {?proto.SpaceX.API.Device.AuthRadius}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getAuthRadius = function() {
  return /** @type{?proto.SpaceX.API.Device.AuthRadius} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AuthRadius, 2005));
};


/**
 * @param {?proto.SpaceX.API.Device.AuthRadius|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
*/
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setAuthRadius = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2005, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.clearAuthRadius = function() {
  return this.setAuthRadius(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.hasAuthRadius = function() {
  return jspb.Message.getField(this, 2005) != null;
};


/**
 * optional Band band = 1011;
 * @return {!proto.SpaceX.API.Device.WifiConfig.Band}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getBand = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.Band} */ (jspb.Message.getFieldWithDefault(this, 1011, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.Band} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setBand = function(value) {
  return jspb.Message.setProto3EnumField(this, 1011, value);
};


/**
 * optional string iface_name = 1017;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getIfaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1017, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setIfaceName = function(value) {
  return jspb.Message.setProto3StringField(this, 1017, value);
};


/**
 * optional bool disable = 1013;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getDisable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1013, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setDisable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1013, value);
};


/**
 * optional bool hidden = 1015;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1015, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet} returns this
 */
proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.prototype.setHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1015, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SpaceX.API.Device.WifiConfig.Network.repeatedFields_ = [1007];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.SpaceX.API.Device.WifiConfig.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SpaceX.API.Device.WifiConfig.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
ipv4: jspb.Message.getFieldWithDefault(msg, 1003, ""),
dhcpv4Start: jspb.Message.getFieldWithDefault(msg, 1012, 0),
dhcpDisabled: jspb.Message.getBooleanFieldWithDefault(msg, 1015, false),
dhcpv4LeaseDurationS: jspb.Message.getFieldWithDefault(msg, 1016, 0),
domain: jspb.Message.getFieldWithDefault(msg, 1011, ""),
basicServiceSetsList: jspb.Message.toObjectList(msg.getBasicServiceSetsList(),
    proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.toObject, includeInstance),
clientIsolation: jspb.Message.getBooleanFieldWithDefault(msg, 1008, false),
guest: jspb.Message.getBooleanFieldWithDefault(msg, 1009, false),
landing: jspb.Message.getFieldWithDefault(msg, 1010, ""),
landingPageV2: jspb.Message.getBooleanFieldWithDefault(msg, 1017, false),
internal: jspb.Message.getBooleanFieldWithDefault(msg, 1013, false),
vlan: jspb.Message.getFieldWithDefault(msg, 1014, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network}
 */
proto.SpaceX.API.Device.WifiConfig.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SpaceX.API.Device.WifiConfig.Network;
  return proto.SpaceX.API.Device.WifiConfig.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SpaceX.API.Device.WifiConfig.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network}
 */
proto.SpaceX.API.Device.WifiConfig.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1003:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4(value);
      break;
    case 1012:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDhcpv4Start(value);
      break;
    case 1015:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDhcpDisabled(value);
      break;
    case 1016:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDhcpv4LeaseDurationS(value);
      break;
    case 1011:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 1007:
      var value = new proto.SpaceX.API.Device.WifiConfig.BasicServiceSet;
      reader.readMessage(value,proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.deserializeBinaryFromReader);
      msg.addBasicServiceSets(value);
      break;
    case 1008:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClientIsolation(value);
      break;
    case 1009:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGuest(value);
      break;
    case 1010:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanding(value);
      break;
    case 1017:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLandingPageV2(value);
      break;
    case 1013:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInternal(value);
      break;
    case 1014:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SpaceX.API.Device.WifiConfig.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SpaceX.API.Device.WifiConfig.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SpaceX.API.Device.WifiConfig.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpv4();
  if (f.length > 0) {
    writer.writeString(
      1003,
      f
    );
  }
  f = message.getDhcpv4Start();
  if (f !== 0) {
    writer.writeUint32(
      1012,
      f
    );
  }
  f = message.getDhcpDisabled();
  if (f) {
    writer.writeBool(
      1015,
      f
    );
  }
  f = message.getDhcpv4LeaseDurationS();
  if (f !== 0) {
    writer.writeUint32(
      1016,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      1011,
      f
    );
  }
  f = message.getBasicServiceSetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1007,
      f,
      proto.SpaceX.API.Device.WifiConfig.BasicServiceSet.serializeBinaryToWriter
    );
  }
  f = message.getClientIsolation();
  if (f) {
    writer.writeBool(
      1008,
      f
    );
  }
  f = message.getGuest();
  if (f) {
    writer.writeBool(
      1009,
      f
    );
  }
  f = message.getLanding();
  if (f.length > 0) {
    writer.writeString(
      1010,
      f
    );
  }
  f = message.getLandingPageV2();
  if (f) {
    writer.writeBool(
      1017,
      f
    );
  }
  f = message.getInternal();
  if (f) {
    writer.writeBool(
      1013,
      f
    );
  }
  f = message.getVlan();
  if (f !== 0) {
    writer.writeUint32(
      1014,
      f
    );
  }
};


/**
 * optional string ipv4 = 1003;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getIpv4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1003, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setIpv4 = function(value) {
  return jspb.Message.setProto3StringField(this, 1003, value);
};


/**
 * optional uint32 dhcpv4_start = 1012;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getDhcpv4Start = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1012, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setDhcpv4Start = function(value) {
  return jspb.Message.setProto3IntField(this, 1012, value);
};


/**
 * optional bool dhcp_disabled = 1015;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getDhcpDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1015, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setDhcpDisabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1015, value);
};


/**
 * optional uint32 dhcpv4_lease_duration_s = 1016;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getDhcpv4LeaseDurationS = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1016, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setDhcpv4LeaseDurationS = function(value) {
  return jspb.Message.setProto3IntField(this, 1016, value);
};


/**
 * optional string domain = 1011;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1011, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 1011, value);
};


/**
 * repeated BasicServiceSet basic_service_sets = 1007;
 * @return {!Array<!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet>}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getBasicServiceSetsList = function() {
  return /** @type{!Array<!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet, 1007));
};


/**
 * @param {!Array<!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
*/
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setBasicServiceSetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1007, value);
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.WifiConfig.BasicServiceSet}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.addBasicServiceSets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1007, opt_value, proto.SpaceX.API.Device.WifiConfig.BasicServiceSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.clearBasicServiceSetsList = function() {
  return this.setBasicServiceSetsList([]);
};


/**
 * optional bool client_isolation = 1008;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getClientIsolation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1008, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setClientIsolation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1008, value);
};


/**
 * optional bool guest = 1009;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getGuest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1009, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setGuest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1009, value);
};


/**
 * optional string landing = 1010;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getLanding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1010, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setLanding = function(value) {
  return jspb.Message.setProto3StringField(this, 1010, value);
};


/**
 * optional bool landing_page_v2 = 1017;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getLandingPageV2 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1017, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setLandingPageV2 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1017, value);
};


/**
 * optional bool internal = 1013;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getInternal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1013, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setInternal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1013, value);
};


/**
 * optional uint32 vlan = 1014;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.getVlan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1014, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network} returns this
 */
proto.SpaceX.API.Device.WifiConfig.Network.prototype.setVlan = function(value) {
  return jspb.Message.setProto3IntField(this, 1014, value);
};


/**
 * optional string country_code = 3;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setCountryCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool apply_country_code = 1085;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyCountryCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1085, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyCountryCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1085, value);
};


/**
 * optional bool pin_country_code = 53;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getPinCountryCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 53, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setPinCountryCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 53, value);
};


/**
 * optional bool apply_pin_country_code = 1086;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyPinCountryCode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1086, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyPinCountryCode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1086, value);
};


/**
 * optional bool custom_power_table = 54;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getCustomPowerTable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 54, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setCustomPowerTable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 54, value);
};


/**
 * optional bool apply_custom_power_table = 1087;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyCustomPowerTable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1087, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyCustomPowerTable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1087, value);
};


/**
 * optional bool setup_complete = 7;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getSetupComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setSetupComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool apply_setup_complete = 1010;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplySetupComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1010, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplySetupComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1010, value);
};


/**
 * optional uint32 version = 9;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string mac_wan = 12;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getMacWan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setMacWan = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string mac_lan = 13;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getMacLan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setMacLan = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint32 channel_2ghz = 19;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getChannel2ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setChannel2ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional bool apply_channel_2ghz = 1013;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyChannel2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1013, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyChannel2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1013, value);
};


/**
 * optional uint32 channel_5ghz = 20;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getChannel5ghz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setChannel5ghz = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool apply_channel_5ghz = 1014;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyChannel5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1014, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyChannel5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1014, value);
};


/**
 * optional uint32 channel_5ghz_high = 57;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getChannel5ghzHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 57, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setChannel5ghzHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 57, value);
};


/**
 * optional bool apply_channel_5ghz_high = 1016;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyChannel5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1016, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyChannel5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1016, value);
};


/**
 * map<string, MeshConfig> mesh_configs = 33;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.SpaceX.API.Device.MeshConfig>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getMeshConfigsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.SpaceX.API.Device.MeshConfig>} */ (
      jspb.Message.getMapField(this, 33, opt_noLazyCreate,
      proto.SpaceX.API.Device.MeshConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearMeshConfigsMap = function() {
  this.getMeshConfigsMap().clear();
  return this;
};


/**
 * map<string, MeshConfig> mesh_configs_updates = 3033;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.SpaceX.API.Device.MeshConfig>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getMeshConfigsUpdatesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.SpaceX.API.Device.MeshConfig>} */ (
      jspb.Message.getMapField(this, 3033, opt_noLazyCreate,
      proto.SpaceX.API.Device.MeshConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearMeshConfigsUpdatesMap = function() {
  this.getMeshConfigsUpdatesMap().clear();
  return this;
};


/**
 * optional bool apply_mesh_configs = 1033;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyMeshConfigs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1033, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyMeshConfigs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1033, value);
};


/**
 * repeated PublicKey dynamic_keys = 22;
 * @return {!Array<!proto.SpaceX.API.Device.PublicKey>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDynamicKeysList = function() {
  return /** @type{!Array<!proto.SpaceX.API.Device.PublicKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpaceX.API.Device.PublicKey, 22));
};


/**
 * @param {!Array<!proto.SpaceX.API.Device.PublicKey>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setDynamicKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.SpaceX.API.Device.PublicKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.PublicKey}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.addDynamicKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.SpaceX.API.Device.PublicKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearDynamicKeysList = function() {
  return this.setDynamicKeysList([]);
};


/**
 * optional bool apply_dynamic_keys = 39;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDynamicKeys = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 39, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDynamicKeys = function(value) {
  return jspb.Message.setProto3BooleanField(this, 39, value);
};


/**
 * optional bool is_repeater = 23;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getIsRepeater = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setIsRepeater = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};


/**
 * optional bool apply_is_repeater = 1031;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyIsRepeater = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1031, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyIsRepeater = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1031, value);
};


/**
 * optional bool ap_mode = 51;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 51, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 51, value);
};


/**
 * optional bool apply_ap_mode = 1066;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyApMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1066, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyApMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1066, value);
};


/**
 * optional bool is_aviation = 49;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getIsAviation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 49, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setIsAviation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 49, value);
};


/**
 * optional bool apply_is_aviation = 1064;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyIsAviation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1064, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyIsAviation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1064, value);
};


/**
 * optional int32 boot_count = 26;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getBootCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setBootCount = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional BootInfo boot = 3001;
 * @return {?proto.SpaceX.API.Device.BootInfo}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getBoot = function() {
  return /** @type{?proto.SpaceX.API.Device.BootInfo} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.BootInfo, 3001));
};


/**
 * @param {?proto.SpaceX.API.Device.BootInfo|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setBoot = function(value) {
  return jspb.Message.setWrapperField(this, 3001, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearBoot = function() {
  return this.setBoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.hasBoot = function() {
  return jspb.Message.getField(this, 3001) != null;
};


/**
 * repeated string nameservers = 30;
 * @return {!Array<string>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getNameserversList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 30));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setNameserversList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.addNameservers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearNameserversList = function() {
  return this.setNameserversList([]);
};


/**
 * optional bool apply_nameservers = 1054;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyNameservers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1054, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyNameservers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1054, value);
};


/**
 * optional bool secure_dns = 50;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getSecureDns = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 50, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setSecureDns = function(value) {
  return jspb.Message.setProto3BooleanField(this, 50, value);
};


/**
 * optional bool apply_secure_dns = 1065;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplySecureDns = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1065, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplySecureDns = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1065, value);
};


/**
 * optional bool bypass_mode = 31;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getBypassMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 31, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setBypassMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional bool apply_bypass_mode = 1055;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyBypassMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1055, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyBypassMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1055, value);
};


/**
 * optional bool dfs_enabled = 42;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDfsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 42, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDfsEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 42, value);
};


/**
 * optional bool apply_dfs_enabled = 1058;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDfsEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1058, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDfsEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1058, value);
};


/**
 * optional bool disable_mesh_onboarding = 52;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisableMeshOnboarding = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 52, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisableMeshOnboarding = function(value) {
  return jspb.Message.setProto3BooleanField(this, 52, value);
};


/**
 * optional bool apply_disable_mesh_onboarding = 1067;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisableMeshOnboarding = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1067, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisableMeshOnboarding = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1067, value);
};


/**
 * repeated Network networks = 1100;
 * @return {!Array<!proto.SpaceX.API.Device.WifiConfig.Network>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getNetworksList = function() {
  return /** @type{!Array<!proto.SpaceX.API.Device.WifiConfig.Network>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpaceX.API.Device.WifiConfig.Network, 1100));
};


/**
 * @param {!Array<!proto.SpaceX.API.Device.WifiConfig.Network>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setNetworksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1100, value);
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.Network=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.WifiConfig.Network}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.addNetworks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1100, opt_value, proto.SpaceX.API.Device.WifiConfig.Network, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearNetworksList = function() {
  return this.setNetworksList([]);
};


/**
 * optional bool apply_networks = 1101;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyNetworks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1101, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyNetworks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1101, value);
};


/**
 * optional uint64 incarnation = 43;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getIncarnation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setIncarnation = function(value) {
  return jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional WirelessMode wireless_mode_2ghz = 44;
 * @return {!proto.SpaceX.API.Device.WifiConfig.WirelessMode}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWirelessMode2ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setWirelessMode2ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 44, value);
};


/**
 * optional bool apply_wireless_mode_2ghz = 1059;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyWirelessMode2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1059, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyWirelessMode2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1059, value);
};


/**
 * optional WirelessMode wireless_mode_5ghz = 45;
 * @return {!proto.SpaceX.API.Device.WifiConfig.WirelessMode}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWirelessMode5ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (jspb.Message.getFieldWithDefault(this, 45, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setWirelessMode5ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 45, value);
};


/**
 * optional bool apply_wireless_mode_5ghz = 1060;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyWirelessMode5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1060, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyWirelessMode5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1060, value);
};


/**
 * optional WirelessMode wireless_mode_5ghz_high = 58;
 * @return {!proto.SpaceX.API.Device.WifiConfig.WirelessMode}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWirelessMode5ghzHigh = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.WirelessMode} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setWirelessMode5ghzHigh = function(value) {
  return jspb.Message.setProto3EnumField(this, 58, value);
};


/**
 * optional bool apply_wireless_mode_5ghz_high = 1070;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyWirelessMode5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1070, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyWirelessMode5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1070, value);
};


/**
 * optional HTBandwidth ht_bandwidth_2ghz = 46;
 * @return {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getHtBandwidth2ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setHtBandwidth2ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 46, value);
};


/**
 * optional bool apply_ht_bandwidth_2ghz = 1061;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyHtBandwidth2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1061, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyHtBandwidth2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1061, value);
};


/**
 * optional HTBandwidth ht_bandwidth_5ghz = 47;
 * @return {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getHtBandwidth5ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (jspb.Message.getFieldWithDefault(this, 47, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setHtBandwidth5ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 47, value);
};


/**
 * optional bool apply_ht_bandwidth_5ghz = 1062;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyHtBandwidth5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1062, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyHtBandwidth5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1062, value);
};


/**
 * optional HTBandwidth ht_bandwidth_5ghz_high = 59;
 * @return {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getHtBandwidth5ghzHigh = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} */ (jspb.Message.getFieldWithDefault(this, 59, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.HTBandwidth} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setHtBandwidth5ghzHigh = function(value) {
  return jspb.Message.setProto3EnumField(this, 59, value);
};


/**
 * optional bool apply_ht_bandwidth_5ghz_high = 1071;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyHtBandwidth5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1071, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyHtBandwidth5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1071, value);
};


/**
 * optional VHTBandwidth vht_bandwidth = 48;
 * @return {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getVhtBandwidth = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} */ (jspb.Message.getFieldWithDefault(this, 48, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setVhtBandwidth = function(value) {
  return jspb.Message.setProto3EnumField(this, 48, value);
};


/**
 * optional bool apply_vht_bandwidth = 1063;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyVhtBandwidth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1063, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyVhtBandwidth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1063, value);
};


/**
 * optional VHTBandwidth vht_bandwidth_5ghz_high = 60;
 * @return {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getVhtBandwidth5ghzHigh = function() {
  return /** @type {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.WifiConfig.VHTBandwidth} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setVhtBandwidth5ghzHigh = function(value) {
  return jspb.Message.setProto3EnumField(this, 60, value);
};


/**
 * optional bool apply_vht_bandwidth_5ghz_high = 1072;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyVhtBandwidth5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1072, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyVhtBandwidth5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1072, value);
};


/**
 * optional bool use_public_services = 55;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getUsePublicServices = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 55, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setUsePublicServices = function(value) {
  return jspb.Message.setProto3BooleanField(this, 55, value);
};


/**
 * optional bool apply_use_public_services = 1068;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyUsePublicServices = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1068, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyUsePublicServices = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1068, value);
};


/**
 * optional bool disable_automated_speedtests = 56;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisableAutomatedSpeedtests = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 56, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisableAutomatedSpeedtests = function(value) {
  return jspb.Message.setProto3BooleanField(this, 56, value);
};


/**
 * optional bool apply_disable_automated_speedtests = 1069;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisableAutomatedSpeedtests = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1069, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisableAutomatedSpeedtests = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1069, value);
};


/**
 * optional bool enable_umbilical_vlan = 61;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getEnableUmbilicalVlan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 61, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setEnableUmbilicalVlan = function(value) {
  return jspb.Message.setProto3BooleanField(this, 61, value);
};


/**
 * optional bool apply_enable_umbilical_vlan = 1073;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyEnableUmbilicalVlan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1073, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyEnableUmbilicalVlan = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1073, value);
};


/**
 * repeated ClientName client_names = 62;
 * @return {!Array<!proto.SpaceX.API.Device.ClientName>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientNamesList = function() {
  return /** @type{!Array<!proto.SpaceX.API.Device.ClientName>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpaceX.API.Device.ClientName, 62));
};


/**
 * @param {!Array<!proto.SpaceX.API.Device.ClientName>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setClientNamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 62, value);
};


/**
 * @param {!proto.SpaceX.API.Device.ClientName=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.ClientName}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.addClientNames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 62, opt_value, proto.SpaceX.API.Device.ClientName, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearClientNamesList = function() {
  return this.setClientNamesList([]);
};


/**
 * optional bool apply_client_names = 1074;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyClientNames = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1074, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyClientNames = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1074, value);
};


/**
 * optional bool outdoor_mode = 63;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getOutdoorMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 63, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setOutdoorMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 63, value);
};


/**
 * optional bool apply_outdoor_mode = 1075;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyOutdoorMode = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1075, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyOutdoorMode = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1075, value);
};


/**
 * optional bool disable_2ghz = 64;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisable2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 64, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisable2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 64, value);
};


/**
 * optional bool apply_disable_2ghz = 1076;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisable2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1076, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisable2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1076, value);
};


/**
 * optional bool disable_5ghz = 65;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisable5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 65, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisable5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 65, value);
};


/**
 * optional bool apply_disable_5ghz = 1077;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisable5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1077, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisable5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1077, value);
};


/**
 * optional bool disable_5ghz_high = 66;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisable5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 66, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisable5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 66, value);
};


/**
 * optional bool apply_disable_5ghz_high = 1078;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisable5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1078, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisable5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1078, value);
};


/**
 * optional bool disable_x_mesh_backhaul = 67;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisableXMeshBackhaul = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 67, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisableXMeshBackhaul = function(value) {
  return jspb.Message.setProto3BooleanField(this, 67, value);
};


/**
 * optional bool apply_disable_x_mesh_backhaul = 1079;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisableXMeshBackhaul = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1079, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisableXMeshBackhaul = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1079, value);
};


/**
 * optional string golden_bssid = 68;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getGoldenBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 68, ""));
};


/**
 * @param {string} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setGoldenBssid = function(value) {
  return jspb.Message.setProto3StringField(this, 68, value);
};


/**
 * optional bool apply_golden_bssid = 1080;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyGoldenBssid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1080, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyGoldenBssid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1080, value);
};


/**
 * optional IfaceType golden_iface_type = 69;
 * @return {!proto.SpaceX.API.Device.IfaceType}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getGoldenIfaceType = function() {
  return /** @type {!proto.SpaceX.API.Device.IfaceType} */ (jspb.Message.getFieldWithDefault(this, 69, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.IfaceType} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setGoldenIfaceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 69, value);
};


/**
 * optional bool apply_golden_iface_type = 1081;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyGoldenIfaceType = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1081, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyGoldenIfaceType = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1081, value);
};


/**
 * optional TxPowerLevel tx_power_level_2ghz = 70;
 * @return {!proto.SpaceX.API.Device.TxPowerLevel}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getTxPowerLevel2ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (jspb.Message.getFieldWithDefault(this, 70, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TxPowerLevel} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setTxPowerLevel2ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 70, value);
};


/**
 * optional bool apply_tx_power_level_2ghz = 1082;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyTxPowerLevel2ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1082, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyTxPowerLevel2ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1082, value);
};


/**
 * optional TxPowerLevel tx_power_level_5ghz = 71;
 * @return {!proto.SpaceX.API.Device.TxPowerLevel}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getTxPowerLevel5ghz = function() {
  return /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (jspb.Message.getFieldWithDefault(this, 71, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TxPowerLevel} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setTxPowerLevel5ghz = function(value) {
  return jspb.Message.setProto3EnumField(this, 71, value);
};


/**
 * optional bool apply_tx_power_level_5ghz = 1083;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyTxPowerLevel5ghz = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1083, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyTxPowerLevel5ghz = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1083, value);
};


/**
 * optional TxPowerLevel tx_power_level_5ghz_high = 72;
 * @return {!proto.SpaceX.API.Device.TxPowerLevel}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getTxPowerLevel5ghzHigh = function() {
  return /** @type {!proto.SpaceX.API.Device.TxPowerLevel} */ (jspb.Message.getFieldWithDefault(this, 72, 0));
};


/**
 * @param {!proto.SpaceX.API.Device.TxPowerLevel} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setTxPowerLevel5ghzHigh = function(value) {
  return jspb.Message.setProto3EnumField(this, 72, value);
};


/**
 * optional bool apply_tx_power_level_5ghz_high = 1084;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyTxPowerLevel5ghzHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1084, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyTxPowerLevel5ghzHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1084, value);
};


/**
 * optional bool disable_pending_update_reboot = 73;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisablePendingUpdateReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 73, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisablePendingUpdateReboot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 73, value);
};


/**
 * optional bool apply_disable_pending_update_reboot = 1088;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisablePendingUpdateReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1088, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisablePendingUpdateReboot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1088, value);
};


/**
 * repeated ClientConfig client_configs = 74;
 * @return {!Array<!proto.SpaceX.API.Device.ClientConfig>}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientConfigsList = function() {
  return /** @type{!Array<!proto.SpaceX.API.Device.ClientConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SpaceX.API.Device.ClientConfig, 74));
};


/**
 * @param {!Array<!proto.SpaceX.API.Device.ClientConfig>} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setClientConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 74, value);
};


/**
 * @param {!proto.SpaceX.API.Device.ClientConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SpaceX.API.Device.ClientConfig}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.addClientConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 74, opt_value, proto.SpaceX.API.Device.ClientConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearClientConfigsList = function() {
  return this.setClientConfigsList([]);
};


/**
 * optional bool apply_client_configs = 1089;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyClientConfigs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1089, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyClientConfigs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1089, value);
};


/**
 * optional bool disable_set_wifi_config_from_controller = 75;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDisableSetWifiConfigFromController = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 75, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDisableSetWifiConfigFromController = function(value) {
  return jspb.Message.setProto3BooleanField(this, 75, value);
};


/**
 * optional bool apply_disable_set_wifi_config_from_controller = 1090;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDisableSetWifiConfigFromController = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1090, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDisableSetWifiConfigFromController = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1090, value);
};


/**
 * optional bytes client_key = 76;
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 76, ""));
};


/**
 * optional bytes client_key = 76;
 * This is a type-conversion wrapper around `getClientKey()`
 * @return {string}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientKey()));
};


/**
 * optional bytes client_key = 76;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientKey()`
 * @return {!Uint8Array}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setClientKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 76, value);
};


/**
 * optional bool apply_client_key = 1091;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyClientKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1091, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyClientKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1091, value);
};


/**
 * optional NoTrafficControl wan_no_traffic_control = 4001;
 * @return {?proto.SpaceX.API.Device.NoTrafficControl}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWanNoTrafficControl = function() {
  return /** @type{?proto.SpaceX.API.Device.NoTrafficControl} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.NoTrafficControl, 4001));
};


/**
 * @param {?proto.SpaceX.API.Device.NoTrafficControl|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setWanNoTrafficControl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4001, proto.SpaceX.API.Device.WifiConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearWanNoTrafficControl = function() {
  return this.setWanNoTrafficControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.hasWanNoTrafficControl = function() {
  return jspb.Message.getField(this, 4001) != null;
};


/**
 * optional AckSuppression wan_ack_suppression = 4002;
 * @return {?proto.SpaceX.API.Device.AckSuppression}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWanAckSuppression = function() {
  return /** @type{?proto.SpaceX.API.Device.AckSuppression} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.AckSuppression, 4002));
};


/**
 * @param {?proto.SpaceX.API.Device.AckSuppression|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setWanAckSuppression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4002, proto.SpaceX.API.Device.WifiConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearWanAckSuppression = function() {
  return this.setWanAckSuppression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.hasWanAckSuppression = function() {
  return jspb.Message.getField(this, 4002) != null;
};


/**
 * optional CakeRateLimit wan_cake_rate_limit = 4003;
 * @return {?proto.SpaceX.API.Device.CakeRateLimit}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWanCakeRateLimit = function() {
  return /** @type{?proto.SpaceX.API.Device.CakeRateLimit} */ (
    jspb.Message.getWrapperField(this, proto.SpaceX.API.Device.CakeRateLimit, 4003));
};


/**
 * @param {?proto.SpaceX.API.Device.CakeRateLimit|undefined} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
*/
proto.SpaceX.API.Device.WifiConfig.prototype.setWanCakeRateLimit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4003, proto.SpaceX.API.Device.WifiConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.clearWanCakeRateLimit = function() {
  return this.setWanCakeRateLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.hasWanCakeRateLimit = function() {
  return jspb.Message.getField(this, 4003) != null;
};


/**
 * optional bool apply_wan_traffic_control = 1092;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyWanTrafficControl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1092, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyWanTrafficControl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1092, value);
};


/**
 * optional int32 wan_host_dscp_mark = 77;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getWanHostDscpMark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 77, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setWanHostDscpMark = function(value) {
  return jspb.Message.setProto3IntField(this, 77, value);
};


/**
 * optional bool apply_wan_host_dscp_mark = 1093;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyWanHostDscpMark = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1093, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyWanHostDscpMark = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1093, value);
};


/**
 * optional bool debug_pop_pings = 79;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getDebugPopPings = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 79, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setDebugPopPings = function(value) {
  return jspb.Message.setProto3BooleanField(this, 79, value);
};


/**
 * optional bool apply_debug_pop_pings = 1095;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyDebugPopPings = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1095, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyDebugPopPings = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1095, value);
};


/**
 * optional bool client_tester = 80;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getClientTester = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 80, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setClientTester = function(value) {
  return jspb.Message.setProto3BooleanField(this, 80, value);
};


/**
 * optional bool apply_client_tester = 1096;
 * @return {boolean}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getApplyClientTester = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1096, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setApplyClientTester = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1096, value);
};


/**
 * optional uint32 tag = 78;
 * @return {number}
 */
proto.SpaceX.API.Device.WifiConfig.prototype.getTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 78, 0));
};


/**
 * @param {number} value
 * @return {!proto.SpaceX.API.Device.WifiConfig} returns this
 */
proto.SpaceX.API.Device.WifiConfig.prototype.setTag = function(value) {
  return jspb.Message.setProto3IntField(this, 78, value);
};


