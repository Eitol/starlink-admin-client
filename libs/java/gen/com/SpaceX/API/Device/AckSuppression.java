// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_config.proto
// Protobuf Java Version: 4.28.3

package com.SpaceX.API.Device;

/**
 * Protobuf type {@code SpaceX.API.Device.AckSuppression}
 */
public final class AckSuppression extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:SpaceX.API.Device.AckSuppression)
    AckSuppressionOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      AckSuppression.class.getName());
  }
  // Use AckSuppression.newBuilder() to construct.
  private AckSuppression(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private AckSuppression() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_AckSuppression_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_AckSuppression_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.SpaceX.API.Device.AckSuppression.class, com.SpaceX.API.Device.AckSuppression.Builder.class);
  }

  public static final int ACK_MARK_FIELD_NUMBER = 1;
  private int ackMark_ = 0;
  /**
   * <code>uint32 ack_mark = 1 [json_name = "ackMark"];</code>
   * @return The ackMark.
   */
  @java.lang.Override
  public int getAckMark() {
    return ackMark_;
  }

  public static final int HTB_ACK_QUEUE_RATE_FIELD_NUMBER = 2;
  private float htbAckQueueRate_ = 0F;
  /**
   * <code>float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
   * @return The htbAckQueueRate.
   */
  @java.lang.Override
  public float getHtbAckQueueRate() {
    return htbAckQueueRate_;
  }

  public static final int HTB_ACK_QUEUE_CEIL_FIELD_NUMBER = 3;
  private float htbAckQueueCeil_ = 0F;
  /**
   * <code>float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
   * @return The htbAckQueueCeil.
   */
  @java.lang.Override
  public float getHtbAckQueueCeil() {
    return htbAckQueueCeil_;
  }

  public static final int CAKE_QUEUE_BANDWIDTH_FIELD_NUMBER = 4;
  private float cakeQueueBandwidth_ = 0F;
  /**
   * <code>float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
   * @return The cakeQueueBandwidth.
   */
  @java.lang.Override
  public float getCakeQueueBandwidth() {
    return cakeQueueBandwidth_;
  }

  public static final int CAKE_ACK_FILTER_AGGRESSIVE_FIELD_NUMBER = 5;
  private boolean cakeAckFilterAggressive_ = false;
  /**
   * <code>bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
   * @return The cakeAckFilterAggressive.
   */
  @java.lang.Override
  public boolean getCakeAckFilterAggressive() {
    return cakeAckFilterAggressive_;
  }

  public static final int CAKE_MANUAL_RTT_FIELD_NUMBER = 6;
  private float cakeManualRtt_ = 0F;
  /**
   * <code>float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
   * @return The cakeManualRtt.
   */
  @java.lang.Override
  public float getCakeManualRtt() {
    return cakeManualRtt_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (ackMark_ != 0) {
      output.writeUInt32(1, ackMark_);
    }
    if (java.lang.Float.floatToRawIntBits(htbAckQueueRate_) != 0) {
      output.writeFloat(2, htbAckQueueRate_);
    }
    if (java.lang.Float.floatToRawIntBits(htbAckQueueCeil_) != 0) {
      output.writeFloat(3, htbAckQueueCeil_);
    }
    if (java.lang.Float.floatToRawIntBits(cakeQueueBandwidth_) != 0) {
      output.writeFloat(4, cakeQueueBandwidth_);
    }
    if (cakeAckFilterAggressive_ != false) {
      output.writeBool(5, cakeAckFilterAggressive_);
    }
    if (java.lang.Float.floatToRawIntBits(cakeManualRtt_) != 0) {
      output.writeFloat(6, cakeManualRtt_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (ackMark_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, ackMark_);
    }
    if (java.lang.Float.floatToRawIntBits(htbAckQueueRate_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, htbAckQueueRate_);
    }
    if (java.lang.Float.floatToRawIntBits(htbAckQueueCeil_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, htbAckQueueCeil_);
    }
    if (java.lang.Float.floatToRawIntBits(cakeQueueBandwidth_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, cakeQueueBandwidth_);
    }
    if (cakeAckFilterAggressive_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, cakeAckFilterAggressive_);
    }
    if (java.lang.Float.floatToRawIntBits(cakeManualRtt_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, cakeManualRtt_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.SpaceX.API.Device.AckSuppression)) {
      return super.equals(obj);
    }
    com.SpaceX.API.Device.AckSuppression other = (com.SpaceX.API.Device.AckSuppression) obj;

    if (getAckMark()
        != other.getAckMark()) return false;
    if (java.lang.Float.floatToIntBits(getHtbAckQueueRate())
        != java.lang.Float.floatToIntBits(
            other.getHtbAckQueueRate())) return false;
    if (java.lang.Float.floatToIntBits(getHtbAckQueueCeil())
        != java.lang.Float.floatToIntBits(
            other.getHtbAckQueueCeil())) return false;
    if (java.lang.Float.floatToIntBits(getCakeQueueBandwidth())
        != java.lang.Float.floatToIntBits(
            other.getCakeQueueBandwidth())) return false;
    if (getCakeAckFilterAggressive()
        != other.getCakeAckFilterAggressive()) return false;
    if (java.lang.Float.floatToIntBits(getCakeManualRtt())
        != java.lang.Float.floatToIntBits(
            other.getCakeManualRtt())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ACK_MARK_FIELD_NUMBER;
    hash = (53 * hash) + getAckMark();
    hash = (37 * hash) + HTB_ACK_QUEUE_RATE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getHtbAckQueueRate());
    hash = (37 * hash) + HTB_ACK_QUEUE_CEIL_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getHtbAckQueueCeil());
    hash = (37 * hash) + CAKE_QUEUE_BANDWIDTH_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getCakeQueueBandwidth());
    hash = (37 * hash) + CAKE_ACK_FILTER_AGGRESSIVE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getCakeAckFilterAggressive());
    hash = (37 * hash) + CAKE_MANUAL_RTT_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getCakeManualRtt());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.SpaceX.API.Device.AckSuppression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.SpaceX.API.Device.AckSuppression parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.SpaceX.API.Device.AckSuppression parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.SpaceX.API.Device.AckSuppression prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code SpaceX.API.Device.AckSuppression}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:SpaceX.API.Device.AckSuppression)
      com.SpaceX.API.Device.AckSuppressionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_AckSuppression_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_AckSuppression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.SpaceX.API.Device.AckSuppression.class, com.SpaceX.API.Device.AckSuppression.Builder.class);
    }

    // Construct using com.SpaceX.API.Device.AckSuppression.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      ackMark_ = 0;
      htbAckQueueRate_ = 0F;
      htbAckQueueCeil_ = 0F;
      cakeQueueBandwidth_ = 0F;
      cakeAckFilterAggressive_ = false;
      cakeManualRtt_ = 0F;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_AckSuppression_descriptor;
    }

    @java.lang.Override
    public com.SpaceX.API.Device.AckSuppression getDefaultInstanceForType() {
      return com.SpaceX.API.Device.AckSuppression.getDefaultInstance();
    }

    @java.lang.Override
    public com.SpaceX.API.Device.AckSuppression build() {
      com.SpaceX.API.Device.AckSuppression result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.SpaceX.API.Device.AckSuppression buildPartial() {
      com.SpaceX.API.Device.AckSuppression result = new com.SpaceX.API.Device.AckSuppression(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.SpaceX.API.Device.AckSuppression result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.ackMark_ = ackMark_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.htbAckQueueRate_ = htbAckQueueRate_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.htbAckQueueCeil_ = htbAckQueueCeil_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.cakeQueueBandwidth_ = cakeQueueBandwidth_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.cakeAckFilterAggressive_ = cakeAckFilterAggressive_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.cakeManualRtt_ = cakeManualRtt_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.SpaceX.API.Device.AckSuppression) {
        return mergeFrom((com.SpaceX.API.Device.AckSuppression)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.SpaceX.API.Device.AckSuppression other) {
      if (other == com.SpaceX.API.Device.AckSuppression.getDefaultInstance()) return this;
      if (other.getAckMark() != 0) {
        setAckMark(other.getAckMark());
      }
      if (other.getHtbAckQueueRate() != 0F) {
        setHtbAckQueueRate(other.getHtbAckQueueRate());
      }
      if (other.getHtbAckQueueCeil() != 0F) {
        setHtbAckQueueCeil(other.getHtbAckQueueCeil());
      }
      if (other.getCakeQueueBandwidth() != 0F) {
        setCakeQueueBandwidth(other.getCakeQueueBandwidth());
      }
      if (other.getCakeAckFilterAggressive() != false) {
        setCakeAckFilterAggressive(other.getCakeAckFilterAggressive());
      }
      if (other.getCakeManualRtt() != 0F) {
        setCakeManualRtt(other.getCakeManualRtt());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              ackMark_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 21: {
              htbAckQueueRate_ = input.readFloat();
              bitField0_ |= 0x00000002;
              break;
            } // case 21
            case 29: {
              htbAckQueueCeil_ = input.readFloat();
              bitField0_ |= 0x00000004;
              break;
            } // case 29
            case 37: {
              cakeQueueBandwidth_ = input.readFloat();
              bitField0_ |= 0x00000008;
              break;
            } // case 37
            case 40: {
              cakeAckFilterAggressive_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 53: {
              cakeManualRtt_ = input.readFloat();
              bitField0_ |= 0x00000020;
              break;
            } // case 53
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int ackMark_ ;
    /**
     * <code>uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     * @return The ackMark.
     */
    @java.lang.Override
    public int getAckMark() {
      return ackMark_;
    }
    /**
     * <code>uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     * @param value The ackMark to set.
     * @return This builder for chaining.
     */
    public Builder setAckMark(int value) {

      ackMark_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 ack_mark = 1 [json_name = "ackMark"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAckMark() {
      bitField0_ = (bitField0_ & ~0x00000001);
      ackMark_ = 0;
      onChanged();
      return this;
    }

    private float htbAckQueueRate_ ;
    /**
     * <code>float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     * @return The htbAckQueueRate.
     */
    @java.lang.Override
    public float getHtbAckQueueRate() {
      return htbAckQueueRate_;
    }
    /**
     * <code>float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     * @param value The htbAckQueueRate to set.
     * @return This builder for chaining.
     */
    public Builder setHtbAckQueueRate(float value) {

      htbAckQueueRate_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHtbAckQueueRate() {
      bitField0_ = (bitField0_ & ~0x00000002);
      htbAckQueueRate_ = 0F;
      onChanged();
      return this;
    }

    private float htbAckQueueCeil_ ;
    /**
     * <code>float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     * @return The htbAckQueueCeil.
     */
    @java.lang.Override
    public float getHtbAckQueueCeil() {
      return htbAckQueueCeil_;
    }
    /**
     * <code>float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     * @param value The htbAckQueueCeil to set.
     * @return This builder for chaining.
     */
    public Builder setHtbAckQueueCeil(float value) {

      htbAckQueueCeil_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHtbAckQueueCeil() {
      bitField0_ = (bitField0_ & ~0x00000004);
      htbAckQueueCeil_ = 0F;
      onChanged();
      return this;
    }

    private float cakeQueueBandwidth_ ;
    /**
     * <code>float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     * @return The cakeQueueBandwidth.
     */
    @java.lang.Override
    public float getCakeQueueBandwidth() {
      return cakeQueueBandwidth_;
    }
    /**
     * <code>float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     * @param value The cakeQueueBandwidth to set.
     * @return This builder for chaining.
     */
    public Builder setCakeQueueBandwidth(float value) {

      cakeQueueBandwidth_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCakeQueueBandwidth() {
      bitField0_ = (bitField0_ & ~0x00000008);
      cakeQueueBandwidth_ = 0F;
      onChanged();
      return this;
    }

    private boolean cakeAckFilterAggressive_ ;
    /**
     * <code>bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     * @return The cakeAckFilterAggressive.
     */
    @java.lang.Override
    public boolean getCakeAckFilterAggressive() {
      return cakeAckFilterAggressive_;
    }
    /**
     * <code>bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     * @param value The cakeAckFilterAggressive to set.
     * @return This builder for chaining.
     */
    public Builder setCakeAckFilterAggressive(boolean value) {

      cakeAckFilterAggressive_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCakeAckFilterAggressive() {
      bitField0_ = (bitField0_ & ~0x00000010);
      cakeAckFilterAggressive_ = false;
      onChanged();
      return this;
    }

    private float cakeManualRtt_ ;
    /**
     * <code>float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     * @return The cakeManualRtt.
     */
    @java.lang.Override
    public float getCakeManualRtt() {
      return cakeManualRtt_;
    }
    /**
     * <code>float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     * @param value The cakeManualRtt to set.
     * @return This builder for chaining.
     */
    public Builder setCakeManualRtt(float value) {

      cakeManualRtt_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <code>float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCakeManualRtt() {
      bitField0_ = (bitField0_ & ~0x00000020);
      cakeManualRtt_ = 0F;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:SpaceX.API.Device.AckSuppression)
  }

  // @@protoc_insertion_point(class_scope:SpaceX.API.Device.AckSuppression)
  private static final com.SpaceX.API.Device.AckSuppression DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.SpaceX.API.Device.AckSuppression();
  }

  public static com.SpaceX.API.Device.AckSuppression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AckSuppression>
      PARSER = new com.google.protobuf.AbstractParser<AckSuppression>() {
    @java.lang.Override
    public AckSuppression parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AckSuppression> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AckSuppression> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.SpaceX.API.Device.AckSuppression getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

