// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_config.proto
// Protobuf Java Version: 4.28.3

package com.SpaceX.API.Device;

/**
 * Protobuf type {@code SpaceX.API.Device.CakeRateLimit}
 */
public final class CakeRateLimit extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:SpaceX.API.Device.CakeRateLimit)
    CakeRateLimitOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 3,
      /* suffix= */ "",
      CakeRateLimit.class.getName());
  }
  // Use CakeRateLimit.newBuilder() to construct.
  private CakeRateLimit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private CakeRateLimit() {
    priorityQueueParameter_ = 0;
    ackFilter_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_CakeRateLimit_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_CakeRateLimit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.SpaceX.API.Device.CakeRateLimit.class, com.SpaceX.API.Device.CakeRateLimit.Builder.class);
  }

  public static final int HOST_MARK_FIELD_NUMBER = 1;
  private int hostMark_ = 0;
  /**
   * <code>uint32 host_mark = 1 [json_name = "hostMark"];</code>
   * @return The hostMark.
   */
  @java.lang.Override
  public int getHostMark() {
    return hostMark_;
  }

  public static final int BANDWIDTH_FIELD_NUMBER = 2;
  private float bandwidth_ = 0F;
  /**
   * <code>float bandwidth = 2 [json_name = "bandwidth"];</code>
   * @return The bandwidth.
   */
  @java.lang.Override
  public float getBandwidth() {
    return bandwidth_;
  }

  public static final int PRIORITY_QUEUE_PARAMETER_FIELD_NUMBER = 3;
  private int priorityQueueParameter_ = 0;
  /**
   * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
   * @return The enum numeric value on the wire for priorityQueueParameter.
   */
  @java.lang.Override public int getPriorityQueueParameterValue() {
    return priorityQueueParameter_;
  }
  /**
   * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
   * @return The priorityQueueParameter.
   */
  @java.lang.Override public com.SpaceX.API.Device.CakePriorityQueueParameter getPriorityQueueParameter() {
    com.SpaceX.API.Device.CakePriorityQueueParameter result = com.SpaceX.API.Device.CakePriorityQueueParameter.forNumber(priorityQueueParameter_);
    return result == null ? com.SpaceX.API.Device.CakePriorityQueueParameter.UNRECOGNIZED : result;
  }

  public static final int ACK_FILTER_FIELD_NUMBER = 4;
  private int ackFilter_ = 0;
  /**
   * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
   * @return The enum numeric value on the wire for ackFilter.
   */
  @java.lang.Override public int getAckFilterValue() {
    return ackFilter_;
  }
  /**
   * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
   * @return The ackFilter.
   */
  @java.lang.Override public com.SpaceX.API.Device.CakeAckFilter getAckFilter() {
    com.SpaceX.API.Device.CakeAckFilter result = com.SpaceX.API.Device.CakeAckFilter.forNumber(ackFilter_);
    return result == null ? com.SpaceX.API.Device.CakeAckFilter.UNRECOGNIZED : result;
  }

  public static final int MANUAL_RTT_FIELD_NUMBER = 6;
  private float manualRtt_ = 0F;
  /**
   * <code>float manual_rtt = 6 [json_name = "manualRtt"];</code>
   * @return The manualRtt.
   */
  @java.lang.Override
  public float getManualRtt() {
    return manualRtt_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hostMark_ != 0) {
      output.writeUInt32(1, hostMark_);
    }
    if (java.lang.Float.floatToRawIntBits(bandwidth_) != 0) {
      output.writeFloat(2, bandwidth_);
    }
    if (priorityQueueParameter_ != com.SpaceX.API.Device.CakePriorityQueueParameter.DIFFSERV3.getNumber()) {
      output.writeEnum(3, priorityQueueParameter_);
    }
    if (ackFilter_ != com.SpaceX.API.Device.CakeAckFilter.NO_ACK_FILTER.getNumber()) {
      output.writeEnum(4, ackFilter_);
    }
    if (java.lang.Float.floatToRawIntBits(manualRtt_) != 0) {
      output.writeFloat(6, manualRtt_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (hostMark_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, hostMark_);
    }
    if (java.lang.Float.floatToRawIntBits(bandwidth_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, bandwidth_);
    }
    if (priorityQueueParameter_ != com.SpaceX.API.Device.CakePriorityQueueParameter.DIFFSERV3.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, priorityQueueParameter_);
    }
    if (ackFilter_ != com.SpaceX.API.Device.CakeAckFilter.NO_ACK_FILTER.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, ackFilter_);
    }
    if (java.lang.Float.floatToRawIntBits(manualRtt_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, manualRtt_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.SpaceX.API.Device.CakeRateLimit)) {
      return super.equals(obj);
    }
    com.SpaceX.API.Device.CakeRateLimit other = (com.SpaceX.API.Device.CakeRateLimit) obj;

    if (getHostMark()
        != other.getHostMark()) return false;
    if (java.lang.Float.floatToIntBits(getBandwidth())
        != java.lang.Float.floatToIntBits(
            other.getBandwidth())) return false;
    if (priorityQueueParameter_ != other.priorityQueueParameter_) return false;
    if (ackFilter_ != other.ackFilter_) return false;
    if (java.lang.Float.floatToIntBits(getManualRtt())
        != java.lang.Float.floatToIntBits(
            other.getManualRtt())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HOST_MARK_FIELD_NUMBER;
    hash = (53 * hash) + getHostMark();
    hash = (37 * hash) + BANDWIDTH_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getBandwidth());
    hash = (37 * hash) + PRIORITY_QUEUE_PARAMETER_FIELD_NUMBER;
    hash = (53 * hash) + priorityQueueParameter_;
    hash = (37 * hash) + ACK_FILTER_FIELD_NUMBER;
    hash = (53 * hash) + ackFilter_;
    hash = (37 * hash) + MANUAL_RTT_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getManualRtt());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.SpaceX.API.Device.CakeRateLimit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.SpaceX.API.Device.CakeRateLimit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.SpaceX.API.Device.CakeRateLimit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.SpaceX.API.Device.CakeRateLimit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code SpaceX.API.Device.CakeRateLimit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:SpaceX.API.Device.CakeRateLimit)
      com.SpaceX.API.Device.CakeRateLimitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_CakeRateLimit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_CakeRateLimit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.SpaceX.API.Device.CakeRateLimit.class, com.SpaceX.API.Device.CakeRateLimit.Builder.class);
    }

    // Construct using com.SpaceX.API.Device.CakeRateLimit.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      hostMark_ = 0;
      bandwidth_ = 0F;
      priorityQueueParameter_ = 0;
      ackFilter_ = 0;
      manualRtt_ = 0F;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.SpaceX.API.Device.WifiConfigProto.internal_static_SpaceX_API_Device_CakeRateLimit_descriptor;
    }

    @java.lang.Override
    public com.SpaceX.API.Device.CakeRateLimit getDefaultInstanceForType() {
      return com.SpaceX.API.Device.CakeRateLimit.getDefaultInstance();
    }

    @java.lang.Override
    public com.SpaceX.API.Device.CakeRateLimit build() {
      com.SpaceX.API.Device.CakeRateLimit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.SpaceX.API.Device.CakeRateLimit buildPartial() {
      com.SpaceX.API.Device.CakeRateLimit result = new com.SpaceX.API.Device.CakeRateLimit(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.SpaceX.API.Device.CakeRateLimit result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.hostMark_ = hostMark_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.bandwidth_ = bandwidth_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.priorityQueueParameter_ = priorityQueueParameter_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.ackFilter_ = ackFilter_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.manualRtt_ = manualRtt_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.SpaceX.API.Device.CakeRateLimit) {
        return mergeFrom((com.SpaceX.API.Device.CakeRateLimit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.SpaceX.API.Device.CakeRateLimit other) {
      if (other == com.SpaceX.API.Device.CakeRateLimit.getDefaultInstance()) return this;
      if (other.getHostMark() != 0) {
        setHostMark(other.getHostMark());
      }
      if (other.getBandwidth() != 0F) {
        setBandwidth(other.getBandwidth());
      }
      if (other.priorityQueueParameter_ != 0) {
        setPriorityQueueParameterValue(other.getPriorityQueueParameterValue());
      }
      if (other.ackFilter_ != 0) {
        setAckFilterValue(other.getAckFilterValue());
      }
      if (other.getManualRtt() != 0F) {
        setManualRtt(other.getManualRtt());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              hostMark_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 21: {
              bandwidth_ = input.readFloat();
              bitField0_ |= 0x00000002;
              break;
            } // case 21
            case 24: {
              priorityQueueParameter_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 32: {
              ackFilter_ = input.readEnum();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 53: {
              manualRtt_ = input.readFloat();
              bitField0_ |= 0x00000010;
              break;
            } // case 53
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int hostMark_ ;
    /**
     * <code>uint32 host_mark = 1 [json_name = "hostMark"];</code>
     * @return The hostMark.
     */
    @java.lang.Override
    public int getHostMark() {
      return hostMark_;
    }
    /**
     * <code>uint32 host_mark = 1 [json_name = "hostMark"];</code>
     * @param value The hostMark to set.
     * @return This builder for chaining.
     */
    public Builder setHostMark(int value) {

      hostMark_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 host_mark = 1 [json_name = "hostMark"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHostMark() {
      bitField0_ = (bitField0_ & ~0x00000001);
      hostMark_ = 0;
      onChanged();
      return this;
    }

    private float bandwidth_ ;
    /**
     * <code>float bandwidth = 2 [json_name = "bandwidth"];</code>
     * @return The bandwidth.
     */
    @java.lang.Override
    public float getBandwidth() {
      return bandwidth_;
    }
    /**
     * <code>float bandwidth = 2 [json_name = "bandwidth"];</code>
     * @param value The bandwidth to set.
     * @return This builder for chaining.
     */
    public Builder setBandwidth(float value) {

      bandwidth_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>float bandwidth = 2 [json_name = "bandwidth"];</code>
     * @return This builder for chaining.
     */
    public Builder clearBandwidth() {
      bitField0_ = (bitField0_ & ~0x00000002);
      bandwidth_ = 0F;
      onChanged();
      return this;
    }

    private int priorityQueueParameter_ = 0;
    /**
     * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
     * @return The enum numeric value on the wire for priorityQueueParameter.
     */
    @java.lang.Override public int getPriorityQueueParameterValue() {
      return priorityQueueParameter_;
    }
    /**
     * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
     * @param value The enum numeric value on the wire for priorityQueueParameter to set.
     * @return This builder for chaining.
     */
    public Builder setPriorityQueueParameterValue(int value) {
      priorityQueueParameter_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
     * @return The priorityQueueParameter.
     */
    @java.lang.Override
    public com.SpaceX.API.Device.CakePriorityQueueParameter getPriorityQueueParameter() {
      com.SpaceX.API.Device.CakePriorityQueueParameter result = com.SpaceX.API.Device.CakePriorityQueueParameter.forNumber(priorityQueueParameter_);
      return result == null ? com.SpaceX.API.Device.CakePriorityQueueParameter.UNRECOGNIZED : result;
    }
    /**
     * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
     * @param value The priorityQueueParameter to set.
     * @return This builder for chaining.
     */
    public Builder setPriorityQueueParameter(com.SpaceX.API.Device.CakePriorityQueueParameter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      priorityQueueParameter_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPriorityQueueParameter() {
      bitField0_ = (bitField0_ & ~0x00000004);
      priorityQueueParameter_ = 0;
      onChanged();
      return this;
    }

    private int ackFilter_ = 0;
    /**
     * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
     * @return The enum numeric value on the wire for ackFilter.
     */
    @java.lang.Override public int getAckFilterValue() {
      return ackFilter_;
    }
    /**
     * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
     * @param value The enum numeric value on the wire for ackFilter to set.
     * @return This builder for chaining.
     */
    public Builder setAckFilterValue(int value) {
      ackFilter_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
     * @return The ackFilter.
     */
    @java.lang.Override
    public com.SpaceX.API.Device.CakeAckFilter getAckFilter() {
      com.SpaceX.API.Device.CakeAckFilter result = com.SpaceX.API.Device.CakeAckFilter.forNumber(ackFilter_);
      return result == null ? com.SpaceX.API.Device.CakeAckFilter.UNRECOGNIZED : result;
    }
    /**
     * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
     * @param value The ackFilter to set.
     * @return This builder for chaining.
     */
    public Builder setAckFilter(com.SpaceX.API.Device.CakeAckFilter value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      ackFilter_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAckFilter() {
      bitField0_ = (bitField0_ & ~0x00000008);
      ackFilter_ = 0;
      onChanged();
      return this;
    }

    private float manualRtt_ ;
    /**
     * <code>float manual_rtt = 6 [json_name = "manualRtt"];</code>
     * @return The manualRtt.
     */
    @java.lang.Override
    public float getManualRtt() {
      return manualRtt_;
    }
    /**
     * <code>float manual_rtt = 6 [json_name = "manualRtt"];</code>
     * @param value The manualRtt to set.
     * @return This builder for chaining.
     */
    public Builder setManualRtt(float value) {

      manualRtt_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <code>float manual_rtt = 6 [json_name = "manualRtt"];</code>
     * @return This builder for chaining.
     */
    public Builder clearManualRtt() {
      bitField0_ = (bitField0_ & ~0x00000010);
      manualRtt_ = 0F;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:SpaceX.API.Device.CakeRateLimit)
  }

  // @@protoc_insertion_point(class_scope:SpaceX.API.Device.CakeRateLimit)
  private static final com.SpaceX.API.Device.CakeRateLimit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.SpaceX.API.Device.CakeRateLimit();
  }

  public static com.SpaceX.API.Device.CakeRateLimit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CakeRateLimit>
      PARSER = new com.google.protobuf.AbstractParser<CakeRateLimit>() {
    @java.lang.Override
    public CakeRateLimit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CakeRateLimit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CakeRateLimit> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.SpaceX.API.Device.CakeRateLimit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

