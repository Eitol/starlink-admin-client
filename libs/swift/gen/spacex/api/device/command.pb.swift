// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SpaceX_API_Device_Capability: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case read // = 0
  case readInternal // = 13
  case readPrivate // = 7
  case local // = 14
  case write // = 1
  case writePersistent // = 11
  case debug // = 2
  case admin // = 3
  case setup // = 4
  case setSku // = 5
  case refresh // = 6
  case fuse // = 8
  case reset // = 9
  case test // = 10
  case ssh // = 12
  case guest // = 15
  case UNRECOGNIZED(Int)

  init() {
    self = .read
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .read
    case 1: self = .write
    case 2: self = .debug
    case 3: self = .admin
    case 4: self = .setup
    case 5: self = .setSku
    case 6: self = .refresh
    case 7: self = .readPrivate
    case 8: self = .fuse
    case 9: self = .reset
    case 10: self = .test
    case 11: self = .writePersistent
    case 12: self = .ssh
    case 13: self = .readInternal
    case 14: self = .local
    case 15: self = .guest
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .read: return 0
    case .write: return 1
    case .debug: return 2
    case .admin: return 3
    case .setup: return 4
    case .setSku: return 5
    case .refresh: return 6
    case .readPrivate: return 7
    case .fuse: return 8
    case .reset: return 9
    case .test: return 10
    case .writePersistent: return 11
    case .ssh: return 12
    case .readInternal: return 13
    case .local: return 14
    case .guest: return 15
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_Capability] = [
    .read,
    .readInternal,
    .readPrivate,
    .local,
    .write,
    .writePersistent,
    .debug,
    .admin,
    .setup,
    .setSku,
    .refresh,
    .fuse,
    .reset,
    .test,
    .ssh,
    .guest,
  ]

}

enum SpaceX_API_Device_User: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case noUser // = 0
  case god // = 1
  case lan // = 2
  case cloud // = 3
  case factory // = 4
  case router // = 5
  case guestLan // = 6
  case sensitiveCommanding // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .noUser
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noUser
    case 1: self = .god
    case 2: self = .lan
    case 3: self = .cloud
    case 4: self = .factory
    case 5: self = .router
    case 6: self = .guestLan
    case 7: self = .sensitiveCommanding
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noUser: return 0
    case .god: return 1
    case .lan: return 2
    case .cloud: return 3
    case .factory: return 4
    case .router: return 5
    case .guestLan: return 6
    case .sensitiveCommanding: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_User] = [
    .noUser,
    .god,
    .lan,
    .cloud,
    .factory,
    .router,
    .guestLan,
    .sensitiveCommanding,
  ]

}

struct SpaceX_API_Device_PublicKey: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  /// NOTE: This field was marked as deprecated in the .proto file.
  var capabilities: [SpaceX_API_Device_Capability] = []

  var user: SpaceX_API_Device_User = .noUser

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_Capability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "READ"),
    1: .same(proto: "WRITE"),
    2: .same(proto: "DEBUG"),
    3: .same(proto: "ADMIN"),
    4: .same(proto: "SETUP"),
    5: .same(proto: "SET_SKU"),
    6: .same(proto: "REFRESH"),
    7: .same(proto: "READ_PRIVATE"),
    8: .same(proto: "FUSE"),
    9: .same(proto: "RESET"),
    10: .same(proto: "TEST"),
    11: .same(proto: "WRITE_PERSISTENT"),
    12: .same(proto: "SSH"),
    13: .same(proto: "READ_INTERNAL"),
    14: .same(proto: "LOCAL"),
    15: .same(proto: "GUEST"),
  ]
}

extension SpaceX_API_Device_User: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_USER"),
    1: .same(proto: "GOD"),
    2: .same(proto: "LAN"),
    3: .same(proto: "CLOUD"),
    4: .same(proto: "FACTORY"),
    5: .same(proto: "ROUTER"),
    6: .same(proto: "GUEST_LAN"),
    7: .same(proto: "SENSITIVE_COMMANDING"),
  ]
}

extension SpaceX_API_Device_PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "capabilities"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.capabilities) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.capabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.capabilities, fieldNumber: 2)
    }
    if self.user != .noUser {
      try visitor.visitSingularEnumField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_PublicKey, rhs: SpaceX_API_Device_PublicKey) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.capabilities != rhs.capabilities {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
