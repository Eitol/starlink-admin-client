// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/wifi.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SpaceX_API_Device_WifiClients: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clients: [SpaceX_API_Device_WifiClient] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_ToController: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var apiVersion: Int32 = 0

  var message: SpaceX_API_Device_ToController.OneOf_Message? = nil

  var clients: SpaceX_API_Device_WifiClients {
    get {
      if case .clients(let v)? = message {return v}
      return SpaceX_API_Device_WifiClients()
    }
    set {message = .clients(newValue)}
  }

  var meshJoin: SpaceX_API_Device_WifiMeshJoin {
    get {
      if case .meshJoin(let v)? = message {return v}
      return SpaceX_API_Device_WifiMeshJoin()
    }
    set {message = .meshJoin(newValue)}
  }

  var status: SpaceX_API_Device_WifiMeshStatus {
    get {
      if case .status(let v)? = message {return v}
      return SpaceX_API_Device_WifiMeshStatus()
    }
    set {message = .status(newValue)}
  }

  var speedtest: SpaceX_API_Device_MeshSpeedtest {
    get {
      if case .speedtest(let v)? = message {return v}
      return SpaceX_API_Device_MeshSpeedtest()
    }
    set {message = .speedtest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case clients(SpaceX_API_Device_WifiClients)
    case meshJoin(SpaceX_API_Device_WifiMeshJoin)
    case status(SpaceX_API_Device_WifiMeshStatus)
    case speedtest(SpaceX_API_Device_MeshSpeedtest)

  }

  init() {}
}

struct SpaceX_API_Device_WifiMeshJoin: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var incarnation: UInt64 = 0

  var hardwareVersion: String = String()

  var supports5GhzHigh: Bool = false

  var siteSurveyScan: [SpaceX_API_Device_WifiSiteSurveyResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiMeshStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var softwareVersion: String = String()

  var macLan: String = String()

  var sourceMacAddresses: [String] = []

  var clients: [SpaceX_API_Device_WifiClient] = []

  var bssList: [SpaceX_API_Device_InflatedBasicServiceSet] = []

  var hardwareVersion: String = String()

  var backhaulBssid: String = String()

  var backhaulEstPreference: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_MeshSpeedtestRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_MeshSpeedtest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uploadStartTime: Int64 = 0

  var downloadStartTime: Int64 = 0

  var uploadMbps: Float = 0

  var downloadMbps: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiSiteSurveyResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rssi: Float = 0

  var channel: UInt32 = 0

  var ssid: String = String()

  var security: SpaceX_API_Device_WifiSecurity = .unknown

  var wirelessMode: SpaceX_API_Device_WifiMode = .default

  var iface: SpaceX_API_Device_IfaceType = .unknown

  var macAddress: String = String()

  var estRxRate: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGlobalMeshStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hardwareVersion: String = String()

  var softwareVersion: String = String()

  var bssList: [SpaceX_API_Device_InflatedBasicServiceSet] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_BackhaulRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var retryBackhaul: Bool = false

  var goldenBss: SpaceX_API_Device_WifiConfig {
    get {return _goldenBss ?? SpaceX_API_Device_WifiConfig()}
    set {_goldenBss = newValue}
  }
  /// Returns true if `goldenBss` has been explicitly set.
  var hasGoldenBss: Bool {return self._goldenBss != nil}
  /// Clears the value of `goldenBss`. Subsequent reads from it will return its default value.
  mutating func clearGoldenBss() {self._goldenBss = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _goldenBss: SpaceX_API_Device_WifiConfig? = nil
}

struct SpaceX_API_Device_FromController: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var apiVersion: Int32 = 0

  var message: SpaceX_API_Device_FromController.OneOf_Message? = nil

  var wifiConfig: SpaceX_API_Device_WifiConfig {
    get {
      if case .wifiConfig(let v)? = message {return v}
      return SpaceX_API_Device_WifiConfig()
    }
    set {message = .wifiConfig(newValue)}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var steerClientRequest: SpaceX_API_Device_SteerClientRequest {
    get {
      if case .steerClientRequest(let v)? = message {return v}
      return SpaceX_API_Device_SteerClientRequest()
    }
    set {message = .steerClientRequest(newValue)}
  }

  var status: SpaceX_API_Device_WifiGlobalMeshStatus {
    get {
      if case .status(let v)? = message {return v}
      return SpaceX_API_Device_WifiGlobalMeshStatus()
    }
    set {message = .status(newValue)}
  }

  var backhaulRequest: SpaceX_API_Device_BackhaulRequest {
    get {
      if case .backhaulRequest(let v)? = message {return v}
      return SpaceX_API_Device_BackhaulRequest()
    }
    set {message = .backhaulRequest(newValue)}
  }

  var startSpeedtest: SpaceX_API_Device_MeshSpeedtestRequest {
    get {
      if case .startSpeedtest(let v)? = message {return v}
      return SpaceX_API_Device_MeshSpeedtestRequest()
    }
    set {message = .startSpeedtest(newValue)}
  }

  var wifiBtmRequest: SpaceX_API_Device_WifiBtmRequest {
    get {
      if case .wifiBtmRequest(let v)? = message {return v}
      return SpaceX_API_Device_WifiBtmRequest()
    }
    set {message = .wifiBtmRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case wifiConfig(SpaceX_API_Device_WifiConfig)
    /// NOTE: This field was marked as deprecated in the .proto file.
    case steerClientRequest(SpaceX_API_Device_SteerClientRequest)
    case status(SpaceX_API_Device_WifiGlobalMeshStatus)
    case backhaulRequest(SpaceX_API_Device_BackhaulRequest)
    case startSpeedtest(SpaceX_API_Device_MeshSpeedtestRequest)
    case wifiBtmRequest(SpaceX_API_Device_WifiBtmRequest)

  }

  init() {}
}

/// NOTE: This message was marked as deprecated in the .proto file.
struct SpaceX_API_Device_SteerClientRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var clientMacAddr: String = String()

  /// NOTE: This field was marked as deprecated in the .proto file.
  var targets: [SpaceX_API_Device_SteerClientRequest.SteerTarget] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SteerTarget: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// NOTE: This field was marked as deprecated in the .proto file.
    var bssid: String = String()

    /// NOTE: This field was marked as deprecated in the .proto file.
    var channel: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct SpaceX_API_Device_WifiBtmRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bssTerminationDurationM: UInt32 = 0

  var peerBssid: String = String()

  var neighborReport: [SpaceX_API_Device_WifiBtmRequest.NeighborReport] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NeighborReport: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bssid: String = String()

    var channel: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct SpaceX_API_Device_WifiSelfTest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var totalSuccess: Bool = false

  var fused: SpaceX_API_Device_WifiSelfTest.TestResult {
    get {return _fused ?? SpaceX_API_Device_WifiSelfTest.TestResult()}
    set {_fused = newValue}
  }
  /// Returns true if `fused` has been explicitly set.
  var hasFused: Bool {return self._fused != nil}
  /// Clears the value of `fused`. Subsequent reads from it will return its default value.
  mutating func clearFused() {self._fused = nil}

  var ethPhys: [SpaceX_API_Device_WifiSelfTest.TestResult] = []

  var pcis: [SpaceX_API_Device_WifiSelfTest.TestResult] = []

  var bl2Prod: SpaceX_API_Device_WifiSelfTest.TestResult {
    get {return _bl2Prod ?? SpaceX_API_Device_WifiSelfTest.TestResult()}
    set {_bl2Prod = newValue}
  }
  /// Returns true if `bl2Prod` has been explicitly set.
  var hasBl2Prod: Bool {return self._bl2Prod != nil}
  /// Clears the value of `bl2Prod`. Subsequent reads from it will return its default value.
  mutating func clearBl2Prod() {self._bl2Prod = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TestResult: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var success: Bool = false

    var failureReason: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _fused: SpaceX_API_Device_WifiSelfTest.TestResult? = nil
  fileprivate var _bl2Prod: SpaceX_API_Device_WifiSelfTest.TestResult? = nil
}

struct SpaceX_API_Device_WifiSetConfigRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wifiConfig: SpaceX_API_Device_WifiConfig {
    get {return _wifiConfig ?? SpaceX_API_Device_WifiConfig()}
    set {_wifiConfig = newValue}
  }
  /// Returns true if `wifiConfig` has been explicitly set.
  var hasWifiConfig: Bool {return self._wifiConfig != nil}
  /// Clears the value of `wifiConfig`. Subsequent reads from it will return its default value.
  mutating func clearWifiConfig() {self._wifiConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _wifiConfig: SpaceX_API_Device_WifiConfig? = nil
}

struct SpaceX_API_Device_WifiSetConfigResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updatedWifiConfig: SpaceX_API_Device_WifiConfig {
    get {return _updatedWifiConfig ?? SpaceX_API_Device_WifiConfig()}
    set {_updatedWifiConfig = newValue}
  }
  /// Returns true if `updatedWifiConfig` has been explicitly set.
  var hasUpdatedWifiConfig: Bool {return self._updatedWifiConfig != nil}
  /// Clears the value of `updatedWifiConfig`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedWifiConfig() {self._updatedWifiConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedWifiConfig: SpaceX_API_Device_WifiConfig? = nil
}

struct SpaceX_API_Device_WifiGetConfigRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetConfigResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wifiConfig: SpaceX_API_Device_WifiConfig {
    get {return _wifiConfig ?? SpaceX_API_Device_WifiConfig()}
    set {_wifiConfig = newValue}
  }
  /// Returns true if `wifiConfig` has been explicitly set.
  var hasWifiConfig: Bool {return self._wifiConfig != nil}
  /// Clears the value of `wifiConfig`. Subsequent reads from it will return its default value.
  mutating func clearWifiConfig() {self._wifiConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _wifiConfig: SpaceX_API_Device_WifiConfig? = nil
}

struct SpaceX_API_Device_WifiSetMeshDeviceTrustRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var auth: SpaceX_API_Device_MeshAuth = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiSetMeshDeviceTrustResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiSetMeshConfigRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var meshConfig: SpaceX_API_Device_MeshConfig {
    get {return _meshConfig ?? SpaceX_API_Device_MeshConfig()}
    set {_meshConfig = newValue}
  }
  /// Returns true if `meshConfig` has been explicitly set.
  var hasMeshConfig: Bool {return self._meshConfig != nil}
  /// Clears the value of `meshConfig`. Subsequent reads from it will return its default value.
  mutating func clearMeshConfig() {self._meshConfig = nil}

  var deviceID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _meshConfig: SpaceX_API_Device_MeshConfig? = nil
}

struct SpaceX_API_Device_WifiSetMeshConfigResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetClientsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetClientsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clients: [SpaceX_API_Device_WifiClient] = []

  var hasClientIndex_p: Bool = false

  var clientIndex: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetClientHistoryRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var macAddress: String = String()

  var clientID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetClientHistoryResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var current: UInt64 = 0

  var txThroughputMbps: [Float] = []

  var rxThroughputMbps: [Float] = []

  var throughputLimited: [SpaceX_API_Device_WifiGetClientHistoryResponse.WifiLimitedReason] = []

  var rxRateMbps: [Float] = []

  var rssi: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum WifiLimitedReason: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case limitUnknown // = 0
    case limitNone // = 1
    case limitUnclassified // = 2
    case limitDroppedPackets // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .limitUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .limitUnknown
      case 1: self = .limitNone
      case 2: self = .limitUnclassified
      case 3: self = .limitDroppedPackets
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .limitUnknown: return 0
      case .limitNone: return 1
      case .limitUnclassified: return 2
      case .limitDroppedPackets: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiGetClientHistoryResponse.WifiLimitedReason] = [
      .limitUnknown,
      .limitNone,
      .limitUnclassified,
      .limitDroppedPackets,
    ]

  }

  init() {}
}

struct SpaceX_API_Device_WifiSetAviationConformedRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetHistoryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var current: UInt64 = 0

  var pingDropRate: [Float] = []

  var pingLatencyMs: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiNewClientConnectedEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var client: SpaceX_API_Device_WifiClient {
    get {return _client ?? SpaceX_API_Device_WifiClient()}
    set {_client = newValue}
  }
  /// Returns true if `client` has been explicitly set.
  var hasClient: Bool {return self._client != nil}
  /// Clears the value of `client`. Subsequent reads from it will return its default value.
  mutating func clearClient() {self._client = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _client: SpaceX_API_Device_WifiClient? = nil
}

struct SpaceX_API_Device_WifiClient: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var givenName: String {
    get {return _storage._givenName}
    set {_uniqueStorage()._givenName = newValue}
  }

  var domain: String {
    get {return _storage._domain}
    set {_uniqueStorage()._domain = newValue}
  }

  var macAddress: String {
    get {return _storage._macAddress}
    set {_uniqueStorage()._macAddress = newValue}
  }

  var ipAddress: String {
    get {return _storage._ipAddress}
    set {_uniqueStorage()._ipAddress = newValue}
  }

  var dhcpLeaseActive: Bool {
    get {return _storage._dhcpLeaseActive}
    set {_uniqueStorage()._dhcpLeaseActive = newValue}
  }

  var dhcpLeaseRenewed: Bool {
    get {return _storage._dhcpLeaseRenewed}
    set {_uniqueStorage()._dhcpLeaseRenewed = newValue}
  }

  var ipv6Addresses: [String] {
    get {return _storage._ipv6Addresses}
    set {_uniqueStorage()._ipv6Addresses = newValue}
  }

  var signalStrength: Float {
    get {return _storage._signalStrength}
    set {_uniqueStorage()._signalStrength = newValue}
  }

  var channelWidth: UInt32 {
    get {return _storage._channelWidth}
    set {_uniqueStorage()._channelWidth = newValue}
  }

  var rxStats: SpaceX_API_Device_WifiClient.RxStats {
    get {return _storage._rxStats ?? SpaceX_API_Device_WifiClient.RxStats()}
    set {_uniqueStorage()._rxStats = newValue}
  }
  /// Returns true if `rxStats` has been explicitly set.
  var hasRxStats: Bool {return _storage._rxStats != nil}
  /// Clears the value of `rxStats`. Subsequent reads from it will return its default value.
  mutating func clearRxStats() {_uniqueStorage()._rxStats = nil}

  var txStats: SpaceX_API_Device_WifiClient.TxStats {
    get {return _storage._txStats ?? SpaceX_API_Device_WifiClient.TxStats()}
    set {_uniqueStorage()._txStats = newValue}
  }
  /// Returns true if `txStats` has been explicitly set.
  var hasTxStats: Bool {return _storage._txStats != nil}
  /// Clears the value of `txStats`. Subsequent reads from it will return its default value.
  mutating func clearTxStats() {_uniqueStorage()._txStats = nil}

  var associatedTimeS: UInt32 {
    get {return _storage._associatedTimeS}
    set {_uniqueStorage()._associatedTimeS = newValue}
  }

  var noDataIdleS: UInt32 {
    get {return _storage._noDataIdleS}
    set {_uniqueStorage()._noDataIdleS = newValue}
  }

  var modeStr: String {
    get {return _storage._modeStr}
    set {_uniqueStorage()._modeStr = newValue}
  }

  var iface: SpaceX_API_Device_WifiClient.Interface {
    get {return _storage._iface}
    set {_uniqueStorage()._iface = newValue}
  }

  var ifaceName: String {
    get {return _storage._ifaceName}
    set {_uniqueStorage()._ifaceName = newValue}
  }

  var snr: Float {
    get {return _storage._snr}
    set {_uniqueStorage()._snr = newValue}
  }

  var psmode: Int32 {
    get {return _storage._psmode}
    set {_uniqueStorage()._psmode = newValue}
  }

  var upstreamMacAddress: String {
    get {return _storage._upstreamMacAddress}
    set {_uniqueStorage()._upstreamMacAddress = newValue}
  }

  var role: SpaceX_API_Device_WifiClient.Role {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  var deviceID: String {
    get {return _storage._deviceID}
    set {_uniqueStorage()._deviceID = newValue}
  }

  var swqChecks: UInt32 {
    get {return _storage._swqChecks}
    set {_uniqueStorage()._swqChecks = newValue}
  }

  var swqChecksNonEmpty: UInt32 {
    get {return _storage._swqChecksNonEmpty}
    set {_uniqueStorage()._swqChecksNonEmpty = newValue}
  }

  var mibSteerState: UInt32 {
    get {return _storage._mibSteerState}
    set {_uniqueStorage()._mibSteerState = newValue}
  }

  var mibSteerMethod: UInt32 {
    get {return _storage._mibSteerMethod}
    set {_uniqueStorage()._mibSteerMethod = newValue}
  }

  var btmRequests: UInt32 {
    get {return _storage._btmRequests}
    set {_uniqueStorage()._btmRequests = newValue}
  }

  var btmRequestsSuccess: UInt32 {
    get {return _storage._btmRequestsSuccess}
    set {_uniqueStorage()._btmRequestsSuccess = newValue}
  }

  var steerState: UInt32 {
    get {return _storage._steerState}
    set {_uniqueStorage()._steerState = newValue}
  }

  var steerReqSuccessLast1H: UInt32 {
    get {return _storage._steerReqSuccessLast1H}
    set {_uniqueStorage()._steerReqSuccessLast1H = newValue}
  }

  var steerReqFailLast1H: UInt32 {
    get {return _storage._steerReqFailLast1H}
    set {_uniqueStorage()._steerReqFailLast1H = newValue}
  }

  var steerReqFailAndDissocLast1H: UInt32 {
    get {return _storage._steerReqFailAndDissocLast1H}
    set {_uniqueStorage()._steerReqFailAndDissocLast1H = newValue}
  }

  var dot11VSupport: Bool {
    get {return _storage._dot11VSupport}
    set {_uniqueStorage()._dot11VSupport = newValue}
  }

  var hopsFromController: UInt32 {
    get {return _storage._hopsFromController}
    set {_uniqueStorage()._hopsFromController = newValue}
  }

  var estTxRateMbpsFromController: Float {
    get {return _storage._estTxRateMbpsFromController}
    set {_uniqueStorage()._estTxRateMbpsFromController = newValue}
  }

  var estRxRateMbpsFromController: Float {
    get {return _storage._estRxRateMbpsFromController}
    set {_uniqueStorage()._estRxRateMbpsFromController = newValue}
  }

  var hardwareVersion: String {
    get {return _storage._hardwareVersion}
    set {_uniqueStorage()._hardwareVersion = newValue}
  }

  var softwareVersion: String {
    get {return _storage._softwareVersion}
    set {_uniqueStorage()._softwareVersion = newValue}
  }

  var apiVersion: UInt32 {
    get {return _storage._apiVersion}
    set {_uniqueStorage()._apiVersion = newValue}
  }

  var pingMetrics: SpaceX_API_Device_WifiClient.PingMetrics {
    get {return _storage._pingMetrics ?? SpaceX_API_Device_WifiClient.PingMetrics()}
    set {_uniqueStorage()._pingMetrics = newValue}
  }
  /// Returns true if `pingMetrics` has been explicitly set.
  var hasPingMetrics: Bool {return _storage._pingMetrics != nil}
  /// Clears the value of `pingMetrics`. Subsequent reads from it will return its default value.
  mutating func clearPingMetrics() {_uniqueStorage()._pingMetrics = nil}

  var blocked: Bool {
    get {return _storage._blocked}
    set {_uniqueStorage()._blocked = newValue}
  }

  var clientID: UInt32 {
    get {return _storage._clientID}
    set {_uniqueStorage()._clientID = newValue}
  }

  var fqcodelInfo: SpaceX_API_Device_WifiClient.FqcodelInfo {
    get {return _storage._fqcodelInfo ?? SpaceX_API_Device_WifiClient.FqcodelInfo()}
    set {_uniqueStorage()._fqcodelInfo = newValue}
  }
  /// Returns true if `fqcodelInfo` has been explicitly set.
  var hasFqcodelInfo: Bool {return _storage._fqcodelInfo != nil}
  /// Clears the value of `fqcodelInfo`. Subsequent reads from it will return its default value.
  mutating func clearFqcodelInfo() {_uniqueStorage()._fqcodelInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Interface: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case eth // = 1
    case rf2Ghz // = 2
    case rf5Ghz // = 3
    case rf5GhzHigh // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .eth
      case 2: self = .rf2Ghz
      case 3: self = .rf5Ghz
      case 4: self = .rf5GhzHigh
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .eth: return 1
      case .rf2Ghz: return 2
      case .rf5Ghz: return 3
      case .rf5GhzHigh: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiClient.Interface] = [
      .unknown,
      .eth,
      .rf2Ghz,
      .rf5Ghz,
      .rf5GhzHigh,
    ]

  }

  enum Role: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case client // = 1
    case repeater // = 2
    case controller // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .client
      case 2: self = .repeater
      case 3: self = .controller
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .client: return 1
      case .repeater: return 2
      case .controller: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiClient.Role] = [
      .unknown,
      .client,
      .repeater,
      .controller,
    ]

  }

  struct RxStats: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytes: UInt64 = 0

    var countErrors: UInt64 = 0

    var phyMode: UInt32 = 0

    var nss: Int32 = 0

    var rateMbps: UInt32 = 0

    var rateMbpsLast30S: Float = 0

    var rateMbpsLast15S: Float = 0

    var mcs: UInt32 = 0

    var bandwidth: UInt32 = 0

    var guardNs: UInt32 = 0

    var airtimeFractionLast1S: Float = 0

    var sampledPackets: UInt32 = 0

    var sampledPacketsRetried: UInt32 = 0

    var sampledPacketsDropped: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct TxStats: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bytes: UInt64 = 0

    var successBytes: UInt64 = 0

    var phyMode: UInt32 = 0

    var nss: Int32 = 0

    var rateMbps: UInt32 = 0

    var rateMbpsLast30S: Float = 0

    var rateMbpsLast15S: Float = 0

    var mcs: UInt32 = 0

    var bandwidth: UInt32 = 0

    var guardNs: UInt32 = 0

    var airtimeFractionLast1S: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PingMetrics: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var inUnhappyHour2S: Bool = false

    var inUnhappyHour5S: Bool = false

    var dropRate5M: Float = 0

    var latency5M: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct FqcodelInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var enqsHiPrio: UInt64 = 0

    var enqsFqcodel: UInt64 = 0

    var enqsNew: UInt64 = 0

    var enqsOld: UInt64 = 0

    var enqsDropped: UInt64 = 0

    var deqsNew: UInt64 = 0

    var deqsOld: UInt64 = 0

    var deqsFlowNew: UInt64 = 0

    var deqsFlowOldDeficit: UInt64 = 0

    var deqsFlowOldStarvation: UInt64 = 0

    var deqsDropped: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WifiSetupRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var skip: Bool = false

  var networkName: String = String()

  var networkPassword: String = String()

  var bypass: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiSetupResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiBandStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chanBusyTimeFraction: Float = 0

  var txAirTimeFraction: Float = 0

  var rxAirTimeFraction: Float = 0

  var obssAirTimeFraction: Float = 0

  var edccaAirTimeFraction: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiAlerts: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thermalThrottle: Bool = false

  var installPending: Bool = false

  var freshlyFused: Bool = false

  var lanEthSlowLink10: Bool = false

  var lanEthSlowLink100: Bool = false

  var wanEthPoorConnection: Bool = false

  var meshTopologyChangingOften: Bool = false

  var meshUnreliableBackhaul: Bool = false

  var radiusMissingProcess: Bool = false

  var ethSwitchError: Bool = false

  var poeOnDishUnreachable: Bool = false

  var poeFuseBlown: Bool = false

  var poeRouterOvercurrent: Bool = false

  var poeOffCurrentNominal: Bool = false

  var poeVinOvervoltage: Bool = false

  var poeVinUndervoltage: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetStatusResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceInfo: SpaceX_API_Device_DeviceInfo {
    get {return _storage._deviceInfo ?? SpaceX_API_Device_DeviceInfo()}
    set {_uniqueStorage()._deviceInfo = newValue}
  }
  /// Returns true if `deviceInfo` has been explicitly set.
  var hasDeviceInfo: Bool {return _storage._deviceInfo != nil}
  /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
  mutating func clearDeviceInfo() {_uniqueStorage()._deviceInfo = nil}

  var deviceState: SpaceX_API_Device_DeviceState {
    get {return _storage._deviceState ?? SpaceX_API_Device_DeviceState()}
    set {_uniqueStorage()._deviceState = newValue}
  }
  /// Returns true if `deviceState` has been explicitly set.
  var hasDeviceState: Bool {return _storage._deviceState != nil}
  /// Clears the value of `deviceState`. Subsequent reads from it will return its default value.
  mutating func clearDeviceState() {_uniqueStorage()._deviceState = nil}

  var captivePortalEnabled: Bool {
    get {return _storage._captivePortalEnabled}
    set {_uniqueStorage()._captivePortalEnabled = newValue}
  }

  var ipv4WanAddress: String {
    get {return _storage._ipv4WanAddress}
    set {_uniqueStorage()._ipv4WanAddress = newValue}
  }

  var ipv6WanAddresses: [String] {
    get {return _storage._ipv6WanAddresses}
    set {_uniqueStorage()._ipv6WanAddresses = newValue}
  }

  var pingDropRate: Float {
    get {return _storage._pingDropRate}
    set {_uniqueStorage()._pingDropRate = newValue}
  }

  var pingDropRate5M: Float {
    get {return _storage._pingDropRate5M}
    set {_uniqueStorage()._pingDropRate5M = newValue}
  }

  var pingLatencyMs: Float {
    get {return _storage._pingLatencyMs}
    set {_uniqueStorage()._pingLatencyMs = newValue}
  }

  var dishPingDropRate: Float {
    get {return _storage._dishPingDropRate}
    set {_uniqueStorage()._dishPingDropRate = newValue}
  }

  var dishPingDropRate5M: Float {
    get {return _storage._dishPingDropRate5M}
    set {_uniqueStorage()._dishPingDropRate5M = newValue}
  }

  var dishPingLatencyMs: Float {
    get {return _storage._dishPingLatencyMs}
    set {_uniqueStorage()._dishPingLatencyMs = newValue}
  }

  var popPingDropRate: Float {
    get {return _storage._popPingDropRate}
    set {_uniqueStorage()._popPingDropRate = newValue}
  }

  var popPingDropRate5M: Float {
    get {return _storage._popPingDropRate5M}
    set {_uniqueStorage()._popPingDropRate5M = newValue}
  }

  var popPingLatencyMs: Float {
    get {return _storage._popPingLatencyMs}
    set {_uniqueStorage()._popPingLatencyMs = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var rf2GhzStatus: SpaceX_API_Device_WifiBandStatus {
    get {return _storage._rf2GhzStatus ?? SpaceX_API_Device_WifiBandStatus()}
    set {_uniqueStorage()._rf2GhzStatus = newValue}
  }
  /// Returns true if `rf2GhzStatus` has been explicitly set.
  var hasRf2GhzStatus: Bool {return _storage._rf2GhzStatus != nil}
  /// Clears the value of `rf2GhzStatus`. Subsequent reads from it will return its default value.
  mutating func clearRf2GhzStatus() {_uniqueStorage()._rf2GhzStatus = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var rf5GhzStatus: SpaceX_API_Device_WifiBandStatus {
    get {return _storage._rf5GhzStatus ?? SpaceX_API_Device_WifiBandStatus()}
    set {_uniqueStorage()._rf5GhzStatus = newValue}
  }
  /// Returns true if `rf5GhzStatus` has been explicitly set.
  var hasRf5GhzStatus: Bool {return _storage._rf5GhzStatus != nil}
  /// Clears the value of `rf5GhzStatus`. Subsequent reads from it will return its default value.
  mutating func clearRf5GhzStatus() {_uniqueStorage()._rf5GhzStatus = nil}

  var alerts: SpaceX_API_Device_WifiAlerts {
    get {return _storage._alerts ?? SpaceX_API_Device_WifiAlerts()}
    set {_uniqueStorage()._alerts = newValue}
  }
  /// Returns true if `alerts` has been explicitly set.
  var hasAlerts: Bool {return _storage._alerts != nil}
  /// Clears the value of `alerts`. Subsequent reads from it will return its default value.
  mutating func clearAlerts() {_uniqueStorage()._alerts = nil}

  var isAviation: Bool {
    get {return _storage._isAviation}
    set {_uniqueStorage()._isAviation = newValue}
  }

  var config: SpaceX_API_Device_WifiConfig {
    get {return _storage._config ?? SpaceX_API_Device_WifiConfig()}
    set {_uniqueStorage()._config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return _storage._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {_uniqueStorage()._config = nil}

  var clients: [SpaceX_API_Device_WifiClient] {
    get {return _storage._clients}
    set {_uniqueStorage()._clients = newValue}
  }

  var hasClientIndex_p: Bool {
    get {return _storage._hasClientIndex_p}
    set {_uniqueStorage()._hasClientIndex_p = newValue}
  }

  var clientIndex: Int32 {
    get {return _storage._clientIndex}
    set {_uniqueStorage()._clientIndex = newValue}
  }

  var isAviationConformed: Bool {
    get {return _storage._isAviationConformed}
    set {_uniqueStorage()._isAviationConformed = newValue}
  }

  var radiusStats: SpaceX_API_Device_RadiusStatsMap {
    get {return _storage._radiusStats ?? SpaceX_API_Device_RadiusStatsMap()}
    set {_uniqueStorage()._radiusStats = newValue}
  }
  /// Returns true if `radiusStats` has been explicitly set.
  var hasRadiusStats: Bool {return _storage._radiusStats != nil}
  /// Clears the value of `radiusStats`. Subsequent reads from it will return its default value.
  mutating func clearRadiusStats() {_uniqueStorage()._radiusStats = nil}

  var dhcpServers: [SpaceX_API_Device_DhcpServer] {
    get {return _storage._dhcpServers}
    set {_uniqueStorage()._dhcpServers = newValue}
  }

  var poeStats: SpaceX_API_Device_PoeStats {
    get {return _storage._poeStats ?? SpaceX_API_Device_PoeStats()}
    set {_uniqueStorage()._poeStats = newValue}
  }
  /// Returns true if `poeStats` has been explicitly set.
  var hasPoeStats: Bool {return _storage._poeStats != nil}
  /// Clears the value of `poeStats`. Subsequent reads from it will return its default value.
  mutating func clearPoeStats() {_uniqueStorage()._poeStats = nil}

  var dishID: String {
    get {return _storage._dishID}
    set {_uniqueStorage()._dishID = newValue}
  }

  var utcNs: Int64 {
    get {return _storage._utcNs}
    set {_uniqueStorage()._utcNs = newValue}
  }

  var softwareUpdateStats: SpaceX_API_Device_WifiSoftwareUpdateStats {
    get {return _storage._softwareUpdateStats ?? SpaceX_API_Device_WifiSoftwareUpdateStats()}
    set {_uniqueStorage()._softwareUpdateStats = newValue}
  }
  /// Returns true if `softwareUpdateStats` has been explicitly set.
  var hasSoftwareUpdateStats: Bool {return _storage._softwareUpdateStats != nil}
  /// Clears the value of `softwareUpdateStats`. Subsequent reads from it will return its default value.
  mutating func clearSoftwareUpdateStats() {_uniqueStorage()._softwareUpdateStats = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WifiAuthenticateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var challenge: SpaceX_API_Device_SignedData {
    get {return _challenge ?? SpaceX_API_Device_SignedData()}
    set {_challenge = newValue}
  }
  /// Returns true if `challenge` has been explicitly set.
  var hasChallenge: Bool {return self._challenge != nil}
  /// Clears the value of `challenge`. Subsequent reads from it will return its default value.
  mutating func clearChallenge() {self._challenge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _challenge: SpaceX_API_Device_SignedData? = nil
}

struct SpaceX_API_Device_WifiAuthenticateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var wifi: SpaceX_API_Device_ChallengeResponse {
    get {return _wifi ?? SpaceX_API_Device_ChallengeResponse()}
    set {_wifi = newValue}
  }
  /// Returns true if `wifi` has been explicitly set.
  var hasWifi: Bool {return self._wifi != nil}
  /// Clears the value of `wifi`. Subsequent reads from it will return its default value.
  mutating func clearWifi() {self._wifi = nil}

  var dish: SpaceX_API_Device_ChallengeResponse {
    get {return _dish ?? SpaceX_API_Device_ChallengeResponse()}
    set {_dish = newValue}
  }
  /// Returns true if `dish` has been explicitly set.
  var hasDish: Bool {return self._dish != nil}
  /// Clears the value of `dish`. Subsequent reads from it will return its default value.
  mutating func clearDish() {self._dish = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _wifi: SpaceX_API_Device_ChallengeResponse? = nil
  fileprivate var _dish: SpaceX_API_Device_ChallengeResponse? = nil
}

struct SpaceX_API_Device_WifiAccountBondingEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dishID: String = String()

  var isRepeater: Bool = false

  var hardwareVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiNewPeerEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var peerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_PingMetrics: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latencyMeanMs: Float {
    get {return _storage._latencyMeanMs}
    set {_uniqueStorage()._latencyMeanMs = newValue}
  }

  var latencyStddevMs: Float {
    get {return _storage._latencyStddevMs}
    set {_uniqueStorage()._latencyStddevMs = newValue}
  }

  var latencyMeanMs5M: Float {
    get {return _storage._latencyMeanMs5M}
    set {_uniqueStorage()._latencyMeanMs5M = newValue}
  }

  var latencyMeanMs1H: Float {
    get {return _storage._latencyMeanMs1H}
    set {_uniqueStorage()._latencyMeanMs1H = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var latencyMeanMs1D: Float {
    get {return _storage._latencyMeanMs1D}
    set {_uniqueStorage()._latencyMeanMs1D = newValue}
  }

  var dropRate: Float {
    get {return _storage._dropRate}
    set {_uniqueStorage()._dropRate = newValue}
  }

  var dropRate5M: Float {
    get {return _storage._dropRate5M}
    set {_uniqueStorage()._dropRate5M = newValue}
  }

  var dropRate1H: Float {
    get {return _storage._dropRate1H}
    set {_uniqueStorage()._dropRate1H = newValue}
  }

  var dropRate1D: Float {
    get {return _storage._dropRate1D}
    set {_uniqueStorage()._dropRate1D = newValue}
  }

  var secondsSinceLastSuccess: Float {
    get {return _storage._secondsSinceLastSuccess}
    set {_uniqueStorage()._secondsSinceLastSuccess = newValue}
  }

  var secondsSinceLast1SOutage: Float {
    get {return _storage._secondsSinceLast1SOutage}
    set {_uniqueStorage()._secondsSinceLast1SOutage = newValue}
  }

  var secondsSinceLast2SOutage: Float {
    get {return _storage._secondsSinceLast2SOutage}
    set {_uniqueStorage()._secondsSinceLast2SOutage = newValue}
  }

  var secondsSinceLast5SOutage: Float {
    get {return _storage._secondsSinceLast5SOutage}
    set {_uniqueStorage()._secondsSinceLast5SOutage = newValue}
  }

  var secondsSinceLast15SOutage: Float {
    get {return _storage._secondsSinceLast15SOutage}
    set {_uniqueStorage()._secondsSinceLast15SOutage = newValue}
  }

  var secondsSinceLast60SOutage: Float {
    get {return _storage._secondsSinceLast60SOutage}
    set {_uniqueStorage()._secondsSinceLast60SOutage = newValue}
  }

  var secondsSinceLast300SOutage: Float {
    get {return _storage._secondsSinceLast300SOutage}
    set {_uniqueStorage()._secondsSinceLast300SOutage = newValue}
  }

  var happyHours1S1D: Float {
    get {return _storage._happyHours1S1D}
    set {_uniqueStorage()._happyHours1S1D = newValue}
  }

  var happyHours2S1D: Float {
    get {return _storage._happyHours2S1D}
    set {_uniqueStorage()._happyHours2S1D = newValue}
  }

  var happyHours5S1D: Float {
    get {return _storage._happyHours5S1D}
    set {_uniqueStorage()._happyHours5S1D = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WifiGetPingMetricsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetPingMetricsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var internet: SpaceX_API_Device_PingMetrics {
    get {return _internet ?? SpaceX_API_Device_PingMetrics()}
    set {_internet = newValue}
  }
  /// Returns true if `internet` has been explicitly set.
  var hasInternet: Bool {return self._internet != nil}
  /// Clears the value of `internet`. Subsequent reads from it will return its default value.
  mutating func clearInternet() {self._internet = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _internet: SpaceX_API_Device_PingMetrics? = nil
}

struct SpaceX_API_Device_WifiNetwork: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var band: SpaceX_API_Device_WifiNetwork.Band = .wifiUnknown

  var ssid: String = String()

  var channel: UInt32 = 0

  var encryptionTypeStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Band: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case wifiUnknown // = 0
    case wifi24Ghz // = 1
    case wifi5Ghz // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .wifiUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .wifiUnknown
      case 1: self = .wifi24Ghz
      case 2: self = .wifi5Ghz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .wifiUnknown: return 0
      case .wifi24Ghz: return 1
      case .wifi5Ghz: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiNetwork.Band] = [
      .wifiUnknown,
      .wifi24Ghz,
      .wifi5Ghz,
    ]

  }

  init() {}
}

struct SpaceX_API_Device_WifiPersistentStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var factoryResetButton: SpaceX_API_Device_WifiPersistentStats.Event {
    get {return _factoryResetButton ?? SpaceX_API_Device_WifiPersistentStats.Event()}
    set {_factoryResetButton = newValue}
  }
  /// Returns true if `factoryResetButton` has been explicitly set.
  var hasFactoryResetButton: Bool {return self._factoryResetButton != nil}
  /// Clears the value of `factoryResetButton`. Subsequent reads from it will return its default value.
  mutating func clearFactoryResetButton() {self._factoryResetButton = nil}

  var factoryResetPlugUnplug: SpaceX_API_Device_WifiPersistentStats.Event {
    get {return _factoryResetPlugUnplug ?? SpaceX_API_Device_WifiPersistentStats.Event()}
    set {_factoryResetPlugUnplug = newValue}
  }
  /// Returns true if `factoryResetPlugUnplug` has been explicitly set.
  var hasFactoryResetPlugUnplug: Bool {return self._factoryResetPlugUnplug != nil}
  /// Clears the value of `factoryResetPlugUnplug`. Subsequent reads from it will return its default value.
  mutating func clearFactoryResetPlugUnplug() {self._factoryResetPlugUnplug = nil}

  var factoryResetCommand: SpaceX_API_Device_WifiPersistentStats.Event {
    get {return _factoryResetCommand ?? SpaceX_API_Device_WifiPersistentStats.Event()}
    set {_factoryResetCommand = newValue}
  }
  /// Returns true if `factoryResetCommand` has been explicitly set.
  var hasFactoryResetCommand: Bool {return self._factoryResetCommand != nil}
  /// Clears the value of `factoryResetCommand`. Subsequent reads from it will return its default value.
  mutating func clearFactoryResetCommand() {self._factoryResetCommand = nil}

  var factoryResetFailedLoadWifiConfig: SpaceX_API_Device_WifiPersistentStats.Event {
    get {return _factoryResetFailedLoadWifiConfig ?? SpaceX_API_Device_WifiPersistentStats.Event()}
    set {_factoryResetFailedLoadWifiConfig = newValue}
  }
  /// Returns true if `factoryResetFailedLoadWifiConfig` has been explicitly set.
  var hasFactoryResetFailedLoadWifiConfig: Bool {return self._factoryResetFailedLoadWifiConfig != nil}
  /// Clears the value of `factoryResetFailedLoadWifiConfig`. Subsequent reads from it will return its default value.
  mutating func clearFactoryResetFailedLoadWifiConfig() {self._factoryResetFailedLoadWifiConfig = nil}

  var rebootFromSoftwareUpdate: SpaceX_API_Device_WifiPersistentStats.Event {
    get {return _rebootFromSoftwareUpdate ?? SpaceX_API_Device_WifiPersistentStats.Event()}
    set {_rebootFromSoftwareUpdate = newValue}
  }
  /// Returns true if `rebootFromSoftwareUpdate` has been explicitly set.
  var hasRebootFromSoftwareUpdate: Bool {return self._rebootFromSoftwareUpdate != nil}
  /// Clears the value of `rebootFromSoftwareUpdate`. Subsequent reads from it will return its default value.
  mutating func clearRebootFromSoftwareUpdate() {self._rebootFromSoftwareUpdate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Event: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var count: UInt32 = 0

    var lastOccurredTimestamp: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _factoryResetButton: SpaceX_API_Device_WifiPersistentStats.Event? = nil
  fileprivate var _factoryResetPlugUnplug: SpaceX_API_Device_WifiPersistentStats.Event? = nil
  fileprivate var _factoryResetCommand: SpaceX_API_Device_WifiPersistentStats.Event? = nil
  fileprivate var _factoryResetFailedLoadWifiConfig: SpaceX_API_Device_WifiPersistentStats.Event? = nil
  fileprivate var _rebootFromSoftwareUpdate: SpaceX_API_Device_WifiPersistentStats.Event? = nil
}

struct SpaceX_API_Device_WifiGetPersistentStatsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stats: SpaceX_API_Device_WifiPersistentStats {
    get {return _stats ?? SpaceX_API_Device_WifiPersistentStats()}
    set {_stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  var hasStats: Bool {return self._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  mutating func clearStats() {self._stats = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stats: SpaceX_API_Device_WifiPersistentStats? = nil
}

struct SpaceX_API_Device_RadioStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var band: SpaceX_API_Device_WifiConfig.Band = .rfUnknown

  var rxStats: SpaceX_API_Device_NetworkInterface.RxStats {
    get {return _rxStats ?? SpaceX_API_Device_NetworkInterface.RxStats()}
    set {_rxStats = newValue}
  }
  /// Returns true if `rxStats` has been explicitly set.
  var hasRxStats: Bool {return self._rxStats != nil}
  /// Clears the value of `rxStats`. Subsequent reads from it will return its default value.
  mutating func clearRxStats() {self._rxStats = nil}

  var txStats: SpaceX_API_Device_NetworkInterface.TxStats {
    get {return _txStats ?? SpaceX_API_Device_NetworkInterface.TxStats()}
    set {_txStats = newValue}
  }
  /// Returns true if `txStats` has been explicitly set.
  var hasTxStats: Bool {return self._txStats != nil}
  /// Clears the value of `txStats`. Subsequent reads from it will return its default value.
  mutating func clearTxStats() {self._txStats = nil}

  var thermalStatus: SpaceX_API_Device_RadioStats.ThermalStatus {
    get {return _thermalStatus ?? SpaceX_API_Device_RadioStats.ThermalStatus()}
    set {_thermalStatus = newValue}
  }
  /// Returns true if `thermalStatus` has been explicitly set.
  var hasThermalStatus: Bool {return self._thermalStatus != nil}
  /// Clears the value of `thermalStatus`. Subsequent reads from it will return its default value.
  mutating func clearThermalStatus() {self._thermalStatus = nil}

  var antennaStatus: SpaceX_API_Device_RadioStats.AntennaStatus {
    get {return _antennaStatus ?? SpaceX_API_Device_RadioStats.AntennaStatus()}
    set {_antennaStatus = newValue}
  }
  /// Returns true if `antennaStatus` has been explicitly set.
  var hasAntennaStatus: Bool {return self._antennaStatus != nil}
  /// Clears the value of `antennaStatus`. Subsequent reads from it will return its default value.
  mutating func clearAntennaStatus() {self._antennaStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ThermalStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var level: UInt32 = 0

    /// NOTE: This field was marked as deprecated in the .proto file.
    var temp: UInt32 = 0

    var temp2: Double = 0

    var powerReduction: UInt32 = 0

    var dutyCycle: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AntennaStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rssi1: Float = 0

    var rssi2: Float = 0

    var rssi3: Float = 0

    var rssi4: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _rxStats: SpaceX_API_Device_NetworkInterface.RxStats? = nil
  fileprivate var _txStats: SpaceX_API_Device_NetworkInterface.TxStats? = nil
  fileprivate var _thermalStatus: SpaceX_API_Device_RadioStats.ThermalStatus? = nil
  fileprivate var _antennaStatus: SpaceX_API_Device_RadioStats.AntennaStatus? = nil
}

struct SpaceX_API_Device_starlink_routers_hourly_metrics_v2: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._id ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var timestampDate: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._timestampDate ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._timestampDate = newValue}
  }
  /// Returns true if `timestampDate` has been explicitly set.
  var hasTimestampDate: Bool {return _storage._timestampDate != nil}
  /// Clears the value of `timestampDate`. Subsequent reads from it will return its default value.
  mutating func clearTimestampDate() {_uniqueStorage()._timestampDate = nil}

  var timestampHour: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._timestampHour ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._timestampHour = newValue}
  }
  /// Returns true if `timestampHour` has been explicitly set.
  var hasTimestampHour: Bool {return _storage._timestampHour != nil}
  /// Clears the value of `timestampHour`. Subsequent reads from it will return its default value.
  mutating func clearTimestampHour() {_uniqueStorage()._timestampHour = nil}

  var timestamp: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._timestamp ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var sysHwGen: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysHwGen ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysHwGen = newValue}
  }
  /// Returns true if `sysHwGen` has been explicitly set.
  var hasSysHwGen: Bool {return _storage._sysHwGen != nil}
  /// Clears the value of `sysHwGen`. Subsequent reads from it will return its default value.
  mutating func clearSysHwGen() {_uniqueStorage()._sysHwGen = nil}

  var sysSw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._sysSw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._sysSw = newValue}
  }
  /// Returns true if `sysSw` has been explicitly set.
  var hasSysSw: Bool {return _storage._sysSw != nil}
  /// Clears the value of `sysSw`. Subsequent reads from it will return its default value.
  mutating func clearSysSw() {_uniqueStorage()._sysSw = nil}

  var sysCountry: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._sysCountry ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._sysCountry = newValue}
  }
  /// Returns true if `sysCountry` has been explicitly set.
  var hasSysCountry: Bool {return _storage._sysCountry != nil}
  /// Clears the value of `sysCountry`. Subsequent reads from it will return its default value.
  mutating func clearSysCountry() {_uniqueStorage()._sysCountry = nil}

  var sysIsDev: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysIsDev ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysIsDev = newValue}
  }
  /// Returns true if `sysIsDev` has been explicitly set.
  var hasSysIsDev: Bool {return _storage._sysIsDev != nil}
  /// Clears the value of `sysIsDev`. Subsequent reads from it will return its default value.
  mutating func clearSysIsDev() {_uniqueStorage()._sysIsDev = nil}

  var sysAllocFds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysAllocFds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysAllocFds = newValue}
  }
  /// Returns true if `sysAllocFds` has been explicitly set.
  var hasSysAllocFds: Bool {return _storage._sysAllocFds != nil}
  /// Clears the value of `sysAllocFds`. Subsequent reads from it will return its default value.
  mutating func clearSysAllocFds() {_uniqueStorage()._sysAllocFds = nil}

  var sysCpuUsage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._sysCpuUsage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._sysCpuUsage = newValue}
  }
  /// Returns true if `sysCpuUsage` has been explicitly set.
  var hasSysCpuUsage: Bool {return _storage._sysCpuUsage != nil}
  /// Clears the value of `sysCpuUsage`. Subsequent reads from it will return its default value.
  mutating func clearSysCpuUsage() {_uniqueStorage()._sysCpuUsage = nil}

  var sysMemFreeKb: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._sysMemFreeKb ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._sysMemFreeKb = newValue}
  }
  /// Returns true if `sysMemFreeKb` has been explicitly set.
  var hasSysMemFreeKb: Bool {return _storage._sysMemFreeKb != nil}
  /// Clears the value of `sysMemFreeKb`. Subsequent reads from it will return its default value.
  mutating func clearSysMemFreeKb() {_uniqueStorage()._sysMemFreeKb = nil}

  var sysBootcount: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._sysBootcount ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._sysBootcount = newValue}
  }
  /// Returns true if `sysBootcount` has been explicitly set.
  var hasSysBootcount: Bool {return _storage._sysBootcount != nil}
  /// Clears the value of `sysBootcount`. Subsequent reads from it will return its default value.
  mutating func clearSysBootcount() {_uniqueStorage()._sysBootcount = nil}

  var sysPartitionsEqual: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysPartitionsEqual ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysPartitionsEqual = newValue}
  }
  /// Returns true if `sysPartitionsEqual` has been explicitly set.
  var hasSysPartitionsEqual: Bool {return _storage._sysPartitionsEqual != nil}
  /// Clears the value of `sysPartitionsEqual`. Subsequent reads from it will return its default value.
  mutating func clearSysPartitionsEqual() {_uniqueStorage()._sysPartitionsEqual = nil}

  var sysUptimeSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysUptimeSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysUptimeSeconds = newValue}
  }
  /// Returns true if `sysUptimeSeconds` has been explicitly set.
  var hasSysUptimeSeconds: Bool {return _storage._sysUptimeSeconds != nil}
  /// Clears the value of `sysUptimeSeconds`. Subsequent reads from it will return its default value.
  mutating func clearSysUptimeSeconds() {_uniqueStorage()._sysUptimeSeconds = nil}

  var sysAntiRollbackVersion: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._sysAntiRollbackVersion ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._sysAntiRollbackVersion = newValue}
  }
  /// Returns true if `sysAntiRollbackVersion` has been explicitly set.
  var hasSysAntiRollbackVersion: Bool {return _storage._sysAntiRollbackVersion != nil}
  /// Clears the value of `sysAntiRollbackVersion`. Subsequent reads from it will return its default value.
  mutating func clearSysAntiRollbackVersion() {_uniqueStorage()._sysAntiRollbackVersion = nil}

  var sysIsWitl: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysIsWitl ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysIsWitl = newValue}
  }
  /// Returns true if `sysIsWitl` has been explicitly set.
  var hasSysIsWitl: Bool {return _storage._sysIsWitl != nil}
  /// Clears the value of `sysIsWitl`. Subsequent reads from it will return its default value.
  mutating func clearSysIsWitl() {_uniqueStorage()._sysIsWitl = nil}

  var sysIsAviationConformed: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysIsAviationConformed ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysIsAviationConformed = newValue}
  }
  /// Returns true if `sysIsAviationConformed` has been explicitly set.
  var hasSysIsAviationConformed: Bool {return _storage._sysIsAviationConformed != nil}
  /// Clears the value of `sysIsAviationConformed`. Subsequent reads from it will return its default value.
  mutating func clearSysIsAviationConformed() {_uniqueStorage()._sysIsAviationConformed = nil}

  var sysUbiMaxEc: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysUbiMaxEc ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysUbiMaxEc = newValue}
  }
  /// Returns true if `sysUbiMaxEc` has been explicitly set.
  var hasSysUbiMaxEc: Bool {return _storage._sysUbiMaxEc != nil}
  /// Clears the value of `sysUbiMaxEc`. Subsequent reads from it will return its default value.
  mutating func clearSysUbiMaxEc() {_uniqueStorage()._sysUbiMaxEc = nil}

  var sysUbiBadPeb: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysUbiBadPeb ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysUbiBadPeb = newValue}
  }
  /// Returns true if `sysUbiBadPeb` has been explicitly set.
  var hasSysUbiBadPeb: Bool {return _storage._sysUbiBadPeb != nil}
  /// Clears the value of `sysUbiBadPeb`. Subsequent reads from it will return its default value.
  mutating func clearSysUbiBadPeb() {_uniqueStorage()._sysUbiBadPeb = nil}

  var sysBoardRev: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysBoardRev ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysBoardRev = newValue}
  }
  /// Returns true if `sysBoardRev` has been explicitly set.
  var hasSysBoardRev: Bool {return _storage._sysBoardRev != nil}
  /// Clears the value of `sysBoardRev`. Subsequent reads from it will return its default value.
  mutating func clearSysBoardRev() {_uniqueStorage()._sysBoardRev = nil}

  var radios2GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzChannel = newValue}
  }
  /// Returns true if `radios2GhzChannel` has been explicitly set.
  var hasRadios2GhzChannel: Bool {return _storage._radios2GhzChannel != nil}
  /// Clears the value of `radios2GhzChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzChannel() {_uniqueStorage()._radios2GhzChannel = nil}

  var radios2GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna1Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna1Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna1Rssi` has been explicitly set.
  var hasRadios2GhzAntenna1Rssi: Bool {return _storage._radios2GhzAntenna1Rssi != nil}
  /// Clears the value of `radios2GhzAntenna1Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna1Rssi() {_uniqueStorage()._radios2GhzAntenna1Rssi = nil}

  var radios2GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna2Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna2Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna2Rssi` has been explicitly set.
  var hasRadios2GhzAntenna2Rssi: Bool {return _storage._radios2GhzAntenna2Rssi != nil}
  /// Clears the value of `radios2GhzAntenna2Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna2Rssi() {_uniqueStorage()._radios2GhzAntenna2Rssi = nil}

  var radios2GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna3Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna3Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna3Rssi` has been explicitly set.
  var hasRadios2GhzAntenna3Rssi: Bool {return _storage._radios2GhzAntenna3Rssi != nil}
  /// Clears the value of `radios2GhzAntenna3Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna3Rssi() {_uniqueStorage()._radios2GhzAntenna3Rssi = nil}

  var radios2GhzAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna4Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna4Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna4Rssi` has been explicitly set.
  var hasRadios2GhzAntenna4Rssi: Bool {return _storage._radios2GhzAntenna4Rssi != nil}
  /// Clears the value of `radios2GhzAntenna4Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna4Rssi() {_uniqueStorage()._radios2GhzAntenna4Rssi = nil}

  var radios2GhzAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna1Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna1Tssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna1Tssi` has been explicitly set.
  var hasRadios2GhzAntenna1Tssi: Bool {return _storage._radios2GhzAntenna1Tssi != nil}
  /// Clears the value of `radios2GhzAntenna1Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna1Tssi() {_uniqueStorage()._radios2GhzAntenna1Tssi = nil}

  var radios2GhzAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna2Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna2Tssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna2Tssi` has been explicitly set.
  var hasRadios2GhzAntenna2Tssi: Bool {return _storage._radios2GhzAntenna2Tssi != nil}
  /// Clears the value of `radios2GhzAntenna2Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna2Tssi() {_uniqueStorage()._radios2GhzAntenna2Tssi = nil}

  var radios2GhzAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna3Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna3Tssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna3Tssi` has been explicitly set.
  var hasRadios2GhzAntenna3Tssi: Bool {return _storage._radios2GhzAntenna3Tssi != nil}
  /// Clears the value of `radios2GhzAntenna3Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna3Tssi() {_uniqueStorage()._radios2GhzAntenna3Tssi = nil}

  var radios2GhzAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna4Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna4Tssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna4Tssi` has been explicitly set.
  var hasRadios2GhzAntenna4Tssi: Bool {return _storage._radios2GhzAntenna4Tssi != nil}
  /// Clears the value of `radios2GhzAntenna4Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna4Tssi() {_uniqueStorage()._radios2GhzAntenna4Tssi = nil}

  var radios2GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzIfaceCount ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzIfaceCount = newValue}
  }
  /// Returns true if `radios2GhzIfaceCount` has been explicitly set.
  var hasRadios2GhzIfaceCount: Bool {return _storage._radios2GhzIfaceCount != nil}
  /// Clears the value of `radios2GhzIfaceCount`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzIfaceCount() {_uniqueStorage()._radios2GhzIfaceCount = nil}

  var radios2GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzChanBusyFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzChanBusyFraction = newValue}
  }
  /// Returns true if `radios2GhzChanBusyFraction` has been explicitly set.
  var hasRadios2GhzChanBusyFraction: Bool {return _storage._radios2GhzChanBusyFraction != nil}
  /// Clears the value of `radios2GhzChanBusyFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzChanBusyFraction() {_uniqueStorage()._radios2GhzChanBusyFraction = nil}

  var radios2GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzEdccaFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzEdccaFraction = newValue}
  }
  /// Returns true if `radios2GhzEdccaFraction` has been explicitly set.
  var hasRadios2GhzEdccaFraction: Bool {return _storage._radios2GhzEdccaFraction != nil}
  /// Clears the value of `radios2GhzEdccaFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzEdccaFraction() {_uniqueStorage()._radios2GhzEdccaFraction = nil}

  var radios2GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzOverlappingBssFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzOverlappingBssFraction = newValue}
  }
  /// Returns true if `radios2GhzOverlappingBssFraction` has been explicitly set.
  var hasRadios2GhzOverlappingBssFraction: Bool {return _storage._radios2GhzOverlappingBssFraction != nil}
  /// Clears the value of `radios2GhzOverlappingBssFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzOverlappingBssFraction() {_uniqueStorage()._radios2GhzOverlappingBssFraction = nil}

  var radios2GhzRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzRxBytes = newValue}
  }
  /// Returns true if `radios2GhzRxBytes` has been explicitly set.
  var hasRadios2GhzRxBytes: Bool {return _storage._radios2GhzRxBytes != nil}
  /// Clears the value of `radios2GhzRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxBytes() {_uniqueStorage()._radios2GhzRxBytes = nil}

  var radios2GhzRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzRxPackets = newValue}
  }
  /// Returns true if `radios2GhzRxPackets` has been explicitly set.
  var hasRadios2GhzRxPackets: Bool {return _storage._radios2GhzRxPackets != nil}
  /// Clears the value of `radios2GhzRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxPackets() {_uniqueStorage()._radios2GhzRxPackets = nil}

  var radios2GhzRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzRxErrors = newValue}
  }
  /// Returns true if `radios2GhzRxErrors` has been explicitly set.
  var hasRadios2GhzRxErrors: Bool {return _storage._radios2GhzRxErrors != nil}
  /// Clears the value of `radios2GhzRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxErrors() {_uniqueStorage()._radios2GhzRxErrors = nil}

  var radios2GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzRxFrameErrors = newValue}
  }
  /// Returns true if `radios2GhzRxFrameErrors` has been explicitly set.
  var hasRadios2GhzRxFrameErrors: Bool {return _storage._radios2GhzRxFrameErrors != nil}
  /// Clears the value of `radios2GhzRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxFrameErrors() {_uniqueStorage()._radios2GhzRxFrameErrors = nil}

  var radios2GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzRxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzRxPacketErrorRate = newValue}
  }
  /// Returns true if `radios2GhzRxPacketErrorRate` has been explicitly set.
  var hasRadios2GhzRxPacketErrorRate: Bool {return _storage._radios2GhzRxPacketErrorRate != nil}
  /// Clears the value of `radios2GhzRxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxPacketErrorRate() {_uniqueStorage()._radios2GhzRxPacketErrorRate = nil}

  var radios2GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzRxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzRxAirtimeFraction = newValue}
  }
  /// Returns true if `radios2GhzRxAirtimeFraction` has been explicitly set.
  var hasRadios2GhzRxAirtimeFraction: Bool {return _storage._radios2GhzRxAirtimeFraction != nil}
  /// Clears the value of `radios2GhzRxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxAirtimeFraction() {_uniqueStorage()._radios2GhzRxAirtimeFraction = nil}

  var radios2GhzTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzTxBytes = newValue}
  }
  /// Returns true if `radios2GhzTxBytes` has been explicitly set.
  var hasRadios2GhzTxBytes: Bool {return _storage._radios2GhzTxBytes != nil}
  /// Clears the value of `radios2GhzTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxBytes() {_uniqueStorage()._radios2GhzTxBytes = nil}

  var radios2GhzTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzTxPackets = newValue}
  }
  /// Returns true if `radios2GhzTxPackets` has been explicitly set.
  var hasRadios2GhzTxPackets: Bool {return _storage._radios2GhzTxPackets != nil}
  /// Clears the value of `radios2GhzTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxPackets() {_uniqueStorage()._radios2GhzTxPackets = nil}

  var radios2GhzTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios2GhzTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios2GhzTxErrors = newValue}
  }
  /// Returns true if `radios2GhzTxErrors` has been explicitly set.
  var hasRadios2GhzTxErrors: Bool {return _storage._radios2GhzTxErrors != nil}
  /// Clears the value of `radios2GhzTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxErrors() {_uniqueStorage()._radios2GhzTxErrors = nil}

  var radios2GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzTxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzTxPacketErrorRate = newValue}
  }
  /// Returns true if `radios2GhzTxPacketErrorRate` has been explicitly set.
  var hasRadios2GhzTxPacketErrorRate: Bool {return _storage._radios2GhzTxPacketErrorRate != nil}
  /// Clears the value of `radios2GhzTxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxPacketErrorRate() {_uniqueStorage()._radios2GhzTxPacketErrorRate = nil}

  var radios2GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzTxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzTxAirtimeFraction = newValue}
  }
  /// Returns true if `radios2GhzTxAirtimeFraction` has been explicitly set.
  var hasRadios2GhzTxAirtimeFraction: Bool {return _storage._radios2GhzTxAirtimeFraction != nil}
  /// Clears the value of `radios2GhzTxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxAirtimeFraction() {_uniqueStorage()._radios2GhzTxAirtimeFraction = nil}

  var radios5GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzChannel = newValue}
  }
  /// Returns true if `radios5GhzChannel` has been explicitly set.
  var hasRadios5GhzChannel: Bool {return _storage._radios5GhzChannel != nil}
  /// Clears the value of `radios5GhzChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzChannel() {_uniqueStorage()._radios5GhzChannel = nil}

  var radios5GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna1Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna1Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna1Rssi` has been explicitly set.
  var hasRadios5GhzAntenna1Rssi: Bool {return _storage._radios5GhzAntenna1Rssi != nil}
  /// Clears the value of `radios5GhzAntenna1Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna1Rssi() {_uniqueStorage()._radios5GhzAntenna1Rssi = nil}

  var radios5GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna2Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna2Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna2Rssi` has been explicitly set.
  var hasRadios5GhzAntenna2Rssi: Bool {return _storage._radios5GhzAntenna2Rssi != nil}
  /// Clears the value of `radios5GhzAntenna2Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna2Rssi() {_uniqueStorage()._radios5GhzAntenna2Rssi = nil}

  var radios5GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna3Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna3Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna3Rssi` has been explicitly set.
  var hasRadios5GhzAntenna3Rssi: Bool {return _storage._radios5GhzAntenna3Rssi != nil}
  /// Clears the value of `radios5GhzAntenna3Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna3Rssi() {_uniqueStorage()._radios5GhzAntenna3Rssi = nil}

  var radios5GhzAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna4Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna4Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna4Rssi` has been explicitly set.
  var hasRadios5GhzAntenna4Rssi: Bool {return _storage._radios5GhzAntenna4Rssi != nil}
  /// Clears the value of `radios5GhzAntenna4Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna4Rssi() {_uniqueStorage()._radios5GhzAntenna4Rssi = nil}

  var radios5GhzAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna1Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna1Tssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna1Tssi` has been explicitly set.
  var hasRadios5GhzAntenna1Tssi: Bool {return _storage._radios5GhzAntenna1Tssi != nil}
  /// Clears the value of `radios5GhzAntenna1Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna1Tssi() {_uniqueStorage()._radios5GhzAntenna1Tssi = nil}

  var radios5GhzAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna2Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna2Tssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna2Tssi` has been explicitly set.
  var hasRadios5GhzAntenna2Tssi: Bool {return _storage._radios5GhzAntenna2Tssi != nil}
  /// Clears the value of `radios5GhzAntenna2Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna2Tssi() {_uniqueStorage()._radios5GhzAntenna2Tssi = nil}

  var radios5GhzAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna3Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna3Tssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna3Tssi` has been explicitly set.
  var hasRadios5GhzAntenna3Tssi: Bool {return _storage._radios5GhzAntenna3Tssi != nil}
  /// Clears the value of `radios5GhzAntenna3Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna3Tssi() {_uniqueStorage()._radios5GhzAntenna3Tssi = nil}

  var radios5GhzAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna4Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna4Tssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna4Tssi` has been explicitly set.
  var hasRadios5GhzAntenna4Tssi: Bool {return _storage._radios5GhzAntenna4Tssi != nil}
  /// Clears the value of `radios5GhzAntenna4Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna4Tssi() {_uniqueStorage()._radios5GhzAntenna4Tssi = nil}

  var radios5GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzIfaceCount ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzIfaceCount = newValue}
  }
  /// Returns true if `radios5GhzIfaceCount` has been explicitly set.
  var hasRadios5GhzIfaceCount: Bool {return _storage._radios5GhzIfaceCount != nil}
  /// Clears the value of `radios5GhzIfaceCount`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzIfaceCount() {_uniqueStorage()._radios5GhzIfaceCount = nil}

  var radios5GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzChanBusyFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzChanBusyFraction = newValue}
  }
  /// Returns true if `radios5GhzChanBusyFraction` has been explicitly set.
  var hasRadios5GhzChanBusyFraction: Bool {return _storage._radios5GhzChanBusyFraction != nil}
  /// Clears the value of `radios5GhzChanBusyFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzChanBusyFraction() {_uniqueStorage()._radios5GhzChanBusyFraction = nil}

  var radios5GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzEdccaFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzEdccaFraction = newValue}
  }
  /// Returns true if `radios5GhzEdccaFraction` has been explicitly set.
  var hasRadios5GhzEdccaFraction: Bool {return _storage._radios5GhzEdccaFraction != nil}
  /// Clears the value of `radios5GhzEdccaFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzEdccaFraction() {_uniqueStorage()._radios5GhzEdccaFraction = nil}

  var radios5GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzOverlappingBssFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzOverlappingBssFraction = newValue}
  }
  /// Returns true if `radios5GhzOverlappingBssFraction` has been explicitly set.
  var hasRadios5GhzOverlappingBssFraction: Bool {return _storage._radios5GhzOverlappingBssFraction != nil}
  /// Clears the value of `radios5GhzOverlappingBssFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzOverlappingBssFraction() {_uniqueStorage()._radios5GhzOverlappingBssFraction = nil}

  var radios5GhzRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzRxBytes = newValue}
  }
  /// Returns true if `radios5GhzRxBytes` has been explicitly set.
  var hasRadios5GhzRxBytes: Bool {return _storage._radios5GhzRxBytes != nil}
  /// Clears the value of `radios5GhzRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxBytes() {_uniqueStorage()._radios5GhzRxBytes = nil}

  var radios5GhzRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzRxPackets = newValue}
  }
  /// Returns true if `radios5GhzRxPackets` has been explicitly set.
  var hasRadios5GhzRxPackets: Bool {return _storage._radios5GhzRxPackets != nil}
  /// Clears the value of `radios5GhzRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxPackets() {_uniqueStorage()._radios5GhzRxPackets = nil}

  var radios5GhzRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzRxErrors = newValue}
  }
  /// Returns true if `radios5GhzRxErrors` has been explicitly set.
  var hasRadios5GhzRxErrors: Bool {return _storage._radios5GhzRxErrors != nil}
  /// Clears the value of `radios5GhzRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxErrors() {_uniqueStorage()._radios5GhzRxErrors = nil}

  var radios5GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzRxFrameErrors = newValue}
  }
  /// Returns true if `radios5GhzRxFrameErrors` has been explicitly set.
  var hasRadios5GhzRxFrameErrors: Bool {return _storage._radios5GhzRxFrameErrors != nil}
  /// Clears the value of `radios5GhzRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxFrameErrors() {_uniqueStorage()._radios5GhzRxFrameErrors = nil}

  var radios5GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzRxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzRxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzRxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzRxPacketErrorRate: Bool {return _storage._radios5GhzRxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzRxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxPacketErrorRate() {_uniqueStorage()._radios5GhzRxPacketErrorRate = nil}

  var radios5GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzRxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzRxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzRxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzRxAirtimeFraction: Bool {return _storage._radios5GhzRxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzRxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxAirtimeFraction() {_uniqueStorage()._radios5GhzRxAirtimeFraction = nil}

  var radios5GhzTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzTxBytes = newValue}
  }
  /// Returns true if `radios5GhzTxBytes` has been explicitly set.
  var hasRadios5GhzTxBytes: Bool {return _storage._radios5GhzTxBytes != nil}
  /// Clears the value of `radios5GhzTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxBytes() {_uniqueStorage()._radios5GhzTxBytes = nil}

  var radios5GhzTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzTxPackets = newValue}
  }
  /// Returns true if `radios5GhzTxPackets` has been explicitly set.
  var hasRadios5GhzTxPackets: Bool {return _storage._radios5GhzTxPackets != nil}
  /// Clears the value of `radios5GhzTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxPackets() {_uniqueStorage()._radios5GhzTxPackets = nil}

  var radios5GhzTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzTxErrors = newValue}
  }
  /// Returns true if `radios5GhzTxErrors` has been explicitly set.
  var hasRadios5GhzTxErrors: Bool {return _storage._radios5GhzTxErrors != nil}
  /// Clears the value of `radios5GhzTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxErrors() {_uniqueStorage()._radios5GhzTxErrors = nil}

  var radios5GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzTxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzTxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzTxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzTxPacketErrorRate: Bool {return _storage._radios5GhzTxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzTxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxPacketErrorRate() {_uniqueStorage()._radios5GhzTxPacketErrorRate = nil}

  var radios5GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzTxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzTxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzTxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzTxAirtimeFraction: Bool {return _storage._radios5GhzTxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzTxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxAirtimeFraction() {_uniqueStorage()._radios5GhzTxAirtimeFraction = nil}

  var radios5GhzHighChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzHighChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzHighChannel = newValue}
  }
  /// Returns true if `radios5GhzHighChannel` has been explicitly set.
  var hasRadios5GhzHighChannel: Bool {return _storage._radios5GhzHighChannel != nil}
  /// Clears the value of `radios5GhzHighChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighChannel() {_uniqueStorage()._radios5GhzHighChannel = nil}

  var radios5GhzHighAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna1Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna1Rssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna1Rssi` has been explicitly set.
  var hasRadios5GhzHighAntenna1Rssi: Bool {return _storage._radios5GhzHighAntenna1Rssi != nil}
  /// Clears the value of `radios5GhzHighAntenna1Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna1Rssi() {_uniqueStorage()._radios5GhzHighAntenna1Rssi = nil}

  var radios5GhzHighAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna2Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna2Rssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna2Rssi` has been explicitly set.
  var hasRadios5GhzHighAntenna2Rssi: Bool {return _storage._radios5GhzHighAntenna2Rssi != nil}
  /// Clears the value of `radios5GhzHighAntenna2Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna2Rssi() {_uniqueStorage()._radios5GhzHighAntenna2Rssi = nil}

  var radios5GhzHighAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna3Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna3Rssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna3Rssi` has been explicitly set.
  var hasRadios5GhzHighAntenna3Rssi: Bool {return _storage._radios5GhzHighAntenna3Rssi != nil}
  /// Clears the value of `radios5GhzHighAntenna3Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna3Rssi() {_uniqueStorage()._radios5GhzHighAntenna3Rssi = nil}

  var radios5GhzHighAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna4Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna4Rssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna4Rssi` has been explicitly set.
  var hasRadios5GhzHighAntenna4Rssi: Bool {return _storage._radios5GhzHighAntenna4Rssi != nil}
  /// Clears the value of `radios5GhzHighAntenna4Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna4Rssi() {_uniqueStorage()._radios5GhzHighAntenna4Rssi = nil}

  var radios5GhzHighAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna1Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna1Tssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna1Tssi` has been explicitly set.
  var hasRadios5GhzHighAntenna1Tssi: Bool {return _storage._radios5GhzHighAntenna1Tssi != nil}
  /// Clears the value of `radios5GhzHighAntenna1Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna1Tssi() {_uniqueStorage()._radios5GhzHighAntenna1Tssi = nil}

  var radios5GhzHighAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna2Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna2Tssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna2Tssi` has been explicitly set.
  var hasRadios5GhzHighAntenna2Tssi: Bool {return _storage._radios5GhzHighAntenna2Tssi != nil}
  /// Clears the value of `radios5GhzHighAntenna2Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna2Tssi() {_uniqueStorage()._radios5GhzHighAntenna2Tssi = nil}

  var radios5GhzHighAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna3Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna3Tssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna3Tssi` has been explicitly set.
  var hasRadios5GhzHighAntenna3Tssi: Bool {return _storage._radios5GhzHighAntenna3Tssi != nil}
  /// Clears the value of `radios5GhzHighAntenna3Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna3Tssi() {_uniqueStorage()._radios5GhzHighAntenna3Tssi = nil}

  var radios5GhzHighAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighAntenna4Tssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighAntenna4Tssi = newValue}
  }
  /// Returns true if `radios5GhzHighAntenna4Tssi` has been explicitly set.
  var hasRadios5GhzHighAntenna4Tssi: Bool {return _storage._radios5GhzHighAntenna4Tssi != nil}
  /// Clears the value of `radios5GhzHighAntenna4Tssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighAntenna4Tssi() {_uniqueStorage()._radios5GhzHighAntenna4Tssi = nil}

  var radios5GhzHighIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzHighIfaceCount ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzHighIfaceCount = newValue}
  }
  /// Returns true if `radios5GhzHighIfaceCount` has been explicitly set.
  var hasRadios5GhzHighIfaceCount: Bool {return _storage._radios5GhzHighIfaceCount != nil}
  /// Clears the value of `radios5GhzHighIfaceCount`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighIfaceCount() {_uniqueStorage()._radios5GhzHighIfaceCount = nil}

  var radios5GhzHighChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighChanBusyFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighChanBusyFraction = newValue}
  }
  /// Returns true if `radios5GhzHighChanBusyFraction` has been explicitly set.
  var hasRadios5GhzHighChanBusyFraction: Bool {return _storage._radios5GhzHighChanBusyFraction != nil}
  /// Clears the value of `radios5GhzHighChanBusyFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighChanBusyFraction() {_uniqueStorage()._radios5GhzHighChanBusyFraction = nil}

  var radios5GhzHighEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighEdccaFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighEdccaFraction = newValue}
  }
  /// Returns true if `radios5GhzHighEdccaFraction` has been explicitly set.
  var hasRadios5GhzHighEdccaFraction: Bool {return _storage._radios5GhzHighEdccaFraction != nil}
  /// Clears the value of `radios5GhzHighEdccaFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighEdccaFraction() {_uniqueStorage()._radios5GhzHighEdccaFraction = nil}

  var radios5GhzHighOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighOverlappingBssFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighOverlappingBssFraction = newValue}
  }
  /// Returns true if `radios5GhzHighOverlappingBssFraction` has been explicitly set.
  var hasRadios5GhzHighOverlappingBssFraction: Bool {return _storage._radios5GhzHighOverlappingBssFraction != nil}
  /// Clears the value of `radios5GhzHighOverlappingBssFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighOverlappingBssFraction() {_uniqueStorage()._radios5GhzHighOverlappingBssFraction = nil}

  var radios5GhzHighRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighRxBytes = newValue}
  }
  /// Returns true if `radios5GhzHighRxBytes` has been explicitly set.
  var hasRadios5GhzHighRxBytes: Bool {return _storage._radios5GhzHighRxBytes != nil}
  /// Clears the value of `radios5GhzHighRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxBytes() {_uniqueStorage()._radios5GhzHighRxBytes = nil}

  var radios5GhzHighRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighRxPackets = newValue}
  }
  /// Returns true if `radios5GhzHighRxPackets` has been explicitly set.
  var hasRadios5GhzHighRxPackets: Bool {return _storage._radios5GhzHighRxPackets != nil}
  /// Clears the value of `radios5GhzHighRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxPackets() {_uniqueStorage()._radios5GhzHighRxPackets = nil}

  var radios5GhzHighRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighRxErrors = newValue}
  }
  /// Returns true if `radios5GhzHighRxErrors` has been explicitly set.
  var hasRadios5GhzHighRxErrors: Bool {return _storage._radios5GhzHighRxErrors != nil}
  /// Clears the value of `radios5GhzHighRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxErrors() {_uniqueStorage()._radios5GhzHighRxErrors = nil}

  var radios5GhzHighRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighRxFrameErrors = newValue}
  }
  /// Returns true if `radios5GhzHighRxFrameErrors` has been explicitly set.
  var hasRadios5GhzHighRxFrameErrors: Bool {return _storage._radios5GhzHighRxFrameErrors != nil}
  /// Clears the value of `radios5GhzHighRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxFrameErrors() {_uniqueStorage()._radios5GhzHighRxFrameErrors = nil}

  var radios5GhzHighRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighRxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighRxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzHighRxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzHighRxPacketErrorRate: Bool {return _storage._radios5GhzHighRxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzHighRxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxPacketErrorRate() {_uniqueStorage()._radios5GhzHighRxPacketErrorRate = nil}

  var radios5GhzHighRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighRxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighRxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzHighRxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzHighRxAirtimeFraction: Bool {return _storage._radios5GhzHighRxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzHighRxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighRxAirtimeFraction() {_uniqueStorage()._radios5GhzHighRxAirtimeFraction = nil}

  var radios5GhzHighTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighTxBytes = newValue}
  }
  /// Returns true if `radios5GhzHighTxBytes` has been explicitly set.
  var hasRadios5GhzHighTxBytes: Bool {return _storage._radios5GhzHighTxBytes != nil}
  /// Clears the value of `radios5GhzHighTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighTxBytes() {_uniqueStorage()._radios5GhzHighTxBytes = nil}

  var radios5GhzHighTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighTxPackets = newValue}
  }
  /// Returns true if `radios5GhzHighTxPackets` has been explicitly set.
  var hasRadios5GhzHighTxPackets: Bool {return _storage._radios5GhzHighTxPackets != nil}
  /// Clears the value of `radios5GhzHighTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighTxPackets() {_uniqueStorage()._radios5GhzHighTxPackets = nil}

  var radios5GhzHighTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._radios5GhzHighTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._radios5GhzHighTxErrors = newValue}
  }
  /// Returns true if `radios5GhzHighTxErrors` has been explicitly set.
  var hasRadios5GhzHighTxErrors: Bool {return _storage._radios5GhzHighTxErrors != nil}
  /// Clears the value of `radios5GhzHighTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighTxErrors() {_uniqueStorage()._radios5GhzHighTxErrors = nil}

  var radios5GhzHighTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighTxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighTxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzHighTxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzHighTxPacketErrorRate: Bool {return _storage._radios5GhzHighTxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzHighTxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighTxPacketErrorRate() {_uniqueStorage()._radios5GhzHighTxPacketErrorRate = nil}

  var radios5GhzHighTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighTxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighTxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzHighTxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzHighTxAirtimeFraction: Bool {return _storage._radios5GhzHighTxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzHighTxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighTxAirtimeFraction() {_uniqueStorage()._radios5GhzHighTxAirtimeFraction = nil}

  var radios2GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzThermalTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzThermalTemp = newValue}
  }
  /// Returns true if `radios2GhzThermalTemp` has been explicitly set.
  var hasRadios2GhzThermalTemp: Bool {return _storage._radios2GhzThermalTemp != nil}
  /// Clears the value of `radios2GhzThermalTemp`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalTemp() {_uniqueStorage()._radios2GhzThermalTemp = nil}

  var radios5GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzThermalTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzThermalTemp = newValue}
  }
  /// Returns true if `radios5GhzThermalTemp` has been explicitly set.
  var hasRadios5GhzThermalTemp: Bool {return _storage._radios5GhzThermalTemp != nil}
  /// Clears the value of `radios5GhzThermalTemp`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalTemp() {_uniqueStorage()._radios5GhzThermalTemp = nil}

  var radios5GhzHighThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighThermalTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighThermalTemp = newValue}
  }
  /// Returns true if `radios5GhzHighThermalTemp` has been explicitly set.
  var hasRadios5GhzHighThermalTemp: Bool {return _storage._radios5GhzHighThermalTemp != nil}
  /// Clears the value of `radios5GhzHighThermalTemp`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighThermalTemp() {_uniqueStorage()._radios5GhzHighThermalTemp = nil}

  var radios2GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzThermalDutyCycle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzThermalDutyCycle = newValue}
  }
  /// Returns true if `radios2GhzThermalDutyCycle` has been explicitly set.
  var hasRadios2GhzThermalDutyCycle: Bool {return _storage._radios2GhzThermalDutyCycle != nil}
  /// Clears the value of `radios2GhzThermalDutyCycle`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalDutyCycle() {_uniqueStorage()._radios2GhzThermalDutyCycle = nil}

  var radios5GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzThermalDutyCycle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzThermalDutyCycle = newValue}
  }
  /// Returns true if `radios5GhzThermalDutyCycle` has been explicitly set.
  var hasRadios5GhzThermalDutyCycle: Bool {return _storage._radios5GhzThermalDutyCycle != nil}
  /// Clears the value of `radios5GhzThermalDutyCycle`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalDutyCycle() {_uniqueStorage()._radios5GhzThermalDutyCycle = nil}

  var radios5GhzHighThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzHighThermalDutyCycle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzHighThermalDutyCycle = newValue}
  }
  /// Returns true if `radios5GhzHighThermalDutyCycle` has been explicitly set.
  var hasRadios5GhzHighThermalDutyCycle: Bool {return _storage._radios5GhzHighThermalDutyCycle != nil}
  /// Clears the value of `radios5GhzHighThermalDutyCycle`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighThermalDutyCycle() {_uniqueStorage()._radios5GhzHighThermalDutyCycle = nil}

  var radios2GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzThermalThrottledSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzThermalThrottledSeconds = newValue}
  }
  /// Returns true if `radios2GhzThermalThrottledSeconds` has been explicitly set.
  var hasRadios2GhzThermalThrottledSeconds: Bool {return _storage._radios2GhzThermalThrottledSeconds != nil}
  /// Clears the value of `radios2GhzThermalThrottledSeconds`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalThrottledSeconds() {_uniqueStorage()._radios2GhzThermalThrottledSeconds = nil}

  var radios5GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzThermalThrottledSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzThermalThrottledSeconds = newValue}
  }
  /// Returns true if `radios5GhzThermalThrottledSeconds` has been explicitly set.
  var hasRadios5GhzThermalThrottledSeconds: Bool {return _storage._radios5GhzThermalThrottledSeconds != nil}
  /// Clears the value of `radios5GhzThermalThrottledSeconds`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalThrottledSeconds() {_uniqueStorage()._radios5GhzThermalThrottledSeconds = nil}

  var radios5GhzHighThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzHighThermalThrottledSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzHighThermalThrottledSeconds = newValue}
  }
  /// Returns true if `radios5GhzHighThermalThrottledSeconds` has been explicitly set.
  var hasRadios5GhzHighThermalThrottledSeconds: Bool {return _storage._radios5GhzHighThermalThrottledSeconds != nil}
  /// Clears the value of `radios5GhzHighThermalThrottledSeconds`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzHighThermalThrottledSeconds() {_uniqueStorage()._radios5GhzHighThermalThrottledSeconds = nil}

  var boardTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._boardTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._boardTemp = newValue}
  }
  /// Returns true if `boardTemp` has been explicitly set.
  var hasBoardTemp: Bool {return _storage._boardTemp != nil}
  /// Clears the value of `boardTemp`. Subsequent reads from it will return its default value.
  mutating func clearBoardTemp() {_uniqueStorage()._boardTemp = nil}

  var poeMcuDieTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._poeMcuDieTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._poeMcuDieTemp = newValue}
  }
  /// Returns true if `poeMcuDieTemp` has been explicitly set.
  var hasPoeMcuDieTemp: Bool {return _storage._poeMcuDieTemp != nil}
  /// Clears the value of `poeMcuDieTemp`. Subsequent reads from it will return its default value.
  mutating func clearPoeMcuDieTemp() {_uniqueStorage()._poeMcuDieTemp = nil}

  var ifacesLanEthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthRxBytes = newValue}
  }
  /// Returns true if `ifacesLanEthRxBytes` has been explicitly set.
  var hasIfacesLanEthRxBytes: Bool {return _storage._ifacesLanEthRxBytes != nil}
  /// Clears the value of `ifacesLanEthRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxBytes() {_uniqueStorage()._ifacesLanEthRxBytes = nil}

  var ifacesLanEthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthRxPackets = newValue}
  }
  /// Returns true if `ifacesLanEthRxPackets` has been explicitly set.
  var hasIfacesLanEthRxPackets: Bool {return _storage._ifacesLanEthRxPackets != nil}
  /// Clears the value of `ifacesLanEthRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxPackets() {_uniqueStorage()._ifacesLanEthRxPackets = nil}

  var ifacesLanEthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthRxErrors = newValue}
  }
  /// Returns true if `ifacesLanEthRxErrors` has been explicitly set.
  var hasIfacesLanEthRxErrors: Bool {return _storage._ifacesLanEthRxErrors != nil}
  /// Clears the value of `ifacesLanEthRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxErrors() {_uniqueStorage()._ifacesLanEthRxErrors = nil}

  var ifacesLanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthRxFrameErrors = newValue}
  }
  /// Returns true if `ifacesLanEthRxFrameErrors` has been explicitly set.
  var hasIfacesLanEthRxFrameErrors: Bool {return _storage._ifacesLanEthRxFrameErrors != nil}
  /// Clears the value of `ifacesLanEthRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxFrameErrors() {_uniqueStorage()._ifacesLanEthRxFrameErrors = nil}

  var ifacesLanEthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthTxBytes = newValue}
  }
  /// Returns true if `ifacesLanEthTxBytes` has been explicitly set.
  var hasIfacesLanEthTxBytes: Bool {return _storage._ifacesLanEthTxBytes != nil}
  /// Clears the value of `ifacesLanEthTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxBytes() {_uniqueStorage()._ifacesLanEthTxBytes = nil}

  var ifacesLanEthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthTxPackets = newValue}
  }
  /// Returns true if `ifacesLanEthTxPackets` has been explicitly set.
  var hasIfacesLanEthTxPackets: Bool {return _storage._ifacesLanEthTxPackets != nil}
  /// Clears the value of `ifacesLanEthTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxPackets() {_uniqueStorage()._ifacesLanEthTxPackets = nil}

  var ifacesLanEthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLanEthTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLanEthTxErrors = newValue}
  }
  /// Returns true if `ifacesLanEthTxErrors` has been explicitly set.
  var hasIfacesLanEthTxErrors: Bool {return _storage._ifacesLanEthTxErrors != nil}
  /// Clears the value of `ifacesLanEthTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxErrors() {_uniqueStorage()._ifacesLanEthTxErrors = nil}

  var ifacesLan1EthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthRxBytes = newValue}
  }
  /// Returns true if `ifacesLan1EthRxBytes` has been explicitly set.
  var hasIfacesLan1EthRxBytes: Bool {return _storage._ifacesLan1EthRxBytes != nil}
  /// Clears the value of `ifacesLan1EthRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthRxBytes() {_uniqueStorage()._ifacesLan1EthRxBytes = nil}

  var ifacesLan1EthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthRxPackets = newValue}
  }
  /// Returns true if `ifacesLan1EthRxPackets` has been explicitly set.
  var hasIfacesLan1EthRxPackets: Bool {return _storage._ifacesLan1EthRxPackets != nil}
  /// Clears the value of `ifacesLan1EthRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthRxPackets() {_uniqueStorage()._ifacesLan1EthRxPackets = nil}

  var ifacesLan1EthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthRxErrors = newValue}
  }
  /// Returns true if `ifacesLan1EthRxErrors` has been explicitly set.
  var hasIfacesLan1EthRxErrors: Bool {return _storage._ifacesLan1EthRxErrors != nil}
  /// Clears the value of `ifacesLan1EthRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthRxErrors() {_uniqueStorage()._ifacesLan1EthRxErrors = nil}

  var ifacesLan1EthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthRxFrameErrors = newValue}
  }
  /// Returns true if `ifacesLan1EthRxFrameErrors` has been explicitly set.
  var hasIfacesLan1EthRxFrameErrors: Bool {return _storage._ifacesLan1EthRxFrameErrors != nil}
  /// Clears the value of `ifacesLan1EthRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthRxFrameErrors() {_uniqueStorage()._ifacesLan1EthRxFrameErrors = nil}

  var ifacesLan1EthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthTxBytes = newValue}
  }
  /// Returns true if `ifacesLan1EthTxBytes` has been explicitly set.
  var hasIfacesLan1EthTxBytes: Bool {return _storage._ifacesLan1EthTxBytes != nil}
  /// Clears the value of `ifacesLan1EthTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthTxBytes() {_uniqueStorage()._ifacesLan1EthTxBytes = nil}

  var ifacesLan1EthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthTxPackets = newValue}
  }
  /// Returns true if `ifacesLan1EthTxPackets` has been explicitly set.
  var hasIfacesLan1EthTxPackets: Bool {return _storage._ifacesLan1EthTxPackets != nil}
  /// Clears the value of `ifacesLan1EthTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthTxPackets() {_uniqueStorage()._ifacesLan1EthTxPackets = nil}

  var ifacesLan1EthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesLan1EthTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesLan1EthTxErrors = newValue}
  }
  /// Returns true if `ifacesLan1EthTxErrors` has been explicitly set.
  var hasIfacesLan1EthTxErrors: Bool {return _storage._ifacesLan1EthTxErrors != nil}
  /// Clears the value of `ifacesLan1EthTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLan1EthTxErrors() {_uniqueStorage()._ifacesLan1EthTxErrors = nil}

  var ifacesWanEthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthRxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthRxBytes = newValue}
  }
  /// Returns true if `ifacesWanEthRxBytes` has been explicitly set.
  var hasIfacesWanEthRxBytes: Bool {return _storage._ifacesWanEthRxBytes != nil}
  /// Clears the value of `ifacesWanEthRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxBytes() {_uniqueStorage()._ifacesWanEthRxBytes = nil}

  var ifacesWanEthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthRxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthRxPackets = newValue}
  }
  /// Returns true if `ifacesWanEthRxPackets` has been explicitly set.
  var hasIfacesWanEthRxPackets: Bool {return _storage._ifacesWanEthRxPackets != nil}
  /// Clears the value of `ifacesWanEthRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxPackets() {_uniqueStorage()._ifacesWanEthRxPackets = nil}

  var ifacesWanEthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthRxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthRxErrors = newValue}
  }
  /// Returns true if `ifacesWanEthRxErrors` has been explicitly set.
  var hasIfacesWanEthRxErrors: Bool {return _storage._ifacesWanEthRxErrors != nil}
  /// Clears the value of `ifacesWanEthRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxErrors() {_uniqueStorage()._ifacesWanEthRxErrors = nil}

  var ifacesWanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthRxFrameErrors = newValue}
  }
  /// Returns true if `ifacesWanEthRxFrameErrors` has been explicitly set.
  var hasIfacesWanEthRxFrameErrors: Bool {return _storage._ifacesWanEthRxFrameErrors != nil}
  /// Clears the value of `ifacesWanEthRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxFrameErrors() {_uniqueStorage()._ifacesWanEthRxFrameErrors = nil}

  var ifacesWanEthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthTxBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthTxBytes = newValue}
  }
  /// Returns true if `ifacesWanEthTxBytes` has been explicitly set.
  var hasIfacesWanEthTxBytes: Bool {return _storage._ifacesWanEthTxBytes != nil}
  /// Clears the value of `ifacesWanEthTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxBytes() {_uniqueStorage()._ifacesWanEthTxBytes = nil}

  var ifacesWanEthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthTxPackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthTxPackets = newValue}
  }
  /// Returns true if `ifacesWanEthTxPackets` has been explicitly set.
  var hasIfacesWanEthTxPackets: Bool {return _storage._ifacesWanEthTxPackets != nil}
  /// Clears the value of `ifacesWanEthTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxPackets() {_uniqueStorage()._ifacesWanEthTxPackets = nil}

  var ifacesWanEthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._ifacesWanEthTxErrors ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._ifacesWanEthTxErrors = newValue}
  }
  /// Returns true if `ifacesWanEthTxErrors` has been explicitly set.
  var hasIfacesWanEthTxErrors: Bool {return _storage._ifacesWanEthTxErrors != nil}
  /// Clears the value of `ifacesWanEthTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxErrors() {_uniqueStorage()._ifacesWanEthTxErrors = nil}

  var clients: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients = newValue}
  }
  /// Returns true if `clients` has been explicitly set.
  var hasClients: Bool {return _storage._clients != nil}
  /// Clears the value of `clients`. Subsequent reads from it will return its default value.
  mutating func clearClients() {_uniqueStorage()._clients = nil}

  var clients2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients2Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients2Ghz = newValue}
  }
  /// Returns true if `clients2Ghz` has been explicitly set.
  var hasClients2Ghz: Bool {return _storage._clients2Ghz != nil}
  /// Clears the value of `clients2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClients2Ghz() {_uniqueStorage()._clients2Ghz = nil}

  var clients5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5Ghz = newValue}
  }
  /// Returns true if `clients5Ghz` has been explicitly set.
  var hasClients5Ghz: Bool {return _storage._clients5Ghz != nil}
  /// Clears the value of `clients5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClients5Ghz() {_uniqueStorage()._clients5Ghz = nil}

  var clients5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5GhzHigh ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5GhzHigh = newValue}
  }
  /// Returns true if `clients5GhzHigh` has been explicitly set.
  var hasClients5GhzHigh: Bool {return _storage._clients5GhzHigh != nil}
  /// Clears the value of `clients5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearClients5GhzHigh() {_uniqueStorage()._clients5GhzHigh = nil}

  var clientsEth: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsEth ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsEth = newValue}
  }
  /// Returns true if `clientsEth` has been explicitly set.
  var hasClientsEth: Bool {return _storage._clientsEth != nil}
  /// Clears the value of `clientsEth`. Subsequent reads from it will return its default value.
  mutating func clearClientsEth() {_uniqueStorage()._clientsEth = nil}

  var clients5GhzRxBandwidth20Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5GhzRxBandwidth20Mhz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5GhzRxBandwidth20Mhz = newValue}
  }
  /// Returns true if `clients5GhzRxBandwidth20Mhz` has been explicitly set.
  var hasClients5GhzRxBandwidth20Mhz: Bool {return _storage._clients5GhzRxBandwidth20Mhz != nil}
  /// Clears the value of `clients5GhzRxBandwidth20Mhz`. Subsequent reads from it will return its default value.
  mutating func clearClients5GhzRxBandwidth20Mhz() {_uniqueStorage()._clients5GhzRxBandwidth20Mhz = nil}

  var clients5GhzRxBandwidth40Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5GhzRxBandwidth40Mhz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5GhzRxBandwidth40Mhz = newValue}
  }
  /// Returns true if `clients5GhzRxBandwidth40Mhz` has been explicitly set.
  var hasClients5GhzRxBandwidth40Mhz: Bool {return _storage._clients5GhzRxBandwidth40Mhz != nil}
  /// Clears the value of `clients5GhzRxBandwidth40Mhz`. Subsequent reads from it will return its default value.
  mutating func clearClients5GhzRxBandwidth40Mhz() {_uniqueStorage()._clients5GhzRxBandwidth40Mhz = nil}

  var clients5GhzRxBandwidth80Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5GhzRxBandwidth80Mhz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5GhzRxBandwidth80Mhz = newValue}
  }
  /// Returns true if `clients5GhzRxBandwidth80Mhz` has been explicitly set.
  var hasClients5GhzRxBandwidth80Mhz: Bool {return _storage._clients5GhzRxBandwidth80Mhz != nil}
  /// Clears the value of `clients5GhzRxBandwidth80Mhz`. Subsequent reads from it will return its default value.
  mutating func clearClients5GhzRxBandwidth80Mhz() {_uniqueStorage()._clients5GhzRxBandwidth80Mhz = nil}

  var clientsRepeater: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater = newValue}
  }
  /// Returns true if `clientsRepeater` has been explicitly set.
  var hasClientsRepeater: Bool {return _storage._clientsRepeater != nil}
  /// Clears the value of `clientsRepeater`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater() {_uniqueStorage()._clientsRepeater = nil}

  var clientsRepeater2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater2Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater2Ghz = newValue}
  }
  /// Returns true if `clientsRepeater2Ghz` has been explicitly set.
  var hasClientsRepeater2Ghz: Bool {return _storage._clientsRepeater2Ghz != nil}
  /// Clears the value of `clientsRepeater2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater2Ghz() {_uniqueStorage()._clientsRepeater2Ghz = nil}

  var clientsRepeater5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater5Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater5Ghz = newValue}
  }
  /// Returns true if `clientsRepeater5Ghz` has been explicitly set.
  var hasClientsRepeater5Ghz: Bool {return _storage._clientsRepeater5Ghz != nil}
  /// Clears the value of `clientsRepeater5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater5Ghz() {_uniqueStorage()._clientsRepeater5Ghz = nil}

  var clientsRepeater5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater5GhzHigh ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater5GhzHigh = newValue}
  }
  /// Returns true if `clientsRepeater5GhzHigh` has been explicitly set.
  var hasClientsRepeater5GhzHigh: Bool {return _storage._clientsRepeater5GhzHigh != nil}
  /// Clears the value of `clientsRepeater5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater5GhzHigh() {_uniqueStorage()._clientsRepeater5GhzHigh = nil}

  var clientsRepeaterEth: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeaterEth ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeaterEth = newValue}
  }
  /// Returns true if `clientsRepeaterEth` has been explicitly set.
  var hasClientsRepeaterEth: Bool {return _storage._clientsRepeaterEth != nil}
  /// Clears the value of `clientsRepeaterEth`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeaterEth() {_uniqueStorage()._clientsRepeaterEth = nil}

  var meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._meshHops ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._meshHops = newValue}
  }
  /// Returns true if `meshHops` has been explicitly set.
  var hasMeshHops: Bool {return _storage._meshHops != nil}
  /// Clears the value of `meshHops`. Subsequent reads from it will return its default value.
  mutating func clearMeshHops() {_uniqueStorage()._meshHops = nil}

  var meshOneHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshOneHopRssiAvg2Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshOneHopRssiAvg2Ghz = newValue}
  }
  /// Returns true if `meshOneHopRssiAvg2Ghz` has been explicitly set.
  var hasMeshOneHopRssiAvg2Ghz: Bool {return _storage._meshOneHopRssiAvg2Ghz != nil}
  /// Clears the value of `meshOneHopRssiAvg2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshOneHopRssiAvg2Ghz() {_uniqueStorage()._meshOneHopRssiAvg2Ghz = nil}

  var meshOneHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshOneHopRssiAvg5Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshOneHopRssiAvg5Ghz = newValue}
  }
  /// Returns true if `meshOneHopRssiAvg5Ghz` has been explicitly set.
  var hasMeshOneHopRssiAvg5Ghz: Bool {return _storage._meshOneHopRssiAvg5Ghz != nil}
  /// Clears the value of `meshOneHopRssiAvg5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshOneHopRssiAvg5Ghz() {_uniqueStorage()._meshOneHopRssiAvg5Ghz = nil}

  var meshOneHopRssiAvg5GhzHigh: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshOneHopRssiAvg5GhzHigh ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshOneHopRssiAvg5GhzHigh = newValue}
  }
  /// Returns true if `meshOneHopRssiAvg5GhzHigh` has been explicitly set.
  var hasMeshOneHopRssiAvg5GhzHigh: Bool {return _storage._meshOneHopRssiAvg5GhzHigh != nil}
  /// Clears the value of `meshOneHopRssiAvg5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearMeshOneHopRssiAvg5GhzHigh() {_uniqueStorage()._meshOneHopRssiAvg5GhzHigh = nil}

  var meshTwoHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshTwoHopRssiAvg2Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshTwoHopRssiAvg2Ghz = newValue}
  }
  /// Returns true if `meshTwoHopRssiAvg2Ghz` has been explicitly set.
  var hasMeshTwoHopRssiAvg2Ghz: Bool {return _storage._meshTwoHopRssiAvg2Ghz != nil}
  /// Clears the value of `meshTwoHopRssiAvg2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshTwoHopRssiAvg2Ghz() {_uniqueStorage()._meshTwoHopRssiAvg2Ghz = nil}

  var meshTwoHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshTwoHopRssiAvg5Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshTwoHopRssiAvg5Ghz = newValue}
  }
  /// Returns true if `meshTwoHopRssiAvg5Ghz` has been explicitly set.
  var hasMeshTwoHopRssiAvg5Ghz: Bool {return _storage._meshTwoHopRssiAvg5Ghz != nil}
  /// Clears the value of `meshTwoHopRssiAvg5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshTwoHopRssiAvg5Ghz() {_uniqueStorage()._meshTwoHopRssiAvg5Ghz = nil}

  var meshTwoHopRssiAvg5GhzHigh: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshTwoHopRssiAvg5GhzHigh ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshTwoHopRssiAvg5GhzHigh = newValue}
  }
  /// Returns true if `meshTwoHopRssiAvg5GhzHigh` has been explicitly set.
  var hasMeshTwoHopRssiAvg5GhzHigh: Bool {return _storage._meshTwoHopRssiAvg5GhzHigh != nil}
  /// Clears the value of `meshTwoHopRssiAvg5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearMeshTwoHopRssiAvg5GhzHigh() {_uniqueStorage()._meshTwoHopRssiAvg5GhzHigh = nil}

  var repeaterTxRateMbpsMin: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterTxRateMbpsMin ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterTxRateMbpsMin = newValue}
  }
  /// Returns true if `repeaterTxRateMbpsMin` has been explicitly set.
  var hasRepeaterTxRateMbpsMin: Bool {return _storage._repeaterTxRateMbpsMin != nil}
  /// Clears the value of `repeaterTxRateMbpsMin`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterTxRateMbpsMin() {_uniqueStorage()._repeaterTxRateMbpsMin = nil}

  var repeaterRxRateMbpsMin: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterRxRateMbpsMin ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterRxRateMbpsMin = newValue}
  }
  /// Returns true if `repeaterRxRateMbpsMin` has been explicitly set.
  var hasRepeaterRxRateMbpsMin: Bool {return _storage._repeaterRxRateMbpsMin != nil}
  /// Clears the value of `repeaterRxRateMbpsMin`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterRxRateMbpsMin() {_uniqueStorage()._repeaterRxRateMbpsMin = nil}

  var repeaterTxRateMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterTxRateMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterTxRateMbpsAvg = newValue}
  }
  /// Returns true if `repeaterTxRateMbpsAvg` has been explicitly set.
  var hasRepeaterTxRateMbpsAvg: Bool {return _storage._repeaterTxRateMbpsAvg != nil}
  /// Clears the value of `repeaterTxRateMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterTxRateMbpsAvg() {_uniqueStorage()._repeaterTxRateMbpsAvg = nil}

  var repeaterRxRateMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterRxRateMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterRxRateMbpsAvg = newValue}
  }
  /// Returns true if `repeaterRxRateMbpsAvg` has been explicitly set.
  var hasRepeaterRxRateMbpsAvg: Bool {return _storage._repeaterRxRateMbpsAvg != nil}
  /// Clears the value of `repeaterRxRateMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterRxRateMbpsAvg() {_uniqueStorage()._repeaterRxRateMbpsAvg = nil}

  var repeaterSecondsSince2SOutageMin: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterSecondsSince2SOutageMin ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterSecondsSince2SOutageMin = newValue}
  }
  /// Returns true if `repeaterSecondsSince2SOutageMin` has been explicitly set.
  var hasRepeaterSecondsSince2SOutageMin: Bool {return _storage._repeaterSecondsSince2SOutageMin != nil}
  /// Clears the value of `repeaterSecondsSince2SOutageMin`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterSecondsSince2SOutageMin() {_uniqueStorage()._repeaterSecondsSince2SOutageMin = nil}

  var repeaterSecondsSince5SOutageMin: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterSecondsSince5SOutageMin ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterSecondsSince5SOutageMin = newValue}
  }
  /// Returns true if `repeaterSecondsSince5SOutageMin` has been explicitly set.
  var hasRepeaterSecondsSince5SOutageMin: Bool {return _storage._repeaterSecondsSince5SOutageMin != nil}
  /// Clears the value of `repeaterSecondsSince5SOutageMin`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterSecondsSince5SOutageMin() {_uniqueStorage()._repeaterSecondsSince5SOutageMin = nil}

  var repeaterSecondsSince2SOutageAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterSecondsSince2SOutageAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterSecondsSince2SOutageAvg = newValue}
  }
  /// Returns true if `repeaterSecondsSince2SOutageAvg` has been explicitly set.
  var hasRepeaterSecondsSince2SOutageAvg: Bool {return _storage._repeaterSecondsSince2SOutageAvg != nil}
  /// Clears the value of `repeaterSecondsSince2SOutageAvg`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterSecondsSince2SOutageAvg() {_uniqueStorage()._repeaterSecondsSince2SOutageAvg = nil}

  var repeaterSecondsSince5SOutageAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterSecondsSince5SOutageAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterSecondsSince5SOutageAvg = newValue}
  }
  /// Returns true if `repeaterSecondsSince5SOutageAvg` has been explicitly set.
  var hasRepeaterSecondsSince5SOutageAvg: Bool {return _storage._repeaterSecondsSince5SOutageAvg != nil}
  /// Clears the value of `repeaterSecondsSince5SOutageAvg`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterSecondsSince5SOutageAvg() {_uniqueStorage()._repeaterSecondsSince5SOutageAvg = nil}

  var repeaterLatencyMs1HMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterLatencyMs1HMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterLatencyMs1HMax = newValue}
  }
  /// Returns true if `repeaterLatencyMs1HMax` has been explicitly set.
  var hasRepeaterLatencyMs1HMax: Bool {return _storage._repeaterLatencyMs1HMax != nil}
  /// Clears the value of `repeaterLatencyMs1HMax`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterLatencyMs1HMax() {_uniqueStorage()._repeaterLatencyMs1HMax = nil}

  var repeaterLatencyMs1HAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._repeaterLatencyMs1HAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._repeaterLatencyMs1HAvg = newValue}
  }
  /// Returns true if `repeaterLatencyMs1HAvg` has been explicitly set.
  var hasRepeaterLatencyMs1HAvg: Bool {return _storage._repeaterLatencyMs1HAvg != nil}
  /// Clears the value of `repeaterLatencyMs1HAvg`. Subsequent reads from it will return its default value.
  mutating func clearRepeaterLatencyMs1HAvg() {_uniqueStorage()._repeaterLatencyMs1HAvg = nil}

  var meshTopologyChangeCount1D: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._meshTopologyChangeCount1D ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._meshTopologyChangeCount1D = newValue}
  }
  /// Returns true if `meshTopologyChangeCount1D` has been explicitly set.
  var hasMeshTopologyChangeCount1D: Bool {return _storage._meshTopologyChangeCount1D != nil}
  /// Clears the value of `meshTopologyChangeCount1D`. Subsequent reads from it will return its default value.
  mutating func clearMeshTopologyChangeCount1D() {_uniqueStorage()._meshTopologyChangeCount1D = nil}

  var pingSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast1SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast1SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast1SOutage` has been explicitly set.
  var hasPingSecondsSinceLast1SOutage: Bool {return _storage._pingSecondsSinceLast1SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast1SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast1SOutage() {_uniqueStorage()._pingSecondsSinceLast1SOutage = nil}

  var pingSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast2SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast2SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast2SOutage` has been explicitly set.
  var hasPingSecondsSinceLast2SOutage: Bool {return _storage._pingSecondsSinceLast2SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast2SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast2SOutage() {_uniqueStorage()._pingSecondsSinceLast2SOutage = nil}

  var pingSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast5SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast5SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast5SOutage` has been explicitly set.
  var hasPingSecondsSinceLast5SOutage: Bool {return _storage._pingSecondsSinceLast5SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast5SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast5SOutage() {_uniqueStorage()._pingSecondsSinceLast5SOutage = nil}

  var pingSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast60SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast60SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast60SOutage` has been explicitly set.
  var hasPingSecondsSinceLast60SOutage: Bool {return _storage._pingSecondsSinceLast60SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast60SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast60SOutage() {_uniqueStorage()._pingSecondsSinceLast60SOutage = nil}

  var pingSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast300SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast300SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast300SOutage` has been explicitly set.
  var hasPingSecondsSinceLast300SOutage: Bool {return _storage._pingSecondsSinceLast300SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast300SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast300SOutage() {_uniqueStorage()._pingSecondsSinceLast300SOutage = nil}

  var pingDropRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDropRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDropRate = newValue}
  }
  /// Returns true if `pingDropRate` has been explicitly set.
  var hasPingDropRate: Bool {return _storage._pingDropRate != nil}
  /// Clears the value of `pingDropRate`. Subsequent reads from it will return its default value.
  mutating func clearPingDropRate() {_uniqueStorage()._pingDropRate = nil}

  var pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDropRateLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDropRateLast1H = newValue}
  }
  /// Returns true if `pingDropRateLast1H` has been explicitly set.
  var hasPingDropRateLast1H: Bool {return _storage._pingDropRateLast1H != nil}
  /// Clears the value of `pingDropRateLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDropRateLast1H() {_uniqueStorage()._pingDropRateLast1H = nil}

  var pingLatency: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingLatency ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingLatency = newValue}
  }
  /// Returns true if `pingLatency` has been explicitly set.
  var hasPingLatency: Bool {return _storage._pingLatency != nil}
  /// Clears the value of `pingLatency`. Subsequent reads from it will return its default value.
  mutating func clearPingLatency() {_uniqueStorage()._pingLatency = nil}

  var pingLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingLatencyLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingLatencyLast1H = newValue}
  }
  /// Returns true if `pingLatencyLast1H` has been explicitly set.
  var hasPingLatencyLast1H: Bool {return _storage._pingLatencyLast1H != nil}
  /// Clears the value of `pingLatencyLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingLatencyLast1H() {_uniqueStorage()._pingLatencyLast1H = nil}

  var pingDishSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast1SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast1SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast1SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast1SOutage: Bool {return _storage._pingDishSecondsSinceLast1SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast1SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast1SOutage() {_uniqueStorage()._pingDishSecondsSinceLast1SOutage = nil}

  var pingDishSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast2SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast2SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast2SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast2SOutage: Bool {return _storage._pingDishSecondsSinceLast2SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast2SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast2SOutage() {_uniqueStorage()._pingDishSecondsSinceLast2SOutage = nil}

  var pingDishSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast5SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast5SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast5SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast5SOutage: Bool {return _storage._pingDishSecondsSinceLast5SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast5SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast5SOutage() {_uniqueStorage()._pingDishSecondsSinceLast5SOutage = nil}

  var pingDishSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast60SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast60SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast60SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast60SOutage: Bool {return _storage._pingDishSecondsSinceLast60SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast60SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast60SOutage() {_uniqueStorage()._pingDishSecondsSinceLast60SOutage = nil}

  var pingDishSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast300SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast300SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast300SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast300SOutage: Bool {return _storage._pingDishSecondsSinceLast300SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast300SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast300SOutage() {_uniqueStorage()._pingDishSecondsSinceLast300SOutage = nil}

  var pingDishDropRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishDropRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishDropRate = newValue}
  }
  /// Returns true if `pingDishDropRate` has been explicitly set.
  var hasPingDishDropRate: Bool {return _storage._pingDishDropRate != nil}
  /// Clears the value of `pingDishDropRate`. Subsequent reads from it will return its default value.
  mutating func clearPingDishDropRate() {_uniqueStorage()._pingDishDropRate = nil}

  var pingDishDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishDropRateLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishDropRateLast1H = newValue}
  }
  /// Returns true if `pingDishDropRateLast1H` has been explicitly set.
  var hasPingDishDropRateLast1H: Bool {return _storage._pingDishDropRateLast1H != nil}
  /// Clears the value of `pingDishDropRateLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDishDropRateLast1H() {_uniqueStorage()._pingDishDropRateLast1H = nil}

  var pingDishLatency: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishLatency ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishLatency = newValue}
  }
  /// Returns true if `pingDishLatency` has been explicitly set.
  var hasPingDishLatency: Bool {return _storage._pingDishLatency != nil}
  /// Clears the value of `pingDishLatency`. Subsequent reads from it will return its default value.
  mutating func clearPingDishLatency() {_uniqueStorage()._pingDishLatency = nil}

  var pingDishLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishLatencyLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishLatencyLast1H = newValue}
  }
  /// Returns true if `pingDishLatencyLast1H` has been explicitly set.
  var hasPingDishLatencyLast1H: Bool {return _storage._pingDishLatencyLast1H != nil}
  /// Clears the value of `pingDishLatencyLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDishLatencyLast1H() {_uniqueStorage()._pingDishLatencyLast1H = nil}

  var clientSpeedtestRouterDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestRouterDownloadMbps` has been explicitly set.
  var hasClientSpeedtestRouterDownloadMbps: Bool {return _storage._clientSpeedtestRouterDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestRouterDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterDownloadMbps() {_uniqueStorage()._clientSpeedtestRouterDownloadMbps = nil}

  var clientSpeedtestRouterUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestRouterUploadMbps` has been explicitly set.
  var hasClientSpeedtestRouterUploadMbps: Bool {return _storage._clientSpeedtestRouterUploadMbps != nil}
  /// Clears the value of `clientSpeedtestRouterUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterUploadMbps() {_uniqueStorage()._clientSpeedtestRouterUploadMbps = nil}

  var clientSpeedtestRouterRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterRssi = newValue}
  }
  /// Returns true if `clientSpeedtestRouterRssi` has been explicitly set.
  var hasClientSpeedtestRouterRssi: Bool {return _storage._clientSpeedtestRouterRssi != nil}
  /// Clears the value of `clientSpeedtestRouterRssi`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterRssi() {_uniqueStorage()._clientSpeedtestRouterRssi = nil}

  var clientSpeedtestWifiDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestWifiDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestWifiDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestWifiDownloadMbps` has been explicitly set.
  var hasClientSpeedtestWifiDownloadMbps: Bool {return _storage._clientSpeedtestWifiDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestWifiDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestWifiDownloadMbps() {_uniqueStorage()._clientSpeedtestWifiDownloadMbps = nil}

  var clientSpeedtestWifiUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestWifiUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestWifiUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestWifiUploadMbps` has been explicitly set.
  var hasClientSpeedtestWifiUploadMbps: Bool {return _storage._clientSpeedtestWifiUploadMbps != nil}
  /// Clears the value of `clientSpeedtestWifiUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestWifiUploadMbps() {_uniqueStorage()._clientSpeedtestWifiUploadMbps = nil}

  var clientSpeedtestClientDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestClientDownloadMbps` has been explicitly set.
  var hasClientSpeedtestClientDownloadMbps: Bool {return _storage._clientSpeedtestClientDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestClientDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientDownloadMbps() {_uniqueStorage()._clientSpeedtestClientDownloadMbps = nil}

  var clientSpeedtestClientUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestClientUploadMbps` has been explicitly set.
  var hasClientSpeedtestClientUploadMbps: Bool {return _storage._clientSpeedtestClientUploadMbps != nil}
  /// Clears the value of `clientSpeedtestClientUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientUploadMbps() {_uniqueStorage()._clientSpeedtestClientUploadMbps = nil}

  var clientSpeedtestClientRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientRssi = newValue}
  }
  /// Returns true if `clientSpeedtestClientRssi` has been explicitly set.
  var hasClientSpeedtestClientRssi: Bool {return _storage._clientSpeedtestClientRssi != nil}
  /// Clears the value of `clientSpeedtestClientRssi`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientRssi() {_uniqueStorage()._clientSpeedtestClientRssi = nil}

  var clientSpeedtestClientIface: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientIface ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientIface = newValue}
  }
  /// Returns true if `clientSpeedtestClientIface` has been explicitly set.
  var hasClientSpeedtestClientIface: Bool {return _storage._clientSpeedtestClientIface != nil}
  /// Clears the value of `clientSpeedtestClientIface`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientIface() {_uniqueStorage()._clientSpeedtestClientIface = nil}

  var clientSpeedtestClientOui: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientSpeedtestClientOui ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientSpeedtestClientOui = newValue}
  }
  /// Returns true if `clientSpeedtestClientOui` has been explicitly set.
  var hasClientSpeedtestClientOui: Bool {return _storage._clientSpeedtestClientOui != nil}
  /// Clears the value of `clientSpeedtestClientOui`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientOui() {_uniqueStorage()._clientSpeedtestClientOui = nil}

  var clientSpeedtestClientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientTxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientTxRate = newValue}
  }
  /// Returns true if `clientSpeedtestClientTxRate` has been explicitly set.
  var hasClientSpeedtestClientTxRate: Bool {return _storage._clientSpeedtestClientTxRate != nil}
  /// Clears the value of `clientSpeedtestClientTxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientTxRate() {_uniqueStorage()._clientSpeedtestClientTxRate = nil}

  var clientSpeedtestClientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientRxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientRxRate = newValue}
  }
  /// Returns true if `clientSpeedtestClientRxRate` has been explicitly set.
  var hasClientSpeedtestClientRxRate: Bool {return _storage._clientSpeedtestClientRxRate != nil}
  /// Clears the value of `clientSpeedtestClientRxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientRxRate() {_uniqueStorage()._clientSpeedtestClientRxRate = nil}

  var clientSpeedtestClientPlatformType: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientPlatformType ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientPlatformType = newValue}
  }
  /// Returns true if `clientSpeedtestClientPlatformType` has been explicitly set.
  var hasClientSpeedtestClientPlatformType: Bool {return _storage._clientSpeedtestClientPlatformType != nil}
  /// Clears the value of `clientSpeedtestClientPlatformType`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientPlatformType() {_uniqueStorage()._clientSpeedtestClientPlatformType = nil}

  var speedtestTcp8DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8DownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8DownloadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp8DownloadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp8DownloadMbpsAvg: Bool {return _storage._speedtestTcp8DownloadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp8DownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8DownloadMbpsAvg() {_uniqueStorage()._speedtestTcp8DownloadMbpsAvg = nil}

  var speedtestTcp8DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8DownloadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8DownloadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp8DownloadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp8DownloadMbpsMax: Bool {return _storage._speedtestTcp8DownloadMbpsMax != nil}
  /// Clears the value of `speedtestTcp8DownloadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8DownloadMbpsMax() {_uniqueStorage()._speedtestTcp8DownloadMbpsMax = nil}

  var speedtestTcp8UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8UploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8UploadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp8UploadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp8UploadMbpsAvg: Bool {return _storage._speedtestTcp8UploadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp8UploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8UploadMbpsAvg() {_uniqueStorage()._speedtestTcp8UploadMbpsAvg = nil}

  var speedtestTcp8UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8UploadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8UploadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp8UploadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp8UploadMbpsMax: Bool {return _storage._speedtestTcp8UploadMbpsMax != nil}
  /// Clears the value of `speedtestTcp8UploadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8UploadMbpsMax() {_uniqueStorage()._speedtestTcp8UploadMbpsMax = nil}

  var speedtestTcp64DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64DownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64DownloadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp64DownloadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp64DownloadMbpsAvg: Bool {return _storage._speedtestTcp64DownloadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp64DownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64DownloadMbpsAvg() {_uniqueStorage()._speedtestTcp64DownloadMbpsAvg = nil}

  var speedtestTcp64DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64DownloadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64DownloadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp64DownloadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp64DownloadMbpsMax: Bool {return _storage._speedtestTcp64DownloadMbpsMax != nil}
  /// Clears the value of `speedtestTcp64DownloadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64DownloadMbpsMax() {_uniqueStorage()._speedtestTcp64DownloadMbpsMax = nil}

  var speedtestTcp64UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64UploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64UploadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp64UploadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp64UploadMbpsAvg: Bool {return _storage._speedtestTcp64UploadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp64UploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64UploadMbpsAvg() {_uniqueStorage()._speedtestTcp64UploadMbpsAvg = nil}

  var speedtestTcp64UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64UploadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64UploadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp64UploadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp64UploadMbpsMax: Bool {return _storage._speedtestTcp64UploadMbpsMax != nil}
  /// Clears the value of `speedtestTcp64UploadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64UploadMbpsMax() {_uniqueStorage()._speedtestTcp64UploadMbpsMax = nil}

  var dishCellID: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dishCellID ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dishCellID = newValue}
  }
  /// Returns true if `dishCellID` has been explicitly set.
  var hasDishCellID: Bool {return _storage._dishCellID != nil}
  /// Clears the value of `dishCellID`. Subsequent reads from it will return its default value.
  mutating func clearDishCellID() {_uniqueStorage()._dishCellID = nil}

  var configSetupComplete: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configSetupComplete ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configSetupComplete = newValue}
  }
  /// Returns true if `configSetupComplete` has been explicitly set.
  var hasConfigSetupComplete: Bool {return _storage._configSetupComplete != nil}
  /// Clears the value of `configSetupComplete`. Subsequent reads from it will return its default value.
  mutating func clearConfigSetupComplete() {_uniqueStorage()._configSetupComplete = nil}

  var configBandsSplit: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configBandsSplit ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configBandsSplit = newValue}
  }
  /// Returns true if `configBandsSplit` has been explicitly set.
  var hasConfigBandsSplit: Bool {return _storage._configBandsSplit != nil}
  /// Clears the value of `configBandsSplit`. Subsequent reads from it will return its default value.
  mutating func clearConfigBandsSplit() {_uniqueStorage()._configBandsSplit = nil}

  var configIsRepeater: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsRepeater ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsRepeater = newValue}
  }
  /// Returns true if `configIsRepeater` has been explicitly set.
  var hasConfigIsRepeater: Bool {return _storage._configIsRepeater != nil}
  /// Clears the value of `configIsRepeater`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsRepeater() {_uniqueStorage()._configIsRepeater = nil}

  var configOpenNetwork: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configOpenNetwork ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configOpenNetwork = newValue}
  }
  /// Returns true if `configOpenNetwork` has been explicitly set.
  var hasConfigOpenNetwork: Bool {return _storage._configOpenNetwork != nil}
  /// Clears the value of `configOpenNetwork`. Subsequent reads from it will return its default value.
  mutating func clearConfigOpenNetwork() {_uniqueStorage()._configOpenNetwork = nil}

  var configIsAviation: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsAviation ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsAviation = newValue}
  }
  /// Returns true if `configIsAviation` has been explicitly set.
  var hasConfigIsAviation: Bool {return _storage._configIsAviation != nil}
  /// Clears the value of `configIsAviation`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsAviation() {_uniqueStorage()._configIsAviation = nil}

  var configSecureDns: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configSecureDns ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configSecureDns = newValue}
  }
  /// Returns true if `configSecureDns` has been explicitly set.
  var hasConfigSecureDns: Bool {return _storage._configSecureDns != nil}
  /// Clears the value of `configSecureDns`. Subsequent reads from it will return its default value.
  mutating func clearConfigSecureDns() {_uniqueStorage()._configSecureDns = nil}

  var configLegacy: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configLegacy ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configLegacy = newValue}
  }
  /// Returns true if `configLegacy` has been explicitly set.
  var hasConfigLegacy: Bool {return _storage._configLegacy != nil}
  /// Clears the value of `configLegacy`. Subsequent reads from it will return its default value.
  mutating func clearConfigLegacy() {_uniqueStorage()._configLegacy = nil}

  var configApMode: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configApMode ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configApMode = newValue}
  }
  /// Returns true if `configApMode` has been explicitly set.
  var hasConfigApMode: Bool {return _storage._configApMode != nil}
  /// Clears the value of `configApMode`. Subsequent reads from it will return its default value.
  mutating func clearConfigApMode() {_uniqueStorage()._configApMode = nil}

  var configDfsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDfsEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDfsEnabled = newValue}
  }
  /// Returns true if `configDfsEnabled` has been explicitly set.
  var hasConfigDfsEnabled: Bool {return _storage._configDfsEnabled != nil}
  /// Clears the value of `configDfsEnabled`. Subsequent reads from it will return its default value.
  mutating func clearConfigDfsEnabled() {_uniqueStorage()._configDfsEnabled = nil}

  var configNetworkNameIsDefault: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configNetworkNameIsDefault ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configNetworkNameIsDefault = newValue}
  }
  /// Returns true if `configNetworkNameIsDefault` has been explicitly set.
  var hasConfigNetworkNameIsDefault: Bool {return _storage._configNetworkNameIsDefault != nil}
  /// Clears the value of `configNetworkNameIsDefault`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworkNameIsDefault() {_uniqueStorage()._configNetworkNameIsDefault = nil}

  var configRemoteSshEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configRemoteSshEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configRemoteSshEnabled = newValue}
  }
  /// Returns true if `configRemoteSshEnabled` has been explicitly set.
  var hasConfigRemoteSshEnabled: Bool {return _storage._configRemoteSshEnabled != nil}
  /// Clears the value of `configRemoteSshEnabled`. Subsequent reads from it will return its default value.
  mutating func clearConfigRemoteSshEnabled() {_uniqueStorage()._configRemoteSshEnabled = nil}

  var configIsRepeaterWired: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsRepeaterWired ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsRepeaterWired = newValue}
  }
  /// Returns true if `configIsRepeaterWired` has been explicitly set.
  var hasConfigIsRepeaterWired: Bool {return _storage._configIsRepeaterWired != nil}
  /// Clears the value of `configIsRepeaterWired`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsRepeaterWired() {_uniqueStorage()._configIsRepeaterWired = nil}

  var configIsRepeaterWireless: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsRepeaterWireless ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsRepeaterWireless = newValue}
  }
  /// Returns true if `configIsRepeaterWireless` has been explicitly set.
  var hasConfigIsRepeaterWireless: Bool {return _storage._configIsRepeaterWireless != nil}
  /// Clears the value of `configIsRepeaterWireless`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsRepeaterWireless() {_uniqueStorage()._configIsRepeaterWireless = nil}

  var configBlockSchedulesSet: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configBlockSchedulesSet ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configBlockSchedulesSet = newValue}
  }
  /// Returns true if `configBlockSchedulesSet` has been explicitly set.
  var hasConfigBlockSchedulesSet: Bool {return _storage._configBlockSchedulesSet != nil}
  /// Clears the value of `configBlockSchedulesSet`. Subsequent reads from it will return its default value.
  mutating func clearConfigBlockSchedulesSet() {_uniqueStorage()._configBlockSchedulesSet = nil}

  var configCustomNameservers: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configCustomNameservers ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configCustomNameservers = newValue}
  }
  /// Returns true if `configCustomNameservers` has been explicitly set.
  var hasConfigCustomNameservers: Bool {return _storage._configCustomNameservers != nil}
  /// Clears the value of `configCustomNameservers`. Subsequent reads from it will return its default value.
  mutating func clearConfigCustomNameservers() {_uniqueStorage()._configCustomNameservers = nil}

  var configDisableMeshOnboarding: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDisableMeshOnboarding ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDisableMeshOnboarding = newValue}
  }
  /// Returns true if `configDisableMeshOnboarding` has been explicitly set.
  var hasConfigDisableMeshOnboarding: Bool {return _storage._configDisableMeshOnboarding != nil}
  /// Clears the value of `configDisableMeshOnboarding`. Subsequent reads from it will return its default value.
  mutating func clearConfigDisableMeshOnboarding() {_uniqueStorage()._configDisableMeshOnboarding = nil}

  var configPinCountryCode: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configPinCountryCode ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configPinCountryCode = newValue}
  }
  /// Returns true if `configPinCountryCode` has been explicitly set.
  var hasConfigPinCountryCode: Bool {return _storage._configPinCountryCode != nil}
  /// Clears the value of `configPinCountryCode`. Subsequent reads from it will return its default value.
  mutating func clearConfigPinCountryCode() {_uniqueStorage()._configPinCountryCode = nil}

  var configDisableUpdateReboot: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDisableUpdateReboot ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDisableUpdateReboot = newValue}
  }
  /// Returns true if `configDisableUpdateReboot` has been explicitly set.
  var hasConfigDisableUpdateReboot: Bool {return _storage._configDisableUpdateReboot != nil}
  /// Clears the value of `configDisableUpdateReboot`. Subsequent reads from it will return its default value.
  mutating func clearConfigDisableUpdateReboot() {_uniqueStorage()._configDisableUpdateReboot = nil}

  var configDisable2Ghz: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDisable2Ghz ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDisable2Ghz = newValue}
  }
  /// Returns true if `configDisable2Ghz` has been explicitly set.
  var hasConfigDisable2Ghz: Bool {return _storage._configDisable2Ghz != nil}
  /// Clears the value of `configDisable2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearConfigDisable2Ghz() {_uniqueStorage()._configDisable2Ghz = nil}

  var configDisable5Ghz: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDisable5Ghz ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDisable5Ghz = newValue}
  }
  /// Returns true if `configDisable5Ghz` has been explicitly set.
  var hasConfigDisable5Ghz: Bool {return _storage._configDisable5Ghz != nil}
  /// Clears the value of `configDisable5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearConfigDisable5Ghz() {_uniqueStorage()._configDisable5Ghz = nil}

  var configDisable5GhzHigh: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDisable5GhzHigh ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDisable5GhzHigh = newValue}
  }
  /// Returns true if `configDisable5GhzHigh` has been explicitly set.
  var hasConfigDisable5GhzHigh: Bool {return _storage._configDisable5GhzHigh != nil}
  /// Clears the value of `configDisable5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearConfigDisable5GhzHigh() {_uniqueStorage()._configDisable5GhzHigh = nil}

  var configChannel2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configChannel2Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configChannel2Ghz = newValue}
  }
  /// Returns true if `configChannel2Ghz` has been explicitly set.
  var hasConfigChannel2Ghz: Bool {return _storage._configChannel2Ghz != nil}
  /// Clears the value of `configChannel2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearConfigChannel2Ghz() {_uniqueStorage()._configChannel2Ghz = nil}

  var configChannel5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configChannel5Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configChannel5Ghz = newValue}
  }
  /// Returns true if `configChannel5Ghz` has been explicitly set.
  var hasConfigChannel5Ghz: Bool {return _storage._configChannel5Ghz != nil}
  /// Clears the value of `configChannel5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearConfigChannel5Ghz() {_uniqueStorage()._configChannel5Ghz = nil}

  var configChannel5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configChannel5GhzHigh ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configChannel5GhzHigh = newValue}
  }
  /// Returns true if `configChannel5GhzHigh` has been explicitly set.
  var hasConfigChannel5GhzHigh: Bool {return _storage._configChannel5GhzHigh != nil}
  /// Clears the value of `configChannel5GhzHigh`. Subsequent reads from it will return its default value.
  mutating func clearConfigChannel5GhzHigh() {_uniqueStorage()._configChannel5GhzHigh = nil}

  var configNetworks: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configNetworks ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configNetworks = newValue}
  }
  /// Returns true if `configNetworks` has been explicitly set.
  var hasConfigNetworks: Bool {return _storage._configNetworks != nil}
  /// Clears the value of `configNetworks`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworks() {_uniqueStorage()._configNetworks = nil}

  var configNetworksGuest: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configNetworksGuest ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configNetworksGuest = newValue}
  }
  /// Returns true if `configNetworksGuest` has been explicitly set.
  var hasConfigNetworksGuest: Bool {return _storage._configNetworksGuest != nil}
  /// Clears the value of `configNetworksGuest`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworksGuest() {_uniqueStorage()._configNetworksGuest = nil}

  var configNetworksHidden: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configNetworksHidden ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configNetworksHidden = newValue}
  }
  /// Returns true if `configNetworksHidden` has been explicitly set.
  var hasConfigNetworksHidden: Bool {return _storage._configNetworksHidden != nil}
  /// Clears the value of `configNetworksHidden`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworksHidden() {_uniqueStorage()._configNetworksHidden = nil}

  var configNetworksClientIsolation: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configNetworksClientIsolation ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configNetworksClientIsolation = newValue}
  }
  /// Returns true if `configNetworksClientIsolation` has been explicitly set.
  var hasConfigNetworksClientIsolation: Bool {return _storage._configNetworksClientIsolation != nil}
  /// Clears the value of `configNetworksClientIsolation`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworksClientIsolation() {_uniqueStorage()._configNetworksClientIsolation = nil}

  var configNetworksBandsSplit: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._configNetworksBandsSplit ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._configNetworksBandsSplit = newValue}
  }
  /// Returns true if `configNetworksBandsSplit` has been explicitly set.
  var hasConfigNetworksBandsSplit: Bool {return _storage._configNetworksBandsSplit != nil}
  /// Clears the value of `configNetworksBandsSplit`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworksBandsSplit() {_uniqueStorage()._configNetworksBandsSplit = nil}

  var wanTrafficControlCakeBytes: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._wanTrafficControlCakeBytes ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._wanTrafficControlCakeBytes = newValue}
  }
  /// Returns true if `wanTrafficControlCakeBytes` has been explicitly set.
  var hasWanTrafficControlCakeBytes: Bool {return _storage._wanTrafficControlCakeBytes != nil}
  /// Clears the value of `wanTrafficControlCakeBytes`. Subsequent reads from it will return its default value.
  mutating func clearWanTrafficControlCakeBytes() {_uniqueStorage()._wanTrafficControlCakeBytes = nil}

  var wanTrafficControlCakePackets: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._wanTrafficControlCakePackets ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._wanTrafficControlCakePackets = newValue}
  }
  /// Returns true if `wanTrafficControlCakePackets` has been explicitly set.
  var hasWanTrafficControlCakePackets: Bool {return _storage._wanTrafficControlCakePackets != nil}
  /// Clears the value of `wanTrafficControlCakePackets`. Subsequent reads from it will return its default value.
  mutating func clearWanTrafficControlCakePackets() {_uniqueStorage()._wanTrafficControlCakePackets = nil}

  var wanTrafficControlCakeDrops: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._wanTrafficControlCakeDrops ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._wanTrafficControlCakeDrops = newValue}
  }
  /// Returns true if `wanTrafficControlCakeDrops` has been explicitly set.
  var hasWanTrafficControlCakeDrops: Bool {return _storage._wanTrafficControlCakeDrops != nil}
  /// Clears the value of `wanTrafficControlCakeDrops`. Subsequent reads from it will return its default value.
  mutating func clearWanTrafficControlCakeDrops() {_uniqueStorage()._wanTrafficControlCakeDrops = nil}

  var wanTrafficControlCakeAckDrops: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._wanTrafficControlCakeAckDrops ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._wanTrafficControlCakeAckDrops = newValue}
  }
  /// Returns true if `wanTrafficControlCakeAckDrops` has been explicitly set.
  var hasWanTrafficControlCakeAckDrops: Bool {return _storage._wanTrafficControlCakeAckDrops != nil}
  /// Clears the value of `wanTrafficControlCakeAckDrops`. Subsequent reads from it will return its default value.
  mutating func clearWanTrafficControlCakeAckDrops() {_uniqueStorage()._wanTrafficControlCakeAckDrops = nil}

  var conntrackEntries: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._conntrackEntries ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._conntrackEntries = newValue}
  }
  /// Returns true if `conntrackEntries` has been explicitly set.
  var hasConntrackEntries: Bool {return _storage._conntrackEntries != nil}
  /// Clears the value of `conntrackEntries`. Subsequent reads from it will return its default value.
  mutating func clearConntrackEntries() {_uniqueStorage()._conntrackEntries = nil}

  var dhcpSecsEq0: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dhcpSecsEq0 ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dhcpSecsEq0 = newValue}
  }
  /// Returns true if `dhcpSecsEq0` has been explicitly set.
  var hasDhcpSecsEq0: Bool {return _storage._dhcpSecsEq0 != nil}
  /// Clears the value of `dhcpSecsEq0`. Subsequent reads from it will return its default value.
  mutating func clearDhcpSecsEq0() {_uniqueStorage()._dhcpSecsEq0 = nil}

  var dhcpSecsGt0: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dhcpSecsGt0 ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dhcpSecsGt0 = newValue}
  }
  /// Returns true if `dhcpSecsGt0` has been explicitly set.
  var hasDhcpSecsGt0: Bool {return _storage._dhcpSecsGt0 != nil}
  /// Clears the value of `dhcpSecsGt0`. Subsequent reads from it will return its default value.
  mutating func clearDhcpSecsGt0() {_uniqueStorage()._dhcpSecsGt0 = nil}

  var dhcpSecsGt10: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dhcpSecsGt10 ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dhcpSecsGt10 = newValue}
  }
  /// Returns true if `dhcpSecsGt10` has been explicitly set.
  var hasDhcpSecsGt10: Bool {return _storage._dhcpSecsGt10 != nil}
  /// Clears the value of `dhcpSecsGt10`. Subsequent reads from it will return its default value.
  mutating func clearDhcpSecsGt10() {_uniqueStorage()._dhcpSecsGt10 = nil}

  var dhcpSecsGt30: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dhcpSecsGt30 ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dhcpSecsGt30 = newValue}
  }
  /// Returns true if `dhcpSecsGt30` has been explicitly set.
  var hasDhcpSecsGt30: Bool {return _storage._dhcpSecsGt30 != nil}
  /// Clears the value of `dhcpSecsGt30`. Subsequent reads from it will return its default value.
  mutating func clearDhcpSecsGt30() {_uniqueStorage()._dhcpSecsGt30 = nil}

  var dhcpSecsGt60: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dhcpSecsGt60 ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dhcpSecsGt60 = newValue}
  }
  /// Returns true if `dhcpSecsGt60` has been explicitly set.
  var hasDhcpSecsGt60: Bool {return _storage._dhcpSecsGt60 != nil}
  /// Clears the value of `dhcpSecsGt60`. Subsequent reads from it will return its default value.
  mutating func clearDhcpSecsGt60() {_uniqueStorage()._dhcpSecsGt60 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_starlink_router_alerts: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var source: String = String()

  var active: Bool = false

  var start: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _start ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _end ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _start: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
  fileprivate var _end: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
}

struct SpaceX_API_Device_starlink_router_client_speedtests: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var dataRecord: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._dataRecord ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._dataRecord = newValue}
  }
  /// Returns true if `dataRecord` has been explicitly set.
  var hasDataRecord: Bool {return _storage._dataRecord != nil}
  /// Clears the value of `dataRecord`. Subsequent reads from it will return its default value.
  mutating func clearDataRecord() {_uniqueStorage()._dataRecord = nil}

  var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  var speedtestID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._speedtestID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._speedtestID = newValue}
  }
  /// Returns true if `speedtestID` has been explicitly set.
  var hasSpeedtestID: Bool {return _storage._speedtestID != nil}
  /// Clears the value of `speedtestID`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestID() {_uniqueStorage()._speedtestID = nil}

  var clientRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientRssi = newValue}
  }
  /// Returns true if `clientRssi` has been explicitly set.
  var hasClientRssi: Bool {return _storage._clientRssi != nil}
  /// Clears the value of `clientRssi`. Subsequent reads from it will return its default value.
  mutating func clearClientRssi() {_uniqueStorage()._clientRssi = nil}

  var routerRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._routerRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._routerRssi = newValue}
  }
  /// Returns true if `routerRssi` has been explicitly set.
  var hasRouterRssi: Bool {return _storage._routerRssi != nil}
  /// Clears the value of `routerRssi`. Subsequent reads from it will return its default value.
  mutating func clearRouterRssi() {_uniqueStorage()._routerRssi = nil}

  var clientIface: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientIface ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientIface = newValue}
  }
  /// Returns true if `clientIface` has been explicitly set.
  var hasClientIface: Bool {return _storage._clientIface != nil}
  /// Clears the value of `clientIface`. Subsequent reads from it will return its default value.
  mutating func clearClientIface() {_uniqueStorage()._clientIface = nil}

  var clientOui: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientOui ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientOui = newValue}
  }
  /// Returns true if `clientOui` has been explicitly set.
  var hasClientOui: Bool {return _storage._clientOui != nil}
  /// Clears the value of `clientOui`. Subsequent reads from it will return its default value.
  mutating func clearClientOui() {_uniqueStorage()._clientOui = nil}

  var clientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientTxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientTxRate = newValue}
  }
  /// Returns true if `clientTxRate` has been explicitly set.
  var hasClientTxRate: Bool {return _storage._clientTxRate != nil}
  /// Clears the value of `clientTxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientTxRate() {_uniqueStorage()._clientTxRate = nil}

  var clientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientRxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientRxRate = newValue}
  }
  /// Returns true if `clientRxRate` has been explicitly set.
  var hasClientRxRate: Bool {return _storage._clientRxRate != nil}
  /// Clears the value of `clientRxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientRxRate() {_uniqueStorage()._clientRxRate = nil}

  var clientPlatformType: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientPlatformType ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientPlatformType = newValue}
  }
  /// Returns true if `clientPlatformType` has been explicitly set.
  var hasClientPlatformType: Bool {return _storage._clientPlatformType != nil}
  /// Clears the value of `clientPlatformType`. Subsequent reads from it will return its default value.
  mutating func clearClientPlatformType() {_uniqueStorage()._clientPlatformType = nil}

  var clientAppVersion: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientAppVersion ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientAppVersion = newValue}
  }
  /// Returns true if `clientAppVersion` has been explicitly set.
  var hasClientAppVersion: Bool {return _storage._clientAppVersion != nil}
  /// Clears the value of `clientAppVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientAppVersion() {_uniqueStorage()._clientAppVersion = nil}

  var clientAppBuild: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientAppBuild ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientAppBuild = newValue}
  }
  /// Returns true if `clientAppBuild` has been explicitly set.
  var hasClientAppBuild: Bool {return _storage._clientAppBuild != nil}
  /// Clears the value of `clientAppBuild`. Subsequent reads from it will return its default value.
  mutating func clearClientAppBuild() {_uniqueStorage()._clientAppBuild = nil}

  var clientRxPhyMode: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientRxPhyMode ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientRxPhyMode = newValue}
  }
  /// Returns true if `clientRxPhyMode` has been explicitly set.
  var hasClientRxPhyMode: Bool {return _storage._clientRxPhyMode != nil}
  /// Clears the value of `clientRxPhyMode`. Subsequent reads from it will return its default value.
  mutating func clearClientRxPhyMode() {_uniqueStorage()._clientRxPhyMode = nil}

  var clientRxSpatialStreams: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientRxSpatialStreams ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientRxSpatialStreams = newValue}
  }
  /// Returns true if `clientRxSpatialStreams` has been explicitly set.
  var hasClientRxSpatialStreams: Bool {return _storage._clientRxSpatialStreams != nil}
  /// Clears the value of `clientRxSpatialStreams`. Subsequent reads from it will return its default value.
  mutating func clearClientRxSpatialStreams() {_uniqueStorage()._clientRxSpatialStreams = nil}

  var clientRxMcs: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientRxMcs ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientRxMcs = newValue}
  }
  /// Returns true if `clientRxMcs` has been explicitly set.
  var hasClientRxMcs: Bool {return _storage._clientRxMcs != nil}
  /// Clears the value of `clientRxMcs`. Subsequent reads from it will return its default value.
  mutating func clearClientRxMcs() {_uniqueStorage()._clientRxMcs = nil}

  var clientDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._clientDownloadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._clientDownloadStartTime = newValue}
  }
  /// Returns true if `clientDownloadStartTime` has been explicitly set.
  var hasClientDownloadStartTime: Bool {return _storage._clientDownloadStartTime != nil}
  /// Clears the value of `clientDownloadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearClientDownloadStartTime() {_uniqueStorage()._clientDownloadStartTime = nil}

  var clientUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._clientUploadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._clientUploadStartTime = newValue}
  }
  /// Returns true if `clientUploadStartTime` has been explicitly set.
  var hasClientUploadStartTime: Bool {return _storage._clientUploadStartTime != nil}
  /// Clears the value of `clientUploadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearClientUploadStartTime() {_uniqueStorage()._clientUploadStartTime = nil}

  var clientDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientDownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientDownloadMbpsAvg = newValue}
  }
  /// Returns true if `clientDownloadMbpsAvg` has been explicitly set.
  var hasClientDownloadMbpsAvg: Bool {return _storage._clientDownloadMbpsAvg != nil}
  /// Clears the value of `clientDownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearClientDownloadMbpsAvg() {_uniqueStorage()._clientDownloadMbpsAvg = nil}

  var clientUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientUploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientUploadMbpsAvg = newValue}
  }
  /// Returns true if `clientUploadMbpsAvg` has been explicitly set.
  var hasClientUploadMbpsAvg: Bool {return _storage._clientUploadMbpsAvg != nil}
  /// Clears the value of `clientUploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearClientUploadMbpsAvg() {_uniqueStorage()._clientUploadMbpsAvg = nil}

  var clientTarget: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientTarget ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientTarget = newValue}
  }
  /// Returns true if `clientTarget` has been explicitly set.
  var hasClientTarget: Bool {return _storage._clientTarget != nil}
  /// Clears the value of `clientTarget`. Subsequent reads from it will return its default value.
  mutating func clearClientTarget() {_uniqueStorage()._clientTarget = nil}

  var clientTcpStreams: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientTcpStreams ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientTcpStreams = newValue}
  }
  /// Returns true if `clientTcpStreams` has been explicitly set.
  var hasClientTcpStreams: Bool {return _storage._clientTcpStreams != nil}
  /// Clears the value of `clientTcpStreams`. Subsequent reads from it will return its default value.
  mutating func clearClientTcpStreams() {_uniqueStorage()._clientTcpStreams = nil}

  var routerDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._routerDownloadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._routerDownloadStartTime = newValue}
  }
  /// Returns true if `routerDownloadStartTime` has been explicitly set.
  var hasRouterDownloadStartTime: Bool {return _storage._routerDownloadStartTime != nil}
  /// Clears the value of `routerDownloadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearRouterDownloadStartTime() {_uniqueStorage()._routerDownloadStartTime = nil}

  var routerUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._routerUploadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._routerUploadStartTime = newValue}
  }
  /// Returns true if `routerUploadStartTime` has been explicitly set.
  var hasRouterUploadStartTime: Bool {return _storage._routerUploadStartTime != nil}
  /// Clears the value of `routerUploadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearRouterUploadStartTime() {_uniqueStorage()._routerUploadStartTime = nil}

  var routerDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._routerDownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._routerDownloadMbpsAvg = newValue}
  }
  /// Returns true if `routerDownloadMbpsAvg` has been explicitly set.
  var hasRouterDownloadMbpsAvg: Bool {return _storage._routerDownloadMbpsAvg != nil}
  /// Clears the value of `routerDownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearRouterDownloadMbpsAvg() {_uniqueStorage()._routerDownloadMbpsAvg = nil}

  var routerUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._routerUploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._routerUploadMbpsAvg = newValue}
  }
  /// Returns true if `routerUploadMbpsAvg` has been explicitly set.
  var hasRouterUploadMbpsAvg: Bool {return _storage._routerUploadMbpsAvg != nil}
  /// Clears the value of `routerUploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearRouterUploadMbpsAvg() {_uniqueStorage()._routerUploadMbpsAvg = nil}

  var routerTarget: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._routerTarget ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._routerTarget = newValue}
  }
  /// Returns true if `routerTarget` has been explicitly set.
  var hasRouterTarget: Bool {return _storage._routerTarget != nil}
  /// Clears the value of `routerTarget`. Subsequent reads from it will return its default value.
  mutating func clearRouterTarget() {_uniqueStorage()._routerTarget = nil}

  var routerTcpStreams: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._routerTcpStreams ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._routerTcpStreams = newValue}
  }
  /// Returns true if `routerTcpStreams` has been explicitly set.
  var hasRouterTcpStreams: Bool {return _storage._routerTcpStreams != nil}
  /// Clears the value of `routerTcpStreams`. Subsequent reads from it will return its default value.
  mutating func clearRouterTcpStreams() {_uniqueStorage()._routerTcpStreams = nil}

  var wifiDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._wifiDownloadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._wifiDownloadStartTime = newValue}
  }
  /// Returns true if `wifiDownloadStartTime` has been explicitly set.
  var hasWifiDownloadStartTime: Bool {return _storage._wifiDownloadStartTime != nil}
  /// Clears the value of `wifiDownloadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearWifiDownloadStartTime() {_uniqueStorage()._wifiDownloadStartTime = nil}

  var wifiUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._wifiUploadStartTime ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._wifiUploadStartTime = newValue}
  }
  /// Returns true if `wifiUploadStartTime` has been explicitly set.
  var hasWifiUploadStartTime: Bool {return _storage._wifiUploadStartTime != nil}
  /// Clears the value of `wifiUploadStartTime`. Subsequent reads from it will return its default value.
  mutating func clearWifiUploadStartTime() {_uniqueStorage()._wifiUploadStartTime = nil}

  var wifiDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._wifiDownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._wifiDownloadMbpsAvg = newValue}
  }
  /// Returns true if `wifiDownloadMbpsAvg` has been explicitly set.
  var hasWifiDownloadMbpsAvg: Bool {return _storage._wifiDownloadMbpsAvg != nil}
  /// Clears the value of `wifiDownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearWifiDownloadMbpsAvg() {_uniqueStorage()._wifiDownloadMbpsAvg = nil}

  var wifiUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._wifiUploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._wifiUploadMbpsAvg = newValue}
  }
  /// Returns true if `wifiUploadMbpsAvg` has been explicitly set.
  var hasWifiUploadMbpsAvg: Bool {return _storage._wifiUploadMbpsAvg != nil}
  /// Clears the value of `wifiUploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearWifiUploadMbpsAvg() {_uniqueStorage()._wifiUploadMbpsAvg = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_StarlinkRouterClients: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var routerID: String {
    get {return _storage._routerID}
    set {_uniqueStorage()._routerID = newValue}
  }

  var timestamp: SpaceX_API_Telemetron_Public_Common_TimestampInfo {
    get {return _storage._timestamp ?? SpaceX_API_Telemetron_Public_Common_TimestampInfo()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var clientID: UInt32 {
    get {return _storage._clientID}
    set {_uniqueStorage()._clientID = newValue}
  }

  var clientTelemIndex: String {
    get {return _storage._clientTelemIndex}
    set {_uniqueStorage()._clientTelemIndex = newValue}
  }

  var routerHw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._routerHw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._routerHw = newValue}
  }
  /// Returns true if `routerHw` has been explicitly set.
  var hasRouterHw: Bool {return _storage._routerHw != nil}
  /// Clears the value of `routerHw`. Subsequent reads from it will return its default value.
  mutating func clearRouterHw() {_uniqueStorage()._routerHw = nil}

  var routerSw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._routerSw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._routerSw = newValue}
  }
  /// Returns true if `routerSw` has been explicitly set.
  var hasRouterSw: Bool {return _storage._routerSw != nil}
  /// Clears the value of `routerSw`. Subsequent reads from it will return its default value.
  mutating func clearRouterSw() {_uniqueStorage()._routerSw = nil}

  var clientRouterID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientRouterID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientRouterID = newValue}
  }
  /// Returns true if `clientRouterID` has been explicitly set.
  var hasClientRouterID: Bool {return _storage._clientRouterID != nil}
  /// Clears the value of `clientRouterID`. Subsequent reads from it will return its default value.
  mutating func clearClientRouterID() {_uniqueStorage()._clientRouterID = nil}

  var clientHw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientHw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientHw = newValue}
  }
  /// Returns true if `clientHw` has been explicitly set.
  var hasClientHw: Bool {return _storage._clientHw != nil}
  /// Clears the value of `clientHw`. Subsequent reads from it will return its default value.
  mutating func clearClientHw() {_uniqueStorage()._clientHw = nil}

  var clientSw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientSw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientSw = newValue}
  }
  /// Returns true if `clientSw` has been explicitly set.
  var hasClientSw: Bool {return _storage._clientSw != nil}
  /// Clears the value of `clientSw`. Subsequent reads from it will return its default value.
  mutating func clearClientSw() {_uniqueStorage()._clientSw = nil}

  var oui: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._oui ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._oui = newValue}
  }
  /// Returns true if `oui` has been explicitly set.
  var hasOui: Bool {return _storage._oui != nil}
  /// Clears the value of `oui`. Subsequent reads from it will return its default value.
  mutating func clearOui() {_uniqueStorage()._oui = nil}

  var upstreamID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._upstreamID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._upstreamID = newValue}
  }
  /// Returns true if `upstreamID` has been explicitly set.
  var hasUpstreamID: Bool {return _storage._upstreamID != nil}
  /// Clears the value of `upstreamID`. Subsequent reads from it will return its default value.
  mutating func clearUpstreamID() {_uniqueStorage()._upstreamID = nil}

  var isRepeater: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._isRepeater ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._isRepeater = newValue}
  }
  /// Returns true if `isRepeater` has been explicitly set.
  var hasIsRepeater: Bool {return _storage._isRepeater != nil}
  /// Clears the value of `isRepeater`. Subsequent reads from it will return its default value.
  mutating func clearIsRepeater() {_uniqueStorage()._isRepeater = nil}

  var connectedS: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._connectedS ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._connectedS = newValue}
  }
  /// Returns true if `connectedS` has been explicitly set.
  var hasConnectedS: Bool {return _storage._connectedS != nil}
  /// Clears the value of `connectedS`. Subsequent reads from it will return its default value.
  mutating func clearConnectedS() {_uniqueStorage()._connectedS = nil}

  var interface: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._interface ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._interface = newValue}
  }
  /// Returns true if `interface` has been explicitly set.
  var hasInterface: Bool {return _storage._interface != nil}
  /// Clears the value of `interface`. Subsequent reads from it will return its default value.
  mutating func clearInterface() {_uniqueStorage()._interface = nil}

  var radioChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radioChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radioChannel = newValue}
  }
  /// Returns true if `radioChannel` has been explicitly set.
  var hasRadioChannel: Bool {return _storage._radioChannel != nil}
  /// Clears the value of `radioChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadioChannel() {_uniqueStorage()._radioChannel = nil}

  var rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._rssi = newValue}
  }
  /// Returns true if `rssi` has been explicitly set.
  var hasRssi: Bool {return _storage._rssi != nil}
  /// Clears the value of `rssi`. Subsequent reads from it will return its default value.
  mutating func clearRssi() {_uniqueStorage()._rssi = nil}

  var rxMcs: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._rxMcs ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._rxMcs = newValue}
  }
  /// Returns true if `rxMcs` has been explicitly set.
  var hasRxMcs: Bool {return _storage._rxMcs != nil}
  /// Clears the value of `rxMcs`. Subsequent reads from it will return its default value.
  mutating func clearRxMcs() {_uniqueStorage()._rxMcs = nil}

  var txMcs: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._txMcs ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._txMcs = newValue}
  }
  /// Returns true if `txMcs` has been explicitly set.
  var hasTxMcs: Bool {return _storage._txMcs != nil}
  /// Clears the value of `txMcs`. Subsequent reads from it will return its default value.
  mutating func clearTxMcs() {_uniqueStorage()._txMcs = nil}

  var rxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._rxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._rxRate = newValue}
  }
  /// Returns true if `rxRate` has been explicitly set.
  var hasRxRate: Bool {return _storage._rxRate != nil}
  /// Clears the value of `rxRate`. Subsequent reads from it will return its default value.
  mutating func clearRxRate() {_uniqueStorage()._rxRate = nil}

  var txRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._txRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._txRate = newValue}
  }
  /// Returns true if `txRate` has been explicitly set.
  var hasTxRate: Bool {return _storage._txRate != nil}
  /// Clears the value of `txRate`. Subsequent reads from it will return its default value.
  mutating func clearTxRate() {_uniqueStorage()._txRate = nil}

  var rxBandwidth: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._rxBandwidth ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._rxBandwidth = newValue}
  }
  /// Returns true if `rxBandwidth` has been explicitly set.
  var hasRxBandwidth: Bool {return _storage._rxBandwidth != nil}
  /// Clears the value of `rxBandwidth`. Subsequent reads from it will return its default value.
  mutating func clearRxBandwidth() {_uniqueStorage()._rxBandwidth = nil}

  var rxSpatialStreams: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._rxSpatialStreams ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._rxSpatialStreams = newValue}
  }
  /// Returns true if `rxSpatialStreams` has been explicitly set.
  var hasRxSpatialStreams: Bool {return _storage._rxSpatialStreams != nil}
  /// Clears the value of `rxSpatialStreams`. Subsequent reads from it will return its default value.
  mutating func clearRxSpatialStreams() {_uniqueStorage()._rxSpatialStreams = nil}

  var rxPhyMode: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._rxPhyMode ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._rxPhyMode = newValue}
  }
  /// Returns true if `rxPhyMode` has been explicitly set.
  var hasRxPhyMode: Bool {return _storage._rxPhyMode != nil}
  /// Clears the value of `rxPhyMode`. Subsequent reads from it will return its default value.
  mutating func clearRxPhyMode() {_uniqueStorage()._rxPhyMode = nil}

  var meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._meshHops ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._meshHops = newValue}
  }
  /// Returns true if `meshHops` has been explicitly set.
  var hasMeshHops: Bool {return _storage._meshHops != nil}
  /// Clears the value of `meshHops`. Subsequent reads from it will return its default value.
  mutating func clearMeshHops() {_uniqueStorage()._meshHops = nil}

  var speedtestUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestUploadMbps = newValue}
  }
  /// Returns true if `speedtestUploadMbps` has been explicitly set.
  var hasSpeedtestUploadMbps: Bool {return _storage._speedtestUploadMbps != nil}
  /// Clears the value of `speedtestUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestUploadMbps() {_uniqueStorage()._speedtestUploadMbps = nil}

  var speedtestDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestDownloadMbps = newValue}
  }
  /// Returns true if `speedtestDownloadMbps` has been explicitly set.
  var hasSpeedtestDownloadMbps: Bool {return _storage._speedtestDownloadMbps != nil}
  /// Clears the value of `speedtestDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestDownloadMbps() {_uniqueStorage()._speedtestDownloadMbps = nil}

  var siteSurveyRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._siteSurveyRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._siteSurveyRssi = newValue}
  }
  /// Returns true if `siteSurveyRssi` has been explicitly set.
  var hasSiteSurveyRssi: Bool {return _storage._siteSurveyRssi != nil}
  /// Clears the value of `siteSurveyRssi`. Subsequent reads from it will return its default value.
  mutating func clearSiteSurveyRssi() {_uniqueStorage()._siteSurveyRssi = nil}

  var siteSurveyEstRxRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._siteSurveyEstRxRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._siteSurveyEstRxRate = newValue}
  }
  /// Returns true if `siteSurveyEstRxRate` has been explicitly set.
  var hasSiteSurveyEstRxRate: Bool {return _storage._siteSurveyEstRxRate != nil}
  /// Clears the value of `siteSurveyEstRxRate`. Subsequent reads from it will return its default value.
  mutating func clearSiteSurveyEstRxRate() {_uniqueStorage()._siteSurveyEstRxRate = nil}

  var estControllerThroughputMbps: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._estControllerThroughputMbps ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._estControllerThroughputMbps = newValue}
  }
  /// Returns true if `estControllerThroughputMbps` has been explicitly set.
  var hasEstControllerThroughputMbps: Bool {return _storage._estControllerThroughputMbps != nil}
  /// Clears the value of `estControllerThroughputMbps`. Subsequent reads from it will return its default value.
  mutating func clearEstControllerThroughputMbps() {_uniqueStorage()._estControllerThroughputMbps = nil}

  var pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDropRateLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDropRateLast1H = newValue}
  }
  /// Returns true if `pingDropRateLast1H` has been explicitly set.
  var hasPingDropRateLast1H: Bool {return _storage._pingDropRateLast1H != nil}
  /// Clears the value of `pingDropRateLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDropRateLast1H() {_uniqueStorage()._pingDropRateLast1H = nil}

  var pingLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingLatencyLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingLatencyLast1H = newValue}
  }
  /// Returns true if `pingLatencyLast1H` has been explicitly set.
  var hasPingLatencyLast1H: Bool {return _storage._pingLatencyLast1H != nil}
  /// Clears the value of `pingLatencyLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingLatencyLast1H() {_uniqueStorage()._pingLatencyLast1H = nil}

  var steerState: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._steerState ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._steerState = newValue}
  }
  /// Returns true if `steerState` has been explicitly set.
  var hasSteerState: Bool {return _storage._steerState != nil}
  /// Clears the value of `steerState`. Subsequent reads from it will return its default value.
  mutating func clearSteerState() {_uniqueStorage()._steerState = nil}

  var blocked: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._blocked ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._blocked = newValue}
  }
  /// Returns true if `blocked` has been explicitly set.
  var hasBlocked: Bool {return _storage._blocked != nil}
  /// Clears the value of `blocked`. Subsequent reads from it will return its default value.
  mutating func clearBlocked() {_uniqueStorage()._blocked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WifiSetClientGivenNameRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var clientName: SpaceX_API_Device_ClientName {
    get {return _clientName ?? SpaceX_API_Device_ClientName()}
    set {_clientName = newValue}
  }
  /// Returns true if `clientName` has been explicitly set.
  var hasClientName: Bool {return self._clientName != nil}
  /// Clears the value of `clientName`. Subsequent reads from it will return its default value.
  mutating func clearClientName() {self._clientName = nil}

  var clientConfig: SpaceX_API_Device_ClientConfig {
    get {return _clientConfig ?? SpaceX_API_Device_ClientConfig()}
    set {_clientConfig = newValue}
  }
  /// Returns true if `clientConfig` has been explicitly set.
  var hasClientConfig: Bool {return self._clientConfig != nil}
  /// Clears the value of `clientConfig`. Subsequent reads from it will return its default value.
  mutating func clearClientConfig() {self._clientConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientName: SpaceX_API_Device_ClientName? = nil
  fileprivate var _clientConfig: SpaceX_API_Device_ClientConfig? = nil
}

struct SpaceX_API_Device_WifiSelfTestRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiSelfTestResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selfTest: SpaceX_API_Device_WifiSelfTest {
    get {return _selfTest ?? SpaceX_API_Device_WifiSelfTest()}
    set {_selfTest = newValue}
  }
  /// Returns true if `selfTest` has been explicitly set.
  var hasSelfTest: Bool {return self._selfTest != nil}
  /// Clears the value of `selfTest`. Subsequent reads from it will return its default value.
  mutating func clearSelfTest() {self._selfTest = nil}

  var json: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _selfTest: SpaceX_API_Device_WifiSelfTest? = nil
}

struct SpaceX_API_Device_WifiRunSelfTestRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiRfTestRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var numMeasurements: UInt32 = 0

  var channel2Ghz: UInt32 = 0

  var channel5Ghz: UInt32 = 0

  var channel5GhzHigh: UInt32 = 0

  var mcs2Ghz: UInt32 = 0

  var mcs5Ghz: UInt32 = 0

  var mcs5GhzHigh: UInt32 = 0

  var phyMode2Ghz: UInt32 = 0

  var phyMode5Ghz: UInt32 = 0

  var phyMode5GhzHigh: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiRfTestResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var report: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetFirewallRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGetFirewallResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iptables: String = String()

  var iptables6: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiTogglePoeNegotiationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiCalibrationModeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_starlink_router_hourly_metrics_v2: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._id ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var timestampDate: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._timestampDate ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._timestampDate = newValue}
  }
  /// Returns true if `timestampDate` has been explicitly set.
  var hasTimestampDate: Bool {return _storage._timestampDate != nil}
  /// Clears the value of `timestampDate`. Subsequent reads from it will return its default value.
  mutating func clearTimestampDate() {_uniqueStorage()._timestampDate = nil}

  var timestampHour: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._timestampHour ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._timestampHour = newValue}
  }
  /// Returns true if `timestampHour` has been explicitly set.
  var hasTimestampHour: Bool {return _storage._timestampHour != nil}
  /// Clears the value of `timestampHour`. Subsequent reads from it will return its default value.
  mutating func clearTimestampHour() {_uniqueStorage()._timestampHour = nil}

  var sysHwGen: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysHwGen ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysHwGen = newValue}
  }
  /// Returns true if `sysHwGen` has been explicitly set.
  var hasSysHwGen: Bool {return _storage._sysHwGen != nil}
  /// Clears the value of `sysHwGen`. Subsequent reads from it will return its default value.
  mutating func clearSysHwGen() {_uniqueStorage()._sysHwGen = nil}

  var sysSw: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._sysSw ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._sysSw = newValue}
  }
  /// Returns true if `sysSw` has been explicitly set.
  var hasSysSw: Bool {return _storage._sysSw != nil}
  /// Clears the value of `sysSw`. Subsequent reads from it will return its default value.
  mutating func clearSysSw() {_uniqueStorage()._sysSw = nil}

  var sysCountry: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._sysCountry ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._sysCountry = newValue}
  }
  /// Returns true if `sysCountry` has been explicitly set.
  var hasSysCountry: Bool {return _storage._sysCountry != nil}
  /// Clears the value of `sysCountry`. Subsequent reads from it will return its default value.
  mutating func clearSysCountry() {_uniqueStorage()._sysCountry = nil}

  var sysIsDev: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysIsDev ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysIsDev = newValue}
  }
  /// Returns true if `sysIsDev` has been explicitly set.
  var hasSysIsDev: Bool {return _storage._sysIsDev != nil}
  /// Clears the value of `sysIsDev`. Subsequent reads from it will return its default value.
  mutating func clearSysIsDev() {_uniqueStorage()._sysIsDev = nil}

  var sysAllocFds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysAllocFds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysAllocFds = newValue}
  }
  /// Returns true if `sysAllocFds` has been explicitly set.
  var hasSysAllocFds: Bool {return _storage._sysAllocFds != nil}
  /// Clears the value of `sysAllocFds`. Subsequent reads from it will return its default value.
  mutating func clearSysAllocFds() {_uniqueStorage()._sysAllocFds = nil}

  var sysCpuUsage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._sysCpuUsage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._sysCpuUsage = newValue}
  }
  /// Returns true if `sysCpuUsage` has been explicitly set.
  var hasSysCpuUsage: Bool {return _storage._sysCpuUsage != nil}
  /// Clears the value of `sysCpuUsage`. Subsequent reads from it will return its default value.
  mutating func clearSysCpuUsage() {_uniqueStorage()._sysCpuUsage = nil}

  var sysMemFreeKb: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._sysMemFreeKb ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._sysMemFreeKb = newValue}
  }
  /// Returns true if `sysMemFreeKb` has been explicitly set.
  var hasSysMemFreeKb: Bool {return _storage._sysMemFreeKb != nil}
  /// Clears the value of `sysMemFreeKb`. Subsequent reads from it will return its default value.
  mutating func clearSysMemFreeKb() {_uniqueStorage()._sysMemFreeKb = nil}

  var sysBootcount: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._sysBootcount ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._sysBootcount = newValue}
  }
  /// Returns true if `sysBootcount` has been explicitly set.
  var hasSysBootcount: Bool {return _storage._sysBootcount != nil}
  /// Clears the value of `sysBootcount`. Subsequent reads from it will return its default value.
  mutating func clearSysBootcount() {_uniqueStorage()._sysBootcount = nil}

  var sysPartitionsEqual: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._sysPartitionsEqual ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._sysPartitionsEqual = newValue}
  }
  /// Returns true if `sysPartitionsEqual` has been explicitly set.
  var hasSysPartitionsEqual: Bool {return _storage._sysPartitionsEqual != nil}
  /// Clears the value of `sysPartitionsEqual`. Subsequent reads from it will return its default value.
  mutating func clearSysPartitionsEqual() {_uniqueStorage()._sysPartitionsEqual = nil}

  var sysUptimeSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._sysUptimeSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._sysUptimeSeconds = newValue}
  }
  /// Returns true if `sysUptimeSeconds` has been explicitly set.
  var hasSysUptimeSeconds: Bool {return _storage._sysUptimeSeconds != nil}
  /// Clears the value of `sysUptimeSeconds`. Subsequent reads from it will return its default value.
  mutating func clearSysUptimeSeconds() {_uniqueStorage()._sysUptimeSeconds = nil}

  var sysAntiRollbackVersion: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _storage._sysAntiRollbackVersion ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_uniqueStorage()._sysAntiRollbackVersion = newValue}
  }
  /// Returns true if `sysAntiRollbackVersion` has been explicitly set.
  var hasSysAntiRollbackVersion: Bool {return _storage._sysAntiRollbackVersion != nil}
  /// Clears the value of `sysAntiRollbackVersion`. Subsequent reads from it will return its default value.
  mutating func clearSysAntiRollbackVersion() {_uniqueStorage()._sysAntiRollbackVersion = nil}

  var radios2GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzChannel = newValue}
  }
  /// Returns true if `radios2GhzChannel` has been explicitly set.
  var hasRadios2GhzChannel: Bool {return _storage._radios2GhzChannel != nil}
  /// Clears the value of `radios2GhzChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzChannel() {_uniqueStorage()._radios2GhzChannel = nil}

  var radios2GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna1Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna1Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna1Rssi` has been explicitly set.
  var hasRadios2GhzAntenna1Rssi: Bool {return _storage._radios2GhzAntenna1Rssi != nil}
  /// Clears the value of `radios2GhzAntenna1Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna1Rssi() {_uniqueStorage()._radios2GhzAntenna1Rssi = nil}

  var radios2GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna2Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna2Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna2Rssi` has been explicitly set.
  var hasRadios2GhzAntenna2Rssi: Bool {return _storage._radios2GhzAntenna2Rssi != nil}
  /// Clears the value of `radios2GhzAntenna2Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna2Rssi() {_uniqueStorage()._radios2GhzAntenna2Rssi = nil}

  var radios2GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzAntenna3Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzAntenna3Rssi = newValue}
  }
  /// Returns true if `radios2GhzAntenna3Rssi` has been explicitly set.
  var hasRadios2GhzAntenna3Rssi: Bool {return _storage._radios2GhzAntenna3Rssi != nil}
  /// Clears the value of `radios2GhzAntenna3Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzAntenna3Rssi() {_uniqueStorage()._radios2GhzAntenna3Rssi = nil}

  var radios2GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzIfaceCount ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzIfaceCount = newValue}
  }
  /// Returns true if `radios2GhzIfaceCount` has been explicitly set.
  var hasRadios2GhzIfaceCount: Bool {return _storage._radios2GhzIfaceCount != nil}
  /// Clears the value of `radios2GhzIfaceCount`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzIfaceCount() {_uniqueStorage()._radios2GhzIfaceCount = nil}

  var radios2GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzChanBusyFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzChanBusyFraction = newValue}
  }
  /// Returns true if `radios2GhzChanBusyFraction` has been explicitly set.
  var hasRadios2GhzChanBusyFraction: Bool {return _storage._radios2GhzChanBusyFraction != nil}
  /// Clears the value of `radios2GhzChanBusyFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzChanBusyFraction() {_uniqueStorage()._radios2GhzChanBusyFraction = nil}

  var radios2GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzEdccaFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzEdccaFraction = newValue}
  }
  /// Returns true if `radios2GhzEdccaFraction` has been explicitly set.
  var hasRadios2GhzEdccaFraction: Bool {return _storage._radios2GhzEdccaFraction != nil}
  /// Clears the value of `radios2GhzEdccaFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzEdccaFraction() {_uniqueStorage()._radios2GhzEdccaFraction = nil}

  var radios2GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzOverlappingBssFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzOverlappingBssFraction = newValue}
  }
  /// Returns true if `radios2GhzOverlappingBssFraction` has been explicitly set.
  var hasRadios2GhzOverlappingBssFraction: Bool {return _storage._radios2GhzOverlappingBssFraction != nil}
  /// Clears the value of `radios2GhzOverlappingBssFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzOverlappingBssFraction() {_uniqueStorage()._radios2GhzOverlappingBssFraction = nil}

  var radios2GhzRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzRxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzRxBytes = newValue}
  }
  /// Returns true if `radios2GhzRxBytes` has been explicitly set.
  var hasRadios2GhzRxBytes: Bool {return _storage._radios2GhzRxBytes != nil}
  /// Clears the value of `radios2GhzRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxBytes() {_uniqueStorage()._radios2GhzRxBytes = nil}

  var radios2GhzRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzRxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzRxPackets = newValue}
  }
  /// Returns true if `radios2GhzRxPackets` has been explicitly set.
  var hasRadios2GhzRxPackets: Bool {return _storage._radios2GhzRxPackets != nil}
  /// Clears the value of `radios2GhzRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxPackets() {_uniqueStorage()._radios2GhzRxPackets = nil}

  var radios2GhzRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzRxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzRxErrors = newValue}
  }
  /// Returns true if `radios2GhzRxErrors` has been explicitly set.
  var hasRadios2GhzRxErrors: Bool {return _storage._radios2GhzRxErrors != nil}
  /// Clears the value of `radios2GhzRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxErrors() {_uniqueStorage()._radios2GhzRxErrors = nil}

  var radios2GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzRxFrameErrors = newValue}
  }
  /// Returns true if `radios2GhzRxFrameErrors` has been explicitly set.
  var hasRadios2GhzRxFrameErrors: Bool {return _storage._radios2GhzRxFrameErrors != nil}
  /// Clears the value of `radios2GhzRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxFrameErrors() {_uniqueStorage()._radios2GhzRxFrameErrors = nil}

  var radios2GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzRxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzRxPacketErrorRate = newValue}
  }
  /// Returns true if `radios2GhzRxPacketErrorRate` has been explicitly set.
  var hasRadios2GhzRxPacketErrorRate: Bool {return _storage._radios2GhzRxPacketErrorRate != nil}
  /// Clears the value of `radios2GhzRxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxPacketErrorRate() {_uniqueStorage()._radios2GhzRxPacketErrorRate = nil}

  var radios2GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzRxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzRxAirtimeFraction = newValue}
  }
  /// Returns true if `radios2GhzRxAirtimeFraction` has been explicitly set.
  var hasRadios2GhzRxAirtimeFraction: Bool {return _storage._radios2GhzRxAirtimeFraction != nil}
  /// Clears the value of `radios2GhzRxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzRxAirtimeFraction() {_uniqueStorage()._radios2GhzRxAirtimeFraction = nil}

  var radios2GhzTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzTxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzTxBytes = newValue}
  }
  /// Returns true if `radios2GhzTxBytes` has been explicitly set.
  var hasRadios2GhzTxBytes: Bool {return _storage._radios2GhzTxBytes != nil}
  /// Clears the value of `radios2GhzTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxBytes() {_uniqueStorage()._radios2GhzTxBytes = nil}

  var radios2GhzTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzTxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzTxPackets = newValue}
  }
  /// Returns true if `radios2GhzTxPackets` has been explicitly set.
  var hasRadios2GhzTxPackets: Bool {return _storage._radios2GhzTxPackets != nil}
  /// Clears the value of `radios2GhzTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxPackets() {_uniqueStorage()._radios2GhzTxPackets = nil}

  var radios2GhzTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzTxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzTxErrors = newValue}
  }
  /// Returns true if `radios2GhzTxErrors` has been explicitly set.
  var hasRadios2GhzTxErrors: Bool {return _storage._radios2GhzTxErrors != nil}
  /// Clears the value of `radios2GhzTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxErrors() {_uniqueStorage()._radios2GhzTxErrors = nil}

  var radios2GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzTxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzTxPacketErrorRate = newValue}
  }
  /// Returns true if `radios2GhzTxPacketErrorRate` has been explicitly set.
  var hasRadios2GhzTxPacketErrorRate: Bool {return _storage._radios2GhzTxPacketErrorRate != nil}
  /// Clears the value of `radios2GhzTxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxPacketErrorRate() {_uniqueStorage()._radios2GhzTxPacketErrorRate = nil}

  var radios2GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzTxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzTxAirtimeFraction = newValue}
  }
  /// Returns true if `radios2GhzTxAirtimeFraction` has been explicitly set.
  var hasRadios2GhzTxAirtimeFraction: Bool {return _storage._radios2GhzTxAirtimeFraction != nil}
  /// Clears the value of `radios2GhzTxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzTxAirtimeFraction() {_uniqueStorage()._radios2GhzTxAirtimeFraction = nil}

  var radios5GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzChannel ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzChannel = newValue}
  }
  /// Returns true if `radios5GhzChannel` has been explicitly set.
  var hasRadios5GhzChannel: Bool {return _storage._radios5GhzChannel != nil}
  /// Clears the value of `radios5GhzChannel`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzChannel() {_uniqueStorage()._radios5GhzChannel = nil}

  var radios5GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna1Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna1Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna1Rssi` has been explicitly set.
  var hasRadios5GhzAntenna1Rssi: Bool {return _storage._radios5GhzAntenna1Rssi != nil}
  /// Clears the value of `radios5GhzAntenna1Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna1Rssi() {_uniqueStorage()._radios5GhzAntenna1Rssi = nil}

  var radios5GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna2Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna2Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna2Rssi` has been explicitly set.
  var hasRadios5GhzAntenna2Rssi: Bool {return _storage._radios5GhzAntenna2Rssi != nil}
  /// Clears the value of `radios5GhzAntenna2Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna2Rssi() {_uniqueStorage()._radios5GhzAntenna2Rssi = nil}

  var radios5GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzAntenna3Rssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzAntenna3Rssi = newValue}
  }
  /// Returns true if `radios5GhzAntenna3Rssi` has been explicitly set.
  var hasRadios5GhzAntenna3Rssi: Bool {return _storage._radios5GhzAntenna3Rssi != nil}
  /// Clears the value of `radios5GhzAntenna3Rssi`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzAntenna3Rssi() {_uniqueStorage()._radios5GhzAntenna3Rssi = nil}

  var radios5GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzIfaceCount ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzIfaceCount = newValue}
  }
  /// Returns true if `radios5GhzIfaceCount` has been explicitly set.
  var hasRadios5GhzIfaceCount: Bool {return _storage._radios5GhzIfaceCount != nil}
  /// Clears the value of `radios5GhzIfaceCount`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzIfaceCount() {_uniqueStorage()._radios5GhzIfaceCount = nil}

  var radios5GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzChanBusyFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzChanBusyFraction = newValue}
  }
  /// Returns true if `radios5GhzChanBusyFraction` has been explicitly set.
  var hasRadios5GhzChanBusyFraction: Bool {return _storage._radios5GhzChanBusyFraction != nil}
  /// Clears the value of `radios5GhzChanBusyFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzChanBusyFraction() {_uniqueStorage()._radios5GhzChanBusyFraction = nil}

  var radios5GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzEdccaFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzEdccaFraction = newValue}
  }
  /// Returns true if `radios5GhzEdccaFraction` has been explicitly set.
  var hasRadios5GhzEdccaFraction: Bool {return _storage._radios5GhzEdccaFraction != nil}
  /// Clears the value of `radios5GhzEdccaFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzEdccaFraction() {_uniqueStorage()._radios5GhzEdccaFraction = nil}

  var radios5GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzOverlappingBssFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzOverlappingBssFraction = newValue}
  }
  /// Returns true if `radios5GhzOverlappingBssFraction` has been explicitly set.
  var hasRadios5GhzOverlappingBssFraction: Bool {return _storage._radios5GhzOverlappingBssFraction != nil}
  /// Clears the value of `radios5GhzOverlappingBssFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzOverlappingBssFraction() {_uniqueStorage()._radios5GhzOverlappingBssFraction = nil}

  var radios5GhzRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzRxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzRxBytes = newValue}
  }
  /// Returns true if `radios5GhzRxBytes` has been explicitly set.
  var hasRadios5GhzRxBytes: Bool {return _storage._radios5GhzRxBytes != nil}
  /// Clears the value of `radios5GhzRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxBytes() {_uniqueStorage()._radios5GhzRxBytes = nil}

  var radios5GhzRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzRxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzRxPackets = newValue}
  }
  /// Returns true if `radios5GhzRxPackets` has been explicitly set.
  var hasRadios5GhzRxPackets: Bool {return _storage._radios5GhzRxPackets != nil}
  /// Clears the value of `radios5GhzRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxPackets() {_uniqueStorage()._radios5GhzRxPackets = nil}

  var radios5GhzRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzRxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzRxErrors = newValue}
  }
  /// Returns true if `radios5GhzRxErrors` has been explicitly set.
  var hasRadios5GhzRxErrors: Bool {return _storage._radios5GhzRxErrors != nil}
  /// Clears the value of `radios5GhzRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxErrors() {_uniqueStorage()._radios5GhzRxErrors = nil}

  var radios5GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzRxFrameErrors = newValue}
  }
  /// Returns true if `radios5GhzRxFrameErrors` has been explicitly set.
  var hasRadios5GhzRxFrameErrors: Bool {return _storage._radios5GhzRxFrameErrors != nil}
  /// Clears the value of `radios5GhzRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxFrameErrors() {_uniqueStorage()._radios5GhzRxFrameErrors = nil}

  var radios5GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzRxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzRxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzRxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzRxPacketErrorRate: Bool {return _storage._radios5GhzRxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzRxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxPacketErrorRate() {_uniqueStorage()._radios5GhzRxPacketErrorRate = nil}

  var radios5GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzRxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzRxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzRxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzRxAirtimeFraction: Bool {return _storage._radios5GhzRxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzRxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzRxAirtimeFraction() {_uniqueStorage()._radios5GhzRxAirtimeFraction = nil}

  var radios5GhzTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzTxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzTxBytes = newValue}
  }
  /// Returns true if `radios5GhzTxBytes` has been explicitly set.
  var hasRadios5GhzTxBytes: Bool {return _storage._radios5GhzTxBytes != nil}
  /// Clears the value of `radios5GhzTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxBytes() {_uniqueStorage()._radios5GhzTxBytes = nil}

  var radios5GhzTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzTxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzTxPackets = newValue}
  }
  /// Returns true if `radios5GhzTxPackets` has been explicitly set.
  var hasRadios5GhzTxPackets: Bool {return _storage._radios5GhzTxPackets != nil}
  /// Clears the value of `radios5GhzTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxPackets() {_uniqueStorage()._radios5GhzTxPackets = nil}

  var radios5GhzTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzTxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzTxErrors = newValue}
  }
  /// Returns true if `radios5GhzTxErrors` has been explicitly set.
  var hasRadios5GhzTxErrors: Bool {return _storage._radios5GhzTxErrors != nil}
  /// Clears the value of `radios5GhzTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxErrors() {_uniqueStorage()._radios5GhzTxErrors = nil}

  var radios5GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzTxPacketErrorRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzTxPacketErrorRate = newValue}
  }
  /// Returns true if `radios5GhzTxPacketErrorRate` has been explicitly set.
  var hasRadios5GhzTxPacketErrorRate: Bool {return _storage._radios5GhzTxPacketErrorRate != nil}
  /// Clears the value of `radios5GhzTxPacketErrorRate`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxPacketErrorRate() {_uniqueStorage()._radios5GhzTxPacketErrorRate = nil}

  var radios5GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzTxAirtimeFraction ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzTxAirtimeFraction = newValue}
  }
  /// Returns true if `radios5GhzTxAirtimeFraction` has been explicitly set.
  var hasRadios5GhzTxAirtimeFraction: Bool {return _storage._radios5GhzTxAirtimeFraction != nil}
  /// Clears the value of `radios5GhzTxAirtimeFraction`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzTxAirtimeFraction() {_uniqueStorage()._radios5GhzTxAirtimeFraction = nil}

  var radios2GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzThermalTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzThermalTemp = newValue}
  }
  /// Returns true if `radios2GhzThermalTemp` has been explicitly set.
  var hasRadios2GhzThermalTemp: Bool {return _storage._radios2GhzThermalTemp != nil}
  /// Clears the value of `radios2GhzThermalTemp`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalTemp() {_uniqueStorage()._radios2GhzThermalTemp = nil}

  var radios5GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzThermalTemp ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzThermalTemp = newValue}
  }
  /// Returns true if `radios5GhzThermalTemp` has been explicitly set.
  var hasRadios5GhzThermalTemp: Bool {return _storage._radios5GhzThermalTemp != nil}
  /// Clears the value of `radios5GhzThermalTemp`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalTemp() {_uniqueStorage()._radios5GhzThermalTemp = nil}

  var radios2GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios2GhzThermalDutyCycle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios2GhzThermalDutyCycle = newValue}
  }
  /// Returns true if `radios2GhzThermalDutyCycle` has been explicitly set.
  var hasRadios2GhzThermalDutyCycle: Bool {return _storage._radios2GhzThermalDutyCycle != nil}
  /// Clears the value of `radios2GhzThermalDutyCycle`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalDutyCycle() {_uniqueStorage()._radios2GhzThermalDutyCycle = nil}

  var radios5GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._radios5GhzThermalDutyCycle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._radios5GhzThermalDutyCycle = newValue}
  }
  /// Returns true if `radios5GhzThermalDutyCycle` has been explicitly set.
  var hasRadios5GhzThermalDutyCycle: Bool {return _storage._radios5GhzThermalDutyCycle != nil}
  /// Clears the value of `radios5GhzThermalDutyCycle`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalDutyCycle() {_uniqueStorage()._radios5GhzThermalDutyCycle = nil}

  var radios2GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios2GhzThermalThrottledSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios2GhzThermalThrottledSeconds = newValue}
  }
  /// Returns true if `radios2GhzThermalThrottledSeconds` has been explicitly set.
  var hasRadios2GhzThermalThrottledSeconds: Bool {return _storage._radios2GhzThermalThrottledSeconds != nil}
  /// Clears the value of `radios2GhzThermalThrottledSeconds`. Subsequent reads from it will return its default value.
  mutating func clearRadios2GhzThermalThrottledSeconds() {_uniqueStorage()._radios2GhzThermalThrottledSeconds = nil}

  var radios5GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._radios5GhzThermalThrottledSeconds ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._radios5GhzThermalThrottledSeconds = newValue}
  }
  /// Returns true if `radios5GhzThermalThrottledSeconds` has been explicitly set.
  var hasRadios5GhzThermalThrottledSeconds: Bool {return _storage._radios5GhzThermalThrottledSeconds != nil}
  /// Clears the value of `radios5GhzThermalThrottledSeconds`. Subsequent reads from it will return its default value.
  mutating func clearRadios5GhzThermalThrottledSeconds() {_uniqueStorage()._radios5GhzThermalThrottledSeconds = nil}

  var ifacesLanEthRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthRxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthRxBytes = newValue}
  }
  /// Returns true if `ifacesLanEthRxBytes` has been explicitly set.
  var hasIfacesLanEthRxBytes: Bool {return _storage._ifacesLanEthRxBytes != nil}
  /// Clears the value of `ifacesLanEthRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxBytes() {_uniqueStorage()._ifacesLanEthRxBytes = nil}

  var ifacesLanEthRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthRxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthRxPackets = newValue}
  }
  /// Returns true if `ifacesLanEthRxPackets` has been explicitly set.
  var hasIfacesLanEthRxPackets: Bool {return _storage._ifacesLanEthRxPackets != nil}
  /// Clears the value of `ifacesLanEthRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxPackets() {_uniqueStorage()._ifacesLanEthRxPackets = nil}

  var ifacesLanEthRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthRxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthRxErrors = newValue}
  }
  /// Returns true if `ifacesLanEthRxErrors` has been explicitly set.
  var hasIfacesLanEthRxErrors: Bool {return _storage._ifacesLanEthRxErrors != nil}
  /// Clears the value of `ifacesLanEthRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxErrors() {_uniqueStorage()._ifacesLanEthRxErrors = nil}

  var ifacesLanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthRxFrameErrors = newValue}
  }
  /// Returns true if `ifacesLanEthRxFrameErrors` has been explicitly set.
  var hasIfacesLanEthRxFrameErrors: Bool {return _storage._ifacesLanEthRxFrameErrors != nil}
  /// Clears the value of `ifacesLanEthRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthRxFrameErrors() {_uniqueStorage()._ifacesLanEthRxFrameErrors = nil}

  var ifacesLanEthTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthTxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthTxBytes = newValue}
  }
  /// Returns true if `ifacesLanEthTxBytes` has been explicitly set.
  var hasIfacesLanEthTxBytes: Bool {return _storage._ifacesLanEthTxBytes != nil}
  /// Clears the value of `ifacesLanEthTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxBytes() {_uniqueStorage()._ifacesLanEthTxBytes = nil}

  var ifacesLanEthTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthTxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthTxPackets = newValue}
  }
  /// Returns true if `ifacesLanEthTxPackets` has been explicitly set.
  var hasIfacesLanEthTxPackets: Bool {return _storage._ifacesLanEthTxPackets != nil}
  /// Clears the value of `ifacesLanEthTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxPackets() {_uniqueStorage()._ifacesLanEthTxPackets = nil}

  var ifacesLanEthTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesLanEthTxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesLanEthTxErrors = newValue}
  }
  /// Returns true if `ifacesLanEthTxErrors` has been explicitly set.
  var hasIfacesLanEthTxErrors: Bool {return _storage._ifacesLanEthTxErrors != nil}
  /// Clears the value of `ifacesLanEthTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesLanEthTxErrors() {_uniqueStorage()._ifacesLanEthTxErrors = nil}

  var ifacesWanEthRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthRxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthRxBytes = newValue}
  }
  /// Returns true if `ifacesWanEthRxBytes` has been explicitly set.
  var hasIfacesWanEthRxBytes: Bool {return _storage._ifacesWanEthRxBytes != nil}
  /// Clears the value of `ifacesWanEthRxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxBytes() {_uniqueStorage()._ifacesWanEthRxBytes = nil}

  var ifacesWanEthRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthRxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthRxPackets = newValue}
  }
  /// Returns true if `ifacesWanEthRxPackets` has been explicitly set.
  var hasIfacesWanEthRxPackets: Bool {return _storage._ifacesWanEthRxPackets != nil}
  /// Clears the value of `ifacesWanEthRxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxPackets() {_uniqueStorage()._ifacesWanEthRxPackets = nil}

  var ifacesWanEthRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthRxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthRxErrors = newValue}
  }
  /// Returns true if `ifacesWanEthRxErrors` has been explicitly set.
  var hasIfacesWanEthRxErrors: Bool {return _storage._ifacesWanEthRxErrors != nil}
  /// Clears the value of `ifacesWanEthRxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxErrors() {_uniqueStorage()._ifacesWanEthRxErrors = nil}

  var ifacesWanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthRxFrameErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthRxFrameErrors = newValue}
  }
  /// Returns true if `ifacesWanEthRxFrameErrors` has been explicitly set.
  var hasIfacesWanEthRxFrameErrors: Bool {return _storage._ifacesWanEthRxFrameErrors != nil}
  /// Clears the value of `ifacesWanEthRxFrameErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthRxFrameErrors() {_uniqueStorage()._ifacesWanEthRxFrameErrors = nil}

  var ifacesWanEthTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthTxBytes ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthTxBytes = newValue}
  }
  /// Returns true if `ifacesWanEthTxBytes` has been explicitly set.
  var hasIfacesWanEthTxBytes: Bool {return _storage._ifacesWanEthTxBytes != nil}
  /// Clears the value of `ifacesWanEthTxBytes`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxBytes() {_uniqueStorage()._ifacesWanEthTxBytes = nil}

  var ifacesWanEthTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthTxPackets ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthTxPackets = newValue}
  }
  /// Returns true if `ifacesWanEthTxPackets` has been explicitly set.
  var hasIfacesWanEthTxPackets: Bool {return _storage._ifacesWanEthTxPackets != nil}
  /// Clears the value of `ifacesWanEthTxPackets`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxPackets() {_uniqueStorage()._ifacesWanEthTxPackets = nil}

  var ifacesWanEthTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._ifacesWanEthTxErrors ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._ifacesWanEthTxErrors = newValue}
  }
  /// Returns true if `ifacesWanEthTxErrors` has been explicitly set.
  var hasIfacesWanEthTxErrors: Bool {return _storage._ifacesWanEthTxErrors != nil}
  /// Clears the value of `ifacesWanEthTxErrors`. Subsequent reads from it will return its default value.
  mutating func clearIfacesWanEthTxErrors() {_uniqueStorage()._ifacesWanEthTxErrors = nil}

  var clients: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients = newValue}
  }
  /// Returns true if `clients` has been explicitly set.
  var hasClients: Bool {return _storage._clients != nil}
  /// Clears the value of `clients`. Subsequent reads from it will return its default value.
  mutating func clearClients() {_uniqueStorage()._clients = nil}

  var clients2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients2Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients2Ghz = newValue}
  }
  /// Returns true if `clients2Ghz` has been explicitly set.
  var hasClients2Ghz: Bool {return _storage._clients2Ghz != nil}
  /// Clears the value of `clients2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClients2Ghz() {_uniqueStorage()._clients2Ghz = nil}

  var clients5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clients5Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clients5Ghz = newValue}
  }
  /// Returns true if `clients5Ghz` has been explicitly set.
  var hasClients5Ghz: Bool {return _storage._clients5Ghz != nil}
  /// Clears the value of `clients5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClients5Ghz() {_uniqueStorage()._clients5Ghz = nil}

  var clientsEth: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsEth ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsEth = newValue}
  }
  /// Returns true if `clientsEth` has been explicitly set.
  var hasClientsEth: Bool {return _storage._clientsEth != nil}
  /// Clears the value of `clientsEth`. Subsequent reads from it will return its default value.
  mutating func clearClientsEth() {_uniqueStorage()._clientsEth = nil}

  var clientsRepeater: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater = newValue}
  }
  /// Returns true if `clientsRepeater` has been explicitly set.
  var hasClientsRepeater: Bool {return _storage._clientsRepeater != nil}
  /// Clears the value of `clientsRepeater`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater() {_uniqueStorage()._clientsRepeater = nil}

  var clientsRepeater2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater2Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater2Ghz = newValue}
  }
  /// Returns true if `clientsRepeater2Ghz` has been explicitly set.
  var hasClientsRepeater2Ghz: Bool {return _storage._clientsRepeater2Ghz != nil}
  /// Clears the value of `clientsRepeater2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater2Ghz() {_uniqueStorage()._clientsRepeater2Ghz = nil}

  var clientsRepeater5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeater5Ghz ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeater5Ghz = newValue}
  }
  /// Returns true if `clientsRepeater5Ghz` has been explicitly set.
  var hasClientsRepeater5Ghz: Bool {return _storage._clientsRepeater5Ghz != nil}
  /// Clears the value of `clientsRepeater5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeater5Ghz() {_uniqueStorage()._clientsRepeater5Ghz = nil}

  var clientsRepeaterEth: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientsRepeaterEth ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientsRepeaterEth = newValue}
  }
  /// Returns true if `clientsRepeaterEth` has been explicitly set.
  var hasClientsRepeaterEth: Bool {return _storage._clientsRepeaterEth != nil}
  /// Clears the value of `clientsRepeaterEth`. Subsequent reads from it will return its default value.
  mutating func clearClientsRepeaterEth() {_uniqueStorage()._clientsRepeaterEth = nil}

  var meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._meshHops ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._meshHops = newValue}
  }
  /// Returns true if `meshHops` has been explicitly set.
  var hasMeshHops: Bool {return _storage._meshHops != nil}
  /// Clears the value of `meshHops`. Subsequent reads from it will return its default value.
  mutating func clearMeshHops() {_uniqueStorage()._meshHops = nil}

  var meshOneHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshOneHopRssiAvg2Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshOneHopRssiAvg2Ghz = newValue}
  }
  /// Returns true if `meshOneHopRssiAvg2Ghz` has been explicitly set.
  var hasMeshOneHopRssiAvg2Ghz: Bool {return _storage._meshOneHopRssiAvg2Ghz != nil}
  /// Clears the value of `meshOneHopRssiAvg2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshOneHopRssiAvg2Ghz() {_uniqueStorage()._meshOneHopRssiAvg2Ghz = nil}

  var meshOneHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshOneHopRssiAvg5Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshOneHopRssiAvg5Ghz = newValue}
  }
  /// Returns true if `meshOneHopRssiAvg5Ghz` has been explicitly set.
  var hasMeshOneHopRssiAvg5Ghz: Bool {return _storage._meshOneHopRssiAvg5Ghz != nil}
  /// Clears the value of `meshOneHopRssiAvg5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshOneHopRssiAvg5Ghz() {_uniqueStorage()._meshOneHopRssiAvg5Ghz = nil}

  var meshTwoHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshTwoHopRssiAvg2Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshTwoHopRssiAvg2Ghz = newValue}
  }
  /// Returns true if `meshTwoHopRssiAvg2Ghz` has been explicitly set.
  var hasMeshTwoHopRssiAvg2Ghz: Bool {return _storage._meshTwoHopRssiAvg2Ghz != nil}
  /// Clears the value of `meshTwoHopRssiAvg2Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshTwoHopRssiAvg2Ghz() {_uniqueStorage()._meshTwoHopRssiAvg2Ghz = nil}

  var meshTwoHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._meshTwoHopRssiAvg5Ghz ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._meshTwoHopRssiAvg5Ghz = newValue}
  }
  /// Returns true if `meshTwoHopRssiAvg5Ghz` has been explicitly set.
  var hasMeshTwoHopRssiAvg5Ghz: Bool {return _storage._meshTwoHopRssiAvg5Ghz != nil}
  /// Clears the value of `meshTwoHopRssiAvg5Ghz`. Subsequent reads from it will return its default value.
  mutating func clearMeshTwoHopRssiAvg5Ghz() {_uniqueStorage()._meshTwoHopRssiAvg5Ghz = nil}

  var pingSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast1SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast1SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast1SOutage` has been explicitly set.
  var hasPingSecondsSinceLast1SOutage: Bool {return _storage._pingSecondsSinceLast1SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast1SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast1SOutage() {_uniqueStorage()._pingSecondsSinceLast1SOutage = nil}

  var pingSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast2SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast2SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast2SOutage` has been explicitly set.
  var hasPingSecondsSinceLast2SOutage: Bool {return _storage._pingSecondsSinceLast2SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast2SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast2SOutage() {_uniqueStorage()._pingSecondsSinceLast2SOutage = nil}

  var pingSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast5SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast5SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast5SOutage` has been explicitly set.
  var hasPingSecondsSinceLast5SOutage: Bool {return _storage._pingSecondsSinceLast5SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast5SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast5SOutage() {_uniqueStorage()._pingSecondsSinceLast5SOutage = nil}

  var pingSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast60SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast60SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast60SOutage` has been explicitly set.
  var hasPingSecondsSinceLast60SOutage: Bool {return _storage._pingSecondsSinceLast60SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast60SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast60SOutage() {_uniqueStorage()._pingSecondsSinceLast60SOutage = nil}

  var pingSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingSecondsSinceLast300SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingSecondsSinceLast300SOutage = newValue}
  }
  /// Returns true if `pingSecondsSinceLast300SOutage` has been explicitly set.
  var hasPingSecondsSinceLast300SOutage: Bool {return _storage._pingSecondsSinceLast300SOutage != nil}
  /// Clears the value of `pingSecondsSinceLast300SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingSecondsSinceLast300SOutage() {_uniqueStorage()._pingSecondsSinceLast300SOutage = nil}

  var pingDropRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDropRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDropRate = newValue}
  }
  /// Returns true if `pingDropRate` has been explicitly set.
  var hasPingDropRate: Bool {return _storage._pingDropRate != nil}
  /// Clears the value of `pingDropRate`. Subsequent reads from it will return its default value.
  mutating func clearPingDropRate() {_uniqueStorage()._pingDropRate = nil}

  var pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDropRateLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDropRateLast1H = newValue}
  }
  /// Returns true if `pingDropRateLast1H` has been explicitly set.
  var hasPingDropRateLast1H: Bool {return _storage._pingDropRateLast1H != nil}
  /// Clears the value of `pingDropRateLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDropRateLast1H() {_uniqueStorage()._pingDropRateLast1H = nil}

  var pingLatency: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingLatency ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingLatency = newValue}
  }
  /// Returns true if `pingLatency` has been explicitly set.
  var hasPingLatency: Bool {return _storage._pingLatency != nil}
  /// Clears the value of `pingLatency`. Subsequent reads from it will return its default value.
  mutating func clearPingLatency() {_uniqueStorage()._pingLatency = nil}

  var pingDishSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast1SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast1SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast1SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast1SOutage: Bool {return _storage._pingDishSecondsSinceLast1SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast1SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast1SOutage() {_uniqueStorage()._pingDishSecondsSinceLast1SOutage = nil}

  var pingDishSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast2SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast2SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast2SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast2SOutage: Bool {return _storage._pingDishSecondsSinceLast2SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast2SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast2SOutage() {_uniqueStorage()._pingDishSecondsSinceLast2SOutage = nil}

  var pingDishSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast5SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast5SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast5SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast5SOutage: Bool {return _storage._pingDishSecondsSinceLast5SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast5SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast5SOutage() {_uniqueStorage()._pingDishSecondsSinceLast5SOutage = nil}

  var pingDishSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast60SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast60SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast60SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast60SOutage: Bool {return _storage._pingDishSecondsSinceLast60SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast60SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast60SOutage() {_uniqueStorage()._pingDishSecondsSinceLast60SOutage = nil}

  var pingDishSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishSecondsSinceLast300SOutage ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishSecondsSinceLast300SOutage = newValue}
  }
  /// Returns true if `pingDishSecondsSinceLast300SOutage` has been explicitly set.
  var hasPingDishSecondsSinceLast300SOutage: Bool {return _storage._pingDishSecondsSinceLast300SOutage != nil}
  /// Clears the value of `pingDishSecondsSinceLast300SOutage`. Subsequent reads from it will return its default value.
  mutating func clearPingDishSecondsSinceLast300SOutage() {_uniqueStorage()._pingDishSecondsSinceLast300SOutage = nil}

  var pingDishDropRate: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishDropRate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishDropRate = newValue}
  }
  /// Returns true if `pingDishDropRate` has been explicitly set.
  var hasPingDishDropRate: Bool {return _storage._pingDishDropRate != nil}
  /// Clears the value of `pingDishDropRate`. Subsequent reads from it will return its default value.
  mutating func clearPingDishDropRate() {_uniqueStorage()._pingDishDropRate = nil}

  var pingDishDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishDropRateLast1H ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishDropRateLast1H = newValue}
  }
  /// Returns true if `pingDishDropRateLast1H` has been explicitly set.
  var hasPingDishDropRateLast1H: Bool {return _storage._pingDishDropRateLast1H != nil}
  /// Clears the value of `pingDishDropRateLast1H`. Subsequent reads from it will return its default value.
  mutating func clearPingDishDropRateLast1H() {_uniqueStorage()._pingDishDropRateLast1H = nil}

  var pingDishLatency: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._pingDishLatency ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._pingDishLatency = newValue}
  }
  /// Returns true if `pingDishLatency` has been explicitly set.
  var hasPingDishLatency: Bool {return _storage._pingDishLatency != nil}
  /// Clears the value of `pingDishLatency`. Subsequent reads from it will return its default value.
  mutating func clearPingDishLatency() {_uniqueStorage()._pingDishLatency = nil}

  var clientSpeedtestRouterDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestRouterDownloadMbps` has been explicitly set.
  var hasClientSpeedtestRouterDownloadMbps: Bool {return _storage._clientSpeedtestRouterDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestRouterDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterDownloadMbps() {_uniqueStorage()._clientSpeedtestRouterDownloadMbps = nil}

  var clientSpeedtestRouterUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestRouterUploadMbps` has been explicitly set.
  var hasClientSpeedtestRouterUploadMbps: Bool {return _storage._clientSpeedtestRouterUploadMbps != nil}
  /// Clears the value of `clientSpeedtestRouterUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterUploadMbps() {_uniqueStorage()._clientSpeedtestRouterUploadMbps = nil}

  var clientSpeedtestRouterRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestRouterRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestRouterRssi = newValue}
  }
  /// Returns true if `clientSpeedtestRouterRssi` has been explicitly set.
  var hasClientSpeedtestRouterRssi: Bool {return _storage._clientSpeedtestRouterRssi != nil}
  /// Clears the value of `clientSpeedtestRouterRssi`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestRouterRssi() {_uniqueStorage()._clientSpeedtestRouterRssi = nil}

  var clientSpeedtestWifiDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestWifiDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestWifiDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestWifiDownloadMbps` has been explicitly set.
  var hasClientSpeedtestWifiDownloadMbps: Bool {return _storage._clientSpeedtestWifiDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestWifiDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestWifiDownloadMbps() {_uniqueStorage()._clientSpeedtestWifiDownloadMbps = nil}

  var clientSpeedtestWifiUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestWifiUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestWifiUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestWifiUploadMbps` has been explicitly set.
  var hasClientSpeedtestWifiUploadMbps: Bool {return _storage._clientSpeedtestWifiUploadMbps != nil}
  /// Clears the value of `clientSpeedtestWifiUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestWifiUploadMbps() {_uniqueStorage()._clientSpeedtestWifiUploadMbps = nil}

  var clientSpeedtestClientDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientDownloadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientDownloadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestClientDownloadMbps` has been explicitly set.
  var hasClientSpeedtestClientDownloadMbps: Bool {return _storage._clientSpeedtestClientDownloadMbps != nil}
  /// Clears the value of `clientSpeedtestClientDownloadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientDownloadMbps() {_uniqueStorage()._clientSpeedtestClientDownloadMbps = nil}

  var clientSpeedtestClientUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientUploadMbps ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientUploadMbps = newValue}
  }
  /// Returns true if `clientSpeedtestClientUploadMbps` has been explicitly set.
  var hasClientSpeedtestClientUploadMbps: Bool {return _storage._clientSpeedtestClientUploadMbps != nil}
  /// Clears the value of `clientSpeedtestClientUploadMbps`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientUploadMbps() {_uniqueStorage()._clientSpeedtestClientUploadMbps = nil}

  var clientSpeedtestClientRssi: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._clientSpeedtestClientRssi ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._clientSpeedtestClientRssi = newValue}
  }
  /// Returns true if `clientSpeedtestClientRssi` has been explicitly set.
  var hasClientSpeedtestClientRssi: Bool {return _storage._clientSpeedtestClientRssi != nil}
  /// Clears the value of `clientSpeedtestClientRssi`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientRssi() {_uniqueStorage()._clientSpeedtestClientRssi = nil}

  var clientSpeedtestClientIface: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientIface ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientIface = newValue}
  }
  /// Returns true if `clientSpeedtestClientIface` has been explicitly set.
  var hasClientSpeedtestClientIface: Bool {return _storage._clientSpeedtestClientIface != nil}
  /// Clears the value of `clientSpeedtestClientIface`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientIface() {_uniqueStorage()._clientSpeedtestClientIface = nil}

  var clientSpeedtestClientOui: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._clientSpeedtestClientOui ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._clientSpeedtestClientOui = newValue}
  }
  /// Returns true if `clientSpeedtestClientOui` has been explicitly set.
  var hasClientSpeedtestClientOui: Bool {return _storage._clientSpeedtestClientOui != nil}
  /// Clears the value of `clientSpeedtestClientOui`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientOui() {_uniqueStorage()._clientSpeedtestClientOui = nil}

  var clientSpeedtestClientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientTxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientTxRate = newValue}
  }
  /// Returns true if `clientSpeedtestClientTxRate` has been explicitly set.
  var hasClientSpeedtestClientTxRate: Bool {return _storage._clientSpeedtestClientTxRate != nil}
  /// Clears the value of `clientSpeedtestClientTxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientTxRate() {_uniqueStorage()._clientSpeedtestClientTxRate = nil}

  var clientSpeedtestClientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientRxRate ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientRxRate = newValue}
  }
  /// Returns true if `clientSpeedtestClientRxRate` has been explicitly set.
  var hasClientSpeedtestClientRxRate: Bool {return _storage._clientSpeedtestClientRxRate != nil}
  /// Clears the value of `clientSpeedtestClientRxRate`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientRxRate() {_uniqueStorage()._clientSpeedtestClientRxRate = nil}

  var clientSpeedtestClientPlatformType: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._clientSpeedtestClientPlatformType ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._clientSpeedtestClientPlatformType = newValue}
  }
  /// Returns true if `clientSpeedtestClientPlatformType` has been explicitly set.
  var hasClientSpeedtestClientPlatformType: Bool {return _storage._clientSpeedtestClientPlatformType != nil}
  /// Clears the value of `clientSpeedtestClientPlatformType`. Subsequent reads from it will return its default value.
  mutating func clearClientSpeedtestClientPlatformType() {_uniqueStorage()._clientSpeedtestClientPlatformType = nil}

  var speedtestTcp8DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8DownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8DownloadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp8DownloadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp8DownloadMbpsAvg: Bool {return _storage._speedtestTcp8DownloadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp8DownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8DownloadMbpsAvg() {_uniqueStorage()._speedtestTcp8DownloadMbpsAvg = nil}

  var speedtestTcp8DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8DownloadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8DownloadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp8DownloadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp8DownloadMbpsMax: Bool {return _storage._speedtestTcp8DownloadMbpsMax != nil}
  /// Clears the value of `speedtestTcp8DownloadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8DownloadMbpsMax() {_uniqueStorage()._speedtestTcp8DownloadMbpsMax = nil}

  var speedtestTcp8UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8UploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8UploadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp8UploadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp8UploadMbpsAvg: Bool {return _storage._speedtestTcp8UploadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp8UploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8UploadMbpsAvg() {_uniqueStorage()._speedtestTcp8UploadMbpsAvg = nil}

  var speedtestTcp8UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp8UploadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp8UploadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp8UploadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp8UploadMbpsMax: Bool {return _storage._speedtestTcp8UploadMbpsMax != nil}
  /// Clears the value of `speedtestTcp8UploadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp8UploadMbpsMax() {_uniqueStorage()._speedtestTcp8UploadMbpsMax = nil}

  var speedtestTcp64DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64DownloadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64DownloadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp64DownloadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp64DownloadMbpsAvg: Bool {return _storage._speedtestTcp64DownloadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp64DownloadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64DownloadMbpsAvg() {_uniqueStorage()._speedtestTcp64DownloadMbpsAvg = nil}

  var speedtestTcp64DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64DownloadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64DownloadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp64DownloadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp64DownloadMbpsMax: Bool {return _storage._speedtestTcp64DownloadMbpsMax != nil}
  /// Clears the value of `speedtestTcp64DownloadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64DownloadMbpsMax() {_uniqueStorage()._speedtestTcp64DownloadMbpsMax = nil}

  var speedtestTcp64UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64UploadMbpsAvg ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64UploadMbpsAvg = newValue}
  }
  /// Returns true if `speedtestTcp64UploadMbpsAvg` has been explicitly set.
  var hasSpeedtestTcp64UploadMbpsAvg: Bool {return _storage._speedtestTcp64UploadMbpsAvg != nil}
  /// Clears the value of `speedtestTcp64UploadMbpsAvg`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64UploadMbpsAvg() {_uniqueStorage()._speedtestTcp64UploadMbpsAvg = nil}

  var speedtestTcp64UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _storage._speedtestTcp64UploadMbpsMax ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_uniqueStorage()._speedtestTcp64UploadMbpsMax = newValue}
  }
  /// Returns true if `speedtestTcp64UploadMbpsMax` has been explicitly set.
  var hasSpeedtestTcp64UploadMbpsMax: Bool {return _storage._speedtestTcp64UploadMbpsMax != nil}
  /// Clears the value of `speedtestTcp64UploadMbpsMax`. Subsequent reads from it will return its default value.
  mutating func clearSpeedtestTcp64UploadMbpsMax() {_uniqueStorage()._speedtestTcp64UploadMbpsMax = nil}

  var dishCellID: SwiftProtobuf.Google_Protobuf_UInt32Value {
    get {return _storage._dishCellID ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
    set {_uniqueStorage()._dishCellID = newValue}
  }
  /// Returns true if `dishCellID` has been explicitly set.
  var hasDishCellID: Bool {return _storage._dishCellID != nil}
  /// Clears the value of `dishCellID`. Subsequent reads from it will return its default value.
  mutating func clearDishCellID() {_uniqueStorage()._dishCellID = nil}

  var configSetupComplete: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configSetupComplete ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configSetupComplete = newValue}
  }
  /// Returns true if `configSetupComplete` has been explicitly set.
  var hasConfigSetupComplete: Bool {return _storage._configSetupComplete != nil}
  /// Clears the value of `configSetupComplete`. Subsequent reads from it will return its default value.
  mutating func clearConfigSetupComplete() {_uniqueStorage()._configSetupComplete = nil}

  var configBandsSplit: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configBandsSplit ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configBandsSplit = newValue}
  }
  /// Returns true if `configBandsSplit` has been explicitly set.
  var hasConfigBandsSplit: Bool {return _storage._configBandsSplit != nil}
  /// Clears the value of `configBandsSplit`. Subsequent reads from it will return its default value.
  mutating func clearConfigBandsSplit() {_uniqueStorage()._configBandsSplit = nil}

  var configIsRepeater: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsRepeater ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsRepeater = newValue}
  }
  /// Returns true if `configIsRepeater` has been explicitly set.
  var hasConfigIsRepeater: Bool {return _storage._configIsRepeater != nil}
  /// Clears the value of `configIsRepeater`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsRepeater() {_uniqueStorage()._configIsRepeater = nil}

  var configOpenNetwork: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configOpenNetwork ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configOpenNetwork = newValue}
  }
  /// Returns true if `configOpenNetwork` has been explicitly set.
  var hasConfigOpenNetwork: Bool {return _storage._configOpenNetwork != nil}
  /// Clears the value of `configOpenNetwork`. Subsequent reads from it will return its default value.
  mutating func clearConfigOpenNetwork() {_uniqueStorage()._configOpenNetwork = nil}

  var configIsAviation: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configIsAviation ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configIsAviation = newValue}
  }
  /// Returns true if `configIsAviation` has been explicitly set.
  var hasConfigIsAviation: Bool {return _storage._configIsAviation != nil}
  /// Clears the value of `configIsAviation`. Subsequent reads from it will return its default value.
  mutating func clearConfigIsAviation() {_uniqueStorage()._configIsAviation = nil}

  var configSecureDns: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configSecureDns ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configSecureDns = newValue}
  }
  /// Returns true if `configSecureDns` has been explicitly set.
  var hasConfigSecureDns: Bool {return _storage._configSecureDns != nil}
  /// Clears the value of `configSecureDns`. Subsequent reads from it will return its default value.
  mutating func clearConfigSecureDns() {_uniqueStorage()._configSecureDns = nil}

  var configLegacy: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configLegacy ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configLegacy = newValue}
  }
  /// Returns true if `configLegacy` has been explicitly set.
  var hasConfigLegacy: Bool {return _storage._configLegacy != nil}
  /// Clears the value of `configLegacy`. Subsequent reads from it will return its default value.
  mutating func clearConfigLegacy() {_uniqueStorage()._configLegacy = nil}

  var configApMode: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configApMode ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configApMode = newValue}
  }
  /// Returns true if `configApMode` has been explicitly set.
  var hasConfigApMode: Bool {return _storage._configApMode != nil}
  /// Clears the value of `configApMode`. Subsequent reads from it will return its default value.
  mutating func clearConfigApMode() {_uniqueStorage()._configApMode = nil}

  var configDfsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configDfsEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configDfsEnabled = newValue}
  }
  /// Returns true if `configDfsEnabled` has been explicitly set.
  var hasConfigDfsEnabled: Bool {return _storage._configDfsEnabled != nil}
  /// Clears the value of `configDfsEnabled`. Subsequent reads from it will return its default value.
  mutating func clearConfigDfsEnabled() {_uniqueStorage()._configDfsEnabled = nil}

  var configNetworkNameIsDefault: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configNetworkNameIsDefault ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configNetworkNameIsDefault = newValue}
  }
  /// Returns true if `configNetworkNameIsDefault` has been explicitly set.
  var hasConfigNetworkNameIsDefault: Bool {return _storage._configNetworkNameIsDefault != nil}
  /// Clears the value of `configNetworkNameIsDefault`. Subsequent reads from it will return its default value.
  mutating func clearConfigNetworkNameIsDefault() {_uniqueStorage()._configNetworkNameIsDefault = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var configRemoteSshEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _storage._configRemoteSshEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_uniqueStorage()._configRemoteSshEnabled = newValue}
  }
  /// Returns true if `configRemoteSshEnabled` has been explicitly set.
  var hasConfigRemoteSshEnabled: Bool {return _storage._configRemoteSshEnabled != nil}
  /// Clears the value of `configRemoteSshEnabled`. Subsequent reads from it will return its default value.
  mutating func clearConfigRemoteSshEnabled() {_uniqueStorage()._configRemoteSshEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WifiGuestInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiGuestInfoResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isGuest: Bool = false

  var isOnline: Bool = false

  var routerHardwareVersion: String = String()

  var dishHardwareVersion: String = String()

  var isRouterAviationConformed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiFactoryTestCommandRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: SpaceX_API_Device_WifiFactoryTestCommandRequest.OneOf_Command? = nil

  var iwprivCommand: SpaceX_API_Device_IwprivCommand {
    get {
      if case .iwprivCommand(let v)? = command {return v}
      return SpaceX_API_Device_IwprivCommand()
    }
    set {command = .iwprivCommand(newValue)}
  }

  var ipLinkSetCommand: SpaceX_API_Device_IpLinkSetCommand {
    get {
      if case .ipLinkSetCommand(let v)? = command {return v}
      return SpaceX_API_Device_IpLinkSetCommand()
    }
    set {command = .ipLinkSetCommand(newValue)}
  }

  var ipAddrSetCommand: SpaceX_API_Device_IpAddrSetCommand {
    get {
      if case .ipAddrSetCommand(let v)? = command {return v}
      return SpaceX_API_Device_IpAddrSetCommand()
    }
    set {command = .ipAddrSetCommand(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Command: Equatable, Sendable {
    case iwprivCommand(SpaceX_API_Device_IwprivCommand)
    case ipLinkSetCommand(SpaceX_API_Device_IpLinkSetCommand)
    case ipAddrSetCommand(SpaceX_API_Device_IpAddrSetCommand)

  }

  init() {}
}

struct SpaceX_API_Device_WifiFactoryTestCommandResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var response: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_IwprivCommand: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iface: String = String()

  var arg: String = String()

  var ioctl: SpaceX_API_Device_IwprivCommand.Ioctl = .set

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Ioctl: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case set // = 0
    case e2P // = 1
    case mac // = 3
    case sxAllow5GhzHigh // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .set
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .set
      case 1: self = .e2P
      case 3: self = .mac
      case 4: self = .sxAllow5GhzHigh
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .set: return 0
      case .e2P: return 1
      case .mac: return 3
      case .sxAllow5GhzHigh: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_IwprivCommand.Ioctl] = [
      .set,
      .e2P,
      .mac,
      .sxAllow5GhzHigh,
    ]

  }

  init() {}
}

struct SpaceX_API_Device_IpLinkSetCommand: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iface: String = String()

  var up: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_IpAddrSetCommand: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iface: String = String()

  var add: Bool = false

  var cidr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiStartLocalTelemProxyRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var port: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiBackhaulStatsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiBackhaulStatsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var bssid: String = String()

  var iface: SpaceX_API_Device_IfaceType = .unknown

  var preference: UInt32 = 0

  var siteSurveyScan: [SpaceX_API_Device_WifiSiteSurveyResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiToggleUmbilicalModeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_WifiClients: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiClients"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clients"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.clients) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clients, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClients, rhs: SpaceX_API_Device_WifiClients) -> Bool {
    if lhs.clients != rhs.clients {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_ToController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ToController"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "api_version"),
    1: .same(proto: "clients"),
    2: .standard(proto: "mesh_join"),
    3: .same(proto: "status"),
    5: .same(proto: "speedtest"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SpaceX_API_Device_WifiClients?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .clients(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .clients(v)
        }
      }()
      case 2: try {
        var v: SpaceX_API_Device_WifiMeshJoin?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .meshJoin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .meshJoin(v)
        }
      }()
      case 3: try {
        var v: SpaceX_API_Device_WifiMeshStatus?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .status(v)
        }
      }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.apiVersion) }()
      case 5: try {
        var v: SpaceX_API_Device_MeshSpeedtest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .speedtest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .speedtest(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .clients?: try {
      guard case .clients(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .meshJoin?: try {
      guard case .meshJoin(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .status?: try {
      guard case .status(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    default: break
    }
    if self.apiVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.apiVersion, fieldNumber: 4)
    }
    try { if case .speedtest(let v)? = self.message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_ToController, rhs: SpaceX_API_Device_ToController) -> Bool {
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiMeshJoin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiMeshJoin"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "incarnation"),
    2: .standard(proto: "hardware_version"),
    3: .standard(proto: "supports_5ghz_high"),
    4: .same(proto: "siteSurveyScan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.incarnation) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hardwareVersion) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.supports5GhzHigh) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.siteSurveyScan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.incarnation != 0 {
      try visitor.visitSingularUInt64Field(value: self.incarnation, fieldNumber: 1)
    }
    if !self.hardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareVersion, fieldNumber: 2)
    }
    if self.supports5GhzHigh != false {
      try visitor.visitSingularBoolField(value: self.supports5GhzHigh, fieldNumber: 3)
    }
    if !self.siteSurveyScan.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.siteSurveyScan, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiMeshJoin, rhs: SpaceX_API_Device_WifiMeshJoin) -> Bool {
    if lhs.incarnation != rhs.incarnation {return false}
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.supports5GhzHigh != rhs.supports5GhzHigh {return false}
    if lhs.siteSurveyScan != rhs.siteSurveyScan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiMeshStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiMeshStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "software_version"),
    6: .standard(proto: "mac_lan"),
    7: .standard(proto: "source_mac_addresses"),
    2: .same(proto: "clients"),
    3: .standard(proto: "bss_list"),
    4: .standard(proto: "hardware_version"),
    8: .standard(proto: "backhaul_bssid"),
    9: .standard(proto: "backhaul_est_preference"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.clients) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bssList) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.hardwareVersion) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.softwareVersion) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.macLan) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.sourceMacAddresses) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.backhaulBssid) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.backhaulEstPreference) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clients, fieldNumber: 2)
    }
    if !self.bssList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bssList, fieldNumber: 3)
    }
    if !self.hardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareVersion, fieldNumber: 4)
    }
    if !self.softwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.softwareVersion, fieldNumber: 5)
    }
    if !self.macLan.isEmpty {
      try visitor.visitSingularStringField(value: self.macLan, fieldNumber: 6)
    }
    if !self.sourceMacAddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.sourceMacAddresses, fieldNumber: 7)
    }
    if !self.backhaulBssid.isEmpty {
      try visitor.visitSingularStringField(value: self.backhaulBssid, fieldNumber: 8)
    }
    if self.backhaulEstPreference != 0 {
      try visitor.visitSingularUInt32Field(value: self.backhaulEstPreference, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiMeshStatus, rhs: SpaceX_API_Device_WifiMeshStatus) -> Bool {
    if lhs.softwareVersion != rhs.softwareVersion {return false}
    if lhs.macLan != rhs.macLan {return false}
    if lhs.sourceMacAddresses != rhs.sourceMacAddresses {return false}
    if lhs.clients != rhs.clients {return false}
    if lhs.bssList != rhs.bssList {return false}
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.backhaulBssid != rhs.backhaulBssid {return false}
    if lhs.backhaulEstPreference != rhs.backhaulEstPreference {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_MeshSpeedtestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MeshSpeedtestRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_MeshSpeedtestRequest, rhs: SpaceX_API_Device_MeshSpeedtestRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_MeshSpeedtest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MeshSpeedtest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "upload_start_time"),
    2: .standard(proto: "download_start_time"),
    3: .standard(proto: "upload_mbps"),
    4: .standard(proto: "download_mbps"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.uploadStartTime) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.downloadStartTime) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.uploadMbps) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.downloadMbps) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uploadStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.uploadStartTime, fieldNumber: 1)
    }
    if self.downloadStartTime != 0 {
      try visitor.visitSingularInt64Field(value: self.downloadStartTime, fieldNumber: 2)
    }
    if self.uploadMbps.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.uploadMbps, fieldNumber: 3)
    }
    if self.downloadMbps.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.downloadMbps, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_MeshSpeedtest, rhs: SpaceX_API_Device_MeshSpeedtest) -> Bool {
    if lhs.uploadStartTime != rhs.uploadStartTime {return false}
    if lhs.downloadStartTime != rhs.downloadStartTime {return false}
    if lhs.uploadMbps != rhs.uploadMbps {return false}
    if lhs.downloadMbps != rhs.downloadMbps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSiteSurveyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSiteSurveyResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rssi"),
    2: .same(proto: "channel"),
    3: .same(proto: "ssid"),
    4: .same(proto: "security"),
    5: .standard(proto: "wireless_mode"),
    6: .same(proto: "iface"),
    7: .standard(proto: "mac_address"),
    8: .standard(proto: "est_rx_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.rssi) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ssid) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.security) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.wirelessMode) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.iface) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.macAddress) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.estRxRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rssi.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssi, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 3)
    }
    if self.security != .unknown {
      try visitor.visitSingularEnumField(value: self.security, fieldNumber: 4)
    }
    if self.wirelessMode != .default {
      try visitor.visitSingularEnumField(value: self.wirelessMode, fieldNumber: 5)
    }
    if self.iface != .unknown {
      try visitor.visitSingularEnumField(value: self.iface, fieldNumber: 6)
    }
    if !self.macAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.macAddress, fieldNumber: 7)
    }
    if self.estRxRate.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.estRxRate, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSiteSurveyResult, rhs: SpaceX_API_Device_WifiSiteSurveyResult) -> Bool {
    if lhs.rssi != rhs.rssi {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.security != rhs.security {return false}
    if lhs.wirelessMode != rhs.wirelessMode {return false}
    if lhs.iface != rhs.iface {return false}
    if lhs.macAddress != rhs.macAddress {return false}
    if lhs.estRxRate != rhs.estRxRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGlobalMeshStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGlobalMeshStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hardware_version"),
    2: .standard(proto: "software_version"),
    3: .standard(proto: "bss_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hardwareVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.softwareVersion) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bssList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareVersion, fieldNumber: 1)
    }
    if !self.softwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.softwareVersion, fieldNumber: 2)
    }
    if !self.bssList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bssList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGlobalMeshStatus, rhs: SpaceX_API_Device_WifiGlobalMeshStatus) -> Bool {
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.softwareVersion != rhs.softwareVersion {return false}
    if lhs.bssList != rhs.bssList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_BackhaulRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BackhaulRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "retry_backhaul"),
    2: .standard(proto: "golden_bss"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.retryBackhaul) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._goldenBss) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.retryBackhaul != false {
      try visitor.visitSingularBoolField(value: self.retryBackhaul, fieldNumber: 1)
    }
    try { if let v = self._goldenBss {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_BackhaulRequest, rhs: SpaceX_API_Device_BackhaulRequest) -> Bool {
    if lhs.retryBackhaul != rhs.retryBackhaul {return false}
    if lhs._goldenBss != rhs._goldenBss {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_FromController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FromController"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "api_version"),
    1: .standard(proto: "wifi_config"),
    2: .standard(proto: "steer_client_request"),
    4: .same(proto: "status"),
    5: .standard(proto: "backhaul_request"),
    6: .standard(proto: "start_speedtest"),
    7: .standard(proto: "wifi_btm_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SpaceX_API_Device_WifiConfig?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .wifiConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .wifiConfig(v)
        }
      }()
      case 2: try {
        var v: SpaceX_API_Device_SteerClientRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .steerClientRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .steerClientRequest(v)
        }
      }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.apiVersion) }()
      case 4: try {
        var v: SpaceX_API_Device_WifiGlobalMeshStatus?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .status(v)
        }
      }()
      case 5: try {
        var v: SpaceX_API_Device_BackhaulRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .backhaulRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .backhaulRequest(v)
        }
      }()
      case 6: try {
        var v: SpaceX_API_Device_MeshSpeedtestRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .startSpeedtest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .startSpeedtest(v)
        }
      }()
      case 7: try {
        var v: SpaceX_API_Device_WifiBtmRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .wifiBtmRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .wifiBtmRequest(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .wifiConfig?: try {
      guard case .wifiConfig(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .steerClientRequest?: try {
      guard case .steerClientRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    default: break
    }
    if self.apiVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.apiVersion, fieldNumber: 3)
    }
    switch self.message {
    case .status?: try {
      guard case .status(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .backhaulRequest?: try {
      guard case .backhaulRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .startSpeedtest?: try {
      guard case .startSpeedtest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .wifiBtmRequest?: try {
      guard case .wifiBtmRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_FromController, rhs: SpaceX_API_Device_FromController) -> Bool {
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_SteerClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SteerClientRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_mac_addr"),
    2: .same(proto: "targets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientMacAddr) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.targets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientMacAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.clientMacAddr, fieldNumber: 1)
    }
    if !self.targets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.targets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_SteerClientRequest, rhs: SpaceX_API_Device_SteerClientRequest) -> Bool {
    if lhs.clientMacAddr != rhs.clientMacAddr {return false}
    if lhs.targets != rhs.targets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_SteerClientRequest.SteerTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_SteerClientRequest.protoMessageName + ".SteerTarget"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bssid"),
    2: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bssid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bssid.isEmpty {
      try visitor.visitSingularStringField(value: self.bssid, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularInt32Field(value: self.channel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_SteerClientRequest.SteerTarget, rhs: SpaceX_API_Device_SteerClientRequest.SteerTarget) -> Bool {
    if lhs.bssid != rhs.bssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiBtmRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiBtmRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "bss_termination_duration_m"),
    1: .standard(proto: "peer_bssid"),
    4: .standard(proto: "neighbor_report"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.peerBssid) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.neighborReport) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.bssTerminationDurationM) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerBssid.isEmpty {
      try visitor.visitSingularStringField(value: self.peerBssid, fieldNumber: 1)
    }
    if !self.neighborReport.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.neighborReport, fieldNumber: 4)
    }
    if self.bssTerminationDurationM != 0 {
      try visitor.visitSingularUInt32Field(value: self.bssTerminationDurationM, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiBtmRequest, rhs: SpaceX_API_Device_WifiBtmRequest) -> Bool {
    if lhs.bssTerminationDurationM != rhs.bssTerminationDurationM {return false}
    if lhs.peerBssid != rhs.peerBssid {return false}
    if lhs.neighborReport != rhs.neighborReport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiBtmRequest.NeighborReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiBtmRequest.protoMessageName + ".NeighborReport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bssid"),
    2: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bssid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bssid.isEmpty {
      try visitor.visitSingularStringField(value: self.bssid, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiBtmRequest.NeighborReport, rhs: SpaceX_API_Device_WifiBtmRequest.NeighborReport) -> Bool {
    if lhs.bssid != rhs.bssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSelfTest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSelfTest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_success"),
    2: .same(proto: "fused"),
    3: .standard(proto: "eth_phys"),
    4: .same(proto: "pcis"),
    5: .standard(proto: "bl2_prod"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.totalSuccess) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fused) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.ethPhys) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.pcis) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._bl2Prod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.totalSuccess != false {
      try visitor.visitSingularBoolField(value: self.totalSuccess, fieldNumber: 1)
    }
    try { if let v = self._fused {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.ethPhys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ethPhys, fieldNumber: 3)
    }
    if !self.pcis.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pcis, fieldNumber: 4)
    }
    try { if let v = self._bl2Prod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSelfTest, rhs: SpaceX_API_Device_WifiSelfTest) -> Bool {
    if lhs.totalSuccess != rhs.totalSuccess {return false}
    if lhs._fused != rhs._fused {return false}
    if lhs.ethPhys != rhs.ethPhys {return false}
    if lhs.pcis != rhs.pcis {return false}
    if lhs._bl2Prod != rhs._bl2Prod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSelfTest.TestResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiSelfTest.protoMessageName + ".TestResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "success"),
    3: .standard(proto: "failure_reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.failureReason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 2)
    }
    if !self.failureReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failureReason, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSelfTest.TestResult, rhs: SpaceX_API_Device_WifiSelfTest.TestResult) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.success != rhs.success {return false}
    if lhs.failureReason != rhs.failureReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wifi_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._wifiConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._wifiConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetConfigRequest, rhs: SpaceX_API_Device_WifiSetConfigRequest) -> Bool {
    if lhs._wifiConfig != rhs._wifiConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "updated_wifi_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._updatedWifiConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._updatedWifiConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetConfigResponse, rhs: SpaceX_API_Device_WifiSetConfigResponse) -> Bool {
    if lhs._updatedWifiConfig != rhs._updatedWifiConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetConfigRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetConfigRequest, rhs: SpaceX_API_Device_WifiGetConfigRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wifi_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._wifiConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._wifiConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetConfigResponse, rhs: SpaceX_API_Device_WifiGetConfigResponse) -> Bool {
    if lhs._wifiConfig != rhs._wifiConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetMeshDeviceTrustRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetMeshDeviceTrustRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.auth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if self.auth != .unknown {
      try visitor.visitSingularEnumField(value: self.auth, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetMeshDeviceTrustRequest, rhs: SpaceX_API_Device_WifiSetMeshDeviceTrustRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetMeshDeviceTrustResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetMeshDeviceTrustResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetMeshDeviceTrustResponse, rhs: SpaceX_API_Device_WifiSetMeshDeviceTrustResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetMeshConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetMeshConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mesh_config"),
    2: .standard(proto: "device_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._meshConfig) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._meshConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetMeshConfigRequest, rhs: SpaceX_API_Device_WifiSetMeshConfigRequest) -> Bool {
    if lhs._meshConfig != rhs._meshConfig {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetMeshConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetMeshConfigResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetMeshConfigResponse, rhs: SpaceX_API_Device_WifiSetMeshConfigResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetClientsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetClientsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetClientsRequest, rhs: SpaceX_API_Device_WifiGetClientsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetClientsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetClientsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clients"),
    2: .standard(proto: "has_client_index"),
    3: .standard(proto: "client_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.clients) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hasClientIndex_p) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.clientIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.clients, fieldNumber: 1)
    }
    if self.hasClientIndex_p != false {
      try visitor.visitSingularBoolField(value: self.hasClientIndex_p, fieldNumber: 2)
    }
    if self.clientIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.clientIndex, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetClientsResponse, rhs: SpaceX_API_Device_WifiGetClientsResponse) -> Bool {
    if lhs.clients != rhs.clients {return false}
    if lhs.hasClientIndex_p != rhs.hasClientIndex_p {return false}
    if lhs.clientIndex != rhs.clientIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetClientHistoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetClientHistoryRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mac_address"),
    2: .standard(proto: "client_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.macAddress) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.clientID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.macAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.macAddress, fieldNumber: 1)
    }
    if self.clientID != 0 {
      try visitor.visitSingularUInt32Field(value: self.clientID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetClientHistoryRequest, rhs: SpaceX_API_Device_WifiGetClientHistoryRequest) -> Bool {
    if lhs.macAddress != rhs.macAddress {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetClientHistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetClientHistoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "current"),
    2: .standard(proto: "tx_throughput_mbps"),
    3: .standard(proto: "rx_throughput_mbps"),
    4: .standard(proto: "throughput_limited"),
    5: .standard(proto: "rx_rate_mbps"),
    6: .same(proto: "rssi"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.current) }()
      case 2: try { try decoder.decodeRepeatedFloatField(value: &self.txThroughputMbps) }()
      case 3: try { try decoder.decodeRepeatedFloatField(value: &self.rxThroughputMbps) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.throughputLimited) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.rxRateMbps) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.rssi) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.current != 0 {
      try visitor.visitSingularUInt64Field(value: self.current, fieldNumber: 1)
    }
    if !self.txThroughputMbps.isEmpty {
      try visitor.visitPackedFloatField(value: self.txThroughputMbps, fieldNumber: 2)
    }
    if !self.rxThroughputMbps.isEmpty {
      try visitor.visitPackedFloatField(value: self.rxThroughputMbps, fieldNumber: 3)
    }
    if !self.throughputLimited.isEmpty {
      try visitor.visitPackedEnumField(value: self.throughputLimited, fieldNumber: 4)
    }
    if !self.rxRateMbps.isEmpty {
      try visitor.visitPackedFloatField(value: self.rxRateMbps, fieldNumber: 5)
    }
    if !self.rssi.isEmpty {
      try visitor.visitSingularBytesField(value: self.rssi, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetClientHistoryResponse, rhs: SpaceX_API_Device_WifiGetClientHistoryResponse) -> Bool {
    if lhs.current != rhs.current {return false}
    if lhs.txThroughputMbps != rhs.txThroughputMbps {return false}
    if lhs.rxThroughputMbps != rhs.rxThroughputMbps {return false}
    if lhs.throughputLimited != rhs.throughputLimited {return false}
    if lhs.rxRateMbps != rhs.rxRateMbps {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetClientHistoryResponse.WifiLimitedReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIMIT_UNKNOWN"),
    1: .same(proto: "LIMIT_NONE"),
    2: .same(proto: "LIMIT_UNCLASSIFIED"),
    3: .same(proto: "LIMIT_DROPPED_PACKETS"),
  ]
}

extension SpaceX_API_Device_WifiSetAviationConformedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetAviationConformedRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetAviationConformedRequest, rhs: SpaceX_API_Device_WifiSetAviationConformedRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetHistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetHistoryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "current"),
    1001: .standard(proto: "ping_drop_rate"),
    1002: .standard(proto: "ping_latency_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.current) }()
      case 1001: try { try decoder.decodeRepeatedFloatField(value: &self.pingDropRate) }()
      case 1002: try { try decoder.decodeRepeatedFloatField(value: &self.pingLatencyMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.current != 0 {
      try visitor.visitSingularUInt64Field(value: self.current, fieldNumber: 1)
    }
    if !self.pingDropRate.isEmpty {
      try visitor.visitPackedFloatField(value: self.pingDropRate, fieldNumber: 1001)
    }
    if !self.pingLatencyMs.isEmpty {
      try visitor.visitPackedFloatField(value: self.pingLatencyMs, fieldNumber: 1002)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetHistoryResponse, rhs: SpaceX_API_Device_WifiGetHistoryResponse) -> Bool {
    if lhs.current != rhs.current {return false}
    if lhs.pingDropRate != rhs.pingDropRate {return false}
    if lhs.pingLatencyMs != rhs.pingLatencyMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiNewClientConnectedEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiNewClientConnectedEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "client"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._client) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._client {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiNewClientConnectedEvent, rhs: SpaceX_API_Device_WifiNewClientConnectedEvent) -> Bool {
    if lhs._client != rhs._client {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiClient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiClient"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    31: .standard(proto: "given_name"),
    22: .same(proto: "domain"),
    2: .standard(proto: "mac_address"),
    3: .standard(proto: "ip_address"),
    46: .standard(proto: "dhcp_lease_active"),
    47: .standard(proto: "dhcp_lease_renewed"),
    41: .standard(proto: "ipv6_addresses"),
    4: .standard(proto: "signal_strength"),
    12: .standard(proto: "channel_width"),
    5: .standard(proto: "rx_stats"),
    6: .standard(proto: "tx_stats"),
    7: .standard(proto: "associated_time_s"),
    45: .standard(proto: "no_data_idle_s"),
    8: .standard(proto: "mode_str"),
    9: .same(proto: "iface"),
    26: .standard(proto: "iface_name"),
    10: .same(proto: "snr"),
    11: .same(proto: "psmode"),
    13: .standard(proto: "upstream_mac_address"),
    14: .same(proto: "role"),
    15: .standard(proto: "device_id"),
    16: .standard(proto: "swq_checks"),
    17: .standard(proto: "swq_checks_non_empty"),
    18: .standard(proto: "mib_steer_state"),
    19: .standard(proto: "mib_steer_method"),
    20: .standard(proto: "btm_requests"),
    21: .standard(proto: "btm_requests_success"),
    30: .standard(proto: "steer_state"),
    27: .standard(proto: "steer_req_success_last_1h"),
    28: .standard(proto: "steer_req_fail_last_1h"),
    29: .standard(proto: "steer_req_fail_and_dissoc_last_1h"),
    23: .standard(proto: "dot11v_support"),
    32: .standard(proto: "hops_from_controller"),
    33: .standard(proto: "est_tx_rate_mbps_from_controller"),
    34: .standard(proto: "est_rx_rate_mbps_from_controller"),
    37: .standard(proto: "hardware_version"),
    38: .standard(proto: "software_version"),
    39: .standard(proto: "api_version"),
    40: .standard(proto: "ping_metrics"),
    42: .same(proto: "blocked"),
    43: .standard(proto: "client_id"),
    44: .standard(proto: "fqcodel_info"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _givenName: String = String()
    var _domain: String = String()
    var _macAddress: String = String()
    var _ipAddress: String = String()
    var _dhcpLeaseActive: Bool = false
    var _dhcpLeaseRenewed: Bool = false
    var _ipv6Addresses: [String] = []
    var _signalStrength: Float = 0
    var _channelWidth: UInt32 = 0
    var _rxStats: SpaceX_API_Device_WifiClient.RxStats? = nil
    var _txStats: SpaceX_API_Device_WifiClient.TxStats? = nil
    var _associatedTimeS: UInt32 = 0
    var _noDataIdleS: UInt32 = 0
    var _modeStr: String = String()
    var _iface: SpaceX_API_Device_WifiClient.Interface = .unknown
    var _ifaceName: String = String()
    var _snr: Float = 0
    var _psmode: Int32 = 0
    var _upstreamMacAddress: String = String()
    var _role: SpaceX_API_Device_WifiClient.Role = .unknown
    var _deviceID: String = String()
    var _swqChecks: UInt32 = 0
    var _swqChecksNonEmpty: UInt32 = 0
    var _mibSteerState: UInt32 = 0
    var _mibSteerMethod: UInt32 = 0
    var _btmRequests: UInt32 = 0
    var _btmRequestsSuccess: UInt32 = 0
    var _steerState: UInt32 = 0
    var _steerReqSuccessLast1H: UInt32 = 0
    var _steerReqFailLast1H: UInt32 = 0
    var _steerReqFailAndDissocLast1H: UInt32 = 0
    var _dot11VSupport: Bool = false
    var _hopsFromController: UInt32 = 0
    var _estTxRateMbpsFromController: Float = 0
    var _estRxRateMbpsFromController: Float = 0
    var _hardwareVersion: String = String()
    var _softwareVersion: String = String()
    var _apiVersion: UInt32 = 0
    var _pingMetrics: SpaceX_API_Device_WifiClient.PingMetrics? = nil
    var _blocked: Bool = false
    var _clientID: UInt32 = 0
    var _fqcodelInfo: SpaceX_API_Device_WifiClient.FqcodelInfo? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _givenName = source._givenName
      _domain = source._domain
      _macAddress = source._macAddress
      _ipAddress = source._ipAddress
      _dhcpLeaseActive = source._dhcpLeaseActive
      _dhcpLeaseRenewed = source._dhcpLeaseRenewed
      _ipv6Addresses = source._ipv6Addresses
      _signalStrength = source._signalStrength
      _channelWidth = source._channelWidth
      _rxStats = source._rxStats
      _txStats = source._txStats
      _associatedTimeS = source._associatedTimeS
      _noDataIdleS = source._noDataIdleS
      _modeStr = source._modeStr
      _iface = source._iface
      _ifaceName = source._ifaceName
      _snr = source._snr
      _psmode = source._psmode
      _upstreamMacAddress = source._upstreamMacAddress
      _role = source._role
      _deviceID = source._deviceID
      _swqChecks = source._swqChecks
      _swqChecksNonEmpty = source._swqChecksNonEmpty
      _mibSteerState = source._mibSteerState
      _mibSteerMethod = source._mibSteerMethod
      _btmRequests = source._btmRequests
      _btmRequestsSuccess = source._btmRequestsSuccess
      _steerState = source._steerState
      _steerReqSuccessLast1H = source._steerReqSuccessLast1H
      _steerReqFailLast1H = source._steerReqFailLast1H
      _steerReqFailAndDissocLast1H = source._steerReqFailAndDissocLast1H
      _dot11VSupport = source._dot11VSupport
      _hopsFromController = source._hopsFromController
      _estTxRateMbpsFromController = source._estTxRateMbpsFromController
      _estRxRateMbpsFromController = source._estRxRateMbpsFromController
      _hardwareVersion = source._hardwareVersion
      _softwareVersion = source._softwareVersion
      _apiVersion = source._apiVersion
      _pingMetrics = source._pingMetrics
      _blocked = source._blocked
      _clientID = source._clientID
      _fqcodelInfo = source._fqcodelInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._macAddress) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ipAddress) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._signalStrength) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._rxStats) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._txStats) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._associatedTimeS) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._modeStr) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._iface) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._snr) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._psmode) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._channelWidth) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._upstreamMacAddress) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._role) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._deviceID) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._swqChecks) }()
        case 17: try { try decoder.decodeSingularUInt32Field(value: &_storage._swqChecksNonEmpty) }()
        case 18: try { try decoder.decodeSingularUInt32Field(value: &_storage._mibSteerState) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._mibSteerMethod) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._btmRequests) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._btmRequestsSuccess) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._domain) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._dot11VSupport) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._ifaceName) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._steerReqSuccessLast1H) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._steerReqFailLast1H) }()
        case 29: try { try decoder.decodeSingularUInt32Field(value: &_storage._steerReqFailAndDissocLast1H) }()
        case 30: try { try decoder.decodeSingularUInt32Field(value: &_storage._steerState) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._givenName) }()
        case 32: try { try decoder.decodeSingularUInt32Field(value: &_storage._hopsFromController) }()
        case 33: try { try decoder.decodeSingularFloatField(value: &_storage._estTxRateMbpsFromController) }()
        case 34: try { try decoder.decodeSingularFloatField(value: &_storage._estRxRateMbpsFromController) }()
        case 37: try { try decoder.decodeSingularStringField(value: &_storage._hardwareVersion) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._softwareVersion) }()
        case 39: try { try decoder.decodeSingularUInt32Field(value: &_storage._apiVersion) }()
        case 40: try { try decoder.decodeSingularMessageField(value: &_storage._pingMetrics) }()
        case 41: try { try decoder.decodeRepeatedStringField(value: &_storage._ipv6Addresses) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._blocked) }()
        case 43: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientID) }()
        case 44: try { try decoder.decodeSingularMessageField(value: &_storage._fqcodelInfo) }()
        case 45: try { try decoder.decodeSingularUInt32Field(value: &_storage._noDataIdleS) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._dhcpLeaseActive) }()
        case 47: try { try decoder.decodeSingularBoolField(value: &_storage._dhcpLeaseRenewed) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._macAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._macAddress, fieldNumber: 2)
      }
      if !_storage._ipAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipAddress, fieldNumber: 3)
      }
      if _storage._signalStrength.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._signalStrength, fieldNumber: 4)
      }
      try { if let v = _storage._rxStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._txStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._associatedTimeS != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._associatedTimeS, fieldNumber: 7)
      }
      if !_storage._modeStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modeStr, fieldNumber: 8)
      }
      if _storage._iface != .unknown {
        try visitor.visitSingularEnumField(value: _storage._iface, fieldNumber: 9)
      }
      if _storage._snr.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._snr, fieldNumber: 10)
      }
      if _storage._psmode != 0 {
        try visitor.visitSingularInt32Field(value: _storage._psmode, fieldNumber: 11)
      }
      if _storage._channelWidth != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._channelWidth, fieldNumber: 12)
      }
      if !_storage._upstreamMacAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upstreamMacAddress, fieldNumber: 13)
      }
      if _storage._role != .unknown {
        try visitor.visitSingularEnumField(value: _storage._role, fieldNumber: 14)
      }
      if !_storage._deviceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceID, fieldNumber: 15)
      }
      if _storage._swqChecks != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._swqChecks, fieldNumber: 16)
      }
      if _storage._swqChecksNonEmpty != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._swqChecksNonEmpty, fieldNumber: 17)
      }
      if _storage._mibSteerState != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._mibSteerState, fieldNumber: 18)
      }
      if _storage._mibSteerMethod != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._mibSteerMethod, fieldNumber: 19)
      }
      if _storage._btmRequests != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._btmRequests, fieldNumber: 20)
      }
      if _storage._btmRequestsSuccess != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._btmRequestsSuccess, fieldNumber: 21)
      }
      if !_storage._domain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domain, fieldNumber: 22)
      }
      if _storage._dot11VSupport != false {
        try visitor.visitSingularBoolField(value: _storage._dot11VSupport, fieldNumber: 23)
      }
      if !_storage._ifaceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ifaceName, fieldNumber: 26)
      }
      if _storage._steerReqSuccessLast1H != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._steerReqSuccessLast1H, fieldNumber: 27)
      }
      if _storage._steerReqFailLast1H != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._steerReqFailLast1H, fieldNumber: 28)
      }
      if _storage._steerReqFailAndDissocLast1H != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._steerReqFailAndDissocLast1H, fieldNumber: 29)
      }
      if _storage._steerState != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._steerState, fieldNumber: 30)
      }
      if !_storage._givenName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._givenName, fieldNumber: 31)
      }
      if _storage._hopsFromController != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._hopsFromController, fieldNumber: 32)
      }
      if _storage._estTxRateMbpsFromController.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._estTxRateMbpsFromController, fieldNumber: 33)
      }
      if _storage._estRxRateMbpsFromController.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._estRxRateMbpsFromController, fieldNumber: 34)
      }
      if !_storage._hardwareVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hardwareVersion, fieldNumber: 37)
      }
      if !_storage._softwareVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._softwareVersion, fieldNumber: 38)
      }
      if _storage._apiVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._apiVersion, fieldNumber: 39)
      }
      try { if let v = _storage._pingMetrics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      } }()
      if !_storage._ipv6Addresses.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ipv6Addresses, fieldNumber: 41)
      }
      if _storage._blocked != false {
        try visitor.visitSingularBoolField(value: _storage._blocked, fieldNumber: 42)
      }
      if _storage._clientID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._clientID, fieldNumber: 43)
      }
      try { if let v = _storage._fqcodelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      } }()
      if _storage._noDataIdleS != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._noDataIdleS, fieldNumber: 45)
      }
      if _storage._dhcpLeaseActive != false {
        try visitor.visitSingularBoolField(value: _storage._dhcpLeaseActive, fieldNumber: 46)
      }
      if _storage._dhcpLeaseRenewed != false {
        try visitor.visitSingularBoolField(value: _storage._dhcpLeaseRenewed, fieldNumber: 47)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClient, rhs: SpaceX_API_Device_WifiClient) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._givenName != rhs_storage._givenName {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._macAddress != rhs_storage._macAddress {return false}
        if _storage._ipAddress != rhs_storage._ipAddress {return false}
        if _storage._dhcpLeaseActive != rhs_storage._dhcpLeaseActive {return false}
        if _storage._dhcpLeaseRenewed != rhs_storage._dhcpLeaseRenewed {return false}
        if _storage._ipv6Addresses != rhs_storage._ipv6Addresses {return false}
        if _storage._signalStrength != rhs_storage._signalStrength {return false}
        if _storage._channelWidth != rhs_storage._channelWidth {return false}
        if _storage._rxStats != rhs_storage._rxStats {return false}
        if _storage._txStats != rhs_storage._txStats {return false}
        if _storage._associatedTimeS != rhs_storage._associatedTimeS {return false}
        if _storage._noDataIdleS != rhs_storage._noDataIdleS {return false}
        if _storage._modeStr != rhs_storage._modeStr {return false}
        if _storage._iface != rhs_storage._iface {return false}
        if _storage._ifaceName != rhs_storage._ifaceName {return false}
        if _storage._snr != rhs_storage._snr {return false}
        if _storage._psmode != rhs_storage._psmode {return false}
        if _storage._upstreamMacAddress != rhs_storage._upstreamMacAddress {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._swqChecks != rhs_storage._swqChecks {return false}
        if _storage._swqChecksNonEmpty != rhs_storage._swqChecksNonEmpty {return false}
        if _storage._mibSteerState != rhs_storage._mibSteerState {return false}
        if _storage._mibSteerMethod != rhs_storage._mibSteerMethod {return false}
        if _storage._btmRequests != rhs_storage._btmRequests {return false}
        if _storage._btmRequestsSuccess != rhs_storage._btmRequestsSuccess {return false}
        if _storage._steerState != rhs_storage._steerState {return false}
        if _storage._steerReqSuccessLast1H != rhs_storage._steerReqSuccessLast1H {return false}
        if _storage._steerReqFailLast1H != rhs_storage._steerReqFailLast1H {return false}
        if _storage._steerReqFailAndDissocLast1H != rhs_storage._steerReqFailAndDissocLast1H {return false}
        if _storage._dot11VSupport != rhs_storage._dot11VSupport {return false}
        if _storage._hopsFromController != rhs_storage._hopsFromController {return false}
        if _storage._estTxRateMbpsFromController != rhs_storage._estTxRateMbpsFromController {return false}
        if _storage._estRxRateMbpsFromController != rhs_storage._estRxRateMbpsFromController {return false}
        if _storage._hardwareVersion != rhs_storage._hardwareVersion {return false}
        if _storage._softwareVersion != rhs_storage._softwareVersion {return false}
        if _storage._apiVersion != rhs_storage._apiVersion {return false}
        if _storage._pingMetrics != rhs_storage._pingMetrics {return false}
        if _storage._blocked != rhs_storage._blocked {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._fqcodelInfo != rhs_storage._fqcodelInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiClient.Interface: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ETH"),
    2: .same(proto: "RF_2GHZ"),
    3: .same(proto: "RF_5GHZ"),
    4: .same(proto: "RF_5GHZ_HIGH"),
  ]
}

extension SpaceX_API_Device_WifiClient.Role: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_UNKNOWN"),
    1: .same(proto: "CLIENT"),
    2: .same(proto: "REPEATER"),
    3: .same(proto: "CONTROLLER"),
  ]
}

extension SpaceX_API_Device_WifiClient.RxStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiClient.protoMessageName + ".RxStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
    2: .standard(proto: "count_errors"),
    13: .standard(proto: "phy_mode"),
    3: .same(proto: "nss"),
    8: .standard(proto: "rate_mbps"),
    14: .standard(proto: "rate_mbps_last_30s"),
    15: .standard(proto: "rate_mbps_last_15s"),
    5: .same(proto: "mcs"),
    6: .same(proto: "bandwidth"),
    7: .standard(proto: "guard_ns"),
    9: .standard(proto: "airtime_fraction_last_1s"),
    10: .standard(proto: "sampled_packets"),
    11: .standard(proto: "sampled_packets_retried"),
    12: .standard(proto: "sampled_packets_dropped"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bytes) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.countErrors) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.nss) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.mcs) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.bandwidth) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.guardNs) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.rateMbps) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.airtimeFractionLast1S) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.sampledPackets) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.sampledPacketsRetried) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.sampledPacketsDropped) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.phyMode) }()
      case 14: try { try decoder.decodeSingularFloatField(value: &self.rateMbpsLast30S) }()
      case 15: try { try decoder.decodeSingularFloatField(value: &self.rateMbpsLast15S) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytes != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytes, fieldNumber: 1)
    }
    if self.countErrors != 0 {
      try visitor.visitSingularUInt64Field(value: self.countErrors, fieldNumber: 2)
    }
    if self.nss != 0 {
      try visitor.visitSingularInt32Field(value: self.nss, fieldNumber: 3)
    }
    if self.mcs != 0 {
      try visitor.visitSingularUInt32Field(value: self.mcs, fieldNumber: 5)
    }
    if self.bandwidth != 0 {
      try visitor.visitSingularUInt32Field(value: self.bandwidth, fieldNumber: 6)
    }
    if self.guardNs != 0 {
      try visitor.visitSingularUInt32Field(value: self.guardNs, fieldNumber: 7)
    }
    if self.rateMbps != 0 {
      try visitor.visitSingularUInt32Field(value: self.rateMbps, fieldNumber: 8)
    }
    if self.airtimeFractionLast1S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.airtimeFractionLast1S, fieldNumber: 9)
    }
    if self.sampledPackets != 0 {
      try visitor.visitSingularUInt32Field(value: self.sampledPackets, fieldNumber: 10)
    }
    if self.sampledPacketsRetried != 0 {
      try visitor.visitSingularUInt32Field(value: self.sampledPacketsRetried, fieldNumber: 11)
    }
    if self.sampledPacketsDropped != 0 {
      try visitor.visitSingularUInt32Field(value: self.sampledPacketsDropped, fieldNumber: 12)
    }
    if self.phyMode != 0 {
      try visitor.visitSingularUInt32Field(value: self.phyMode, fieldNumber: 13)
    }
    if self.rateMbpsLast30S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rateMbpsLast30S, fieldNumber: 14)
    }
    if self.rateMbpsLast15S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rateMbpsLast15S, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClient.RxStats, rhs: SpaceX_API_Device_WifiClient.RxStats) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.countErrors != rhs.countErrors {return false}
    if lhs.phyMode != rhs.phyMode {return false}
    if lhs.nss != rhs.nss {return false}
    if lhs.rateMbps != rhs.rateMbps {return false}
    if lhs.rateMbpsLast30S != rhs.rateMbpsLast30S {return false}
    if lhs.rateMbpsLast15S != rhs.rateMbpsLast15S {return false}
    if lhs.mcs != rhs.mcs {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.guardNs != rhs.guardNs {return false}
    if lhs.airtimeFractionLast1S != rhs.airtimeFractionLast1S {return false}
    if lhs.sampledPackets != rhs.sampledPackets {return false}
    if lhs.sampledPacketsRetried != rhs.sampledPacketsRetried {return false}
    if lhs.sampledPacketsDropped != rhs.sampledPacketsDropped {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiClient.TxStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiClient.protoMessageName + ".TxStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
    2: .standard(proto: "success_bytes"),
    10: .standard(proto: "phy_mode"),
    3: .same(proto: "nss"),
    8: .standard(proto: "rate_mbps"),
    11: .standard(proto: "rate_mbps_last_30s"),
    12: .standard(proto: "rate_mbps_last_15s"),
    5: .same(proto: "mcs"),
    6: .same(proto: "bandwidth"),
    7: .standard(proto: "guard_ns"),
    9: .standard(proto: "airtime_fraction_last_1s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bytes) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.successBytes) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.nss) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.mcs) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.bandwidth) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.guardNs) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.rateMbps) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.airtimeFractionLast1S) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.phyMode) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.rateMbpsLast30S) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.rateMbpsLast15S) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytes != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytes, fieldNumber: 1)
    }
    if self.successBytes != 0 {
      try visitor.visitSingularUInt64Field(value: self.successBytes, fieldNumber: 2)
    }
    if self.nss != 0 {
      try visitor.visitSingularInt32Field(value: self.nss, fieldNumber: 3)
    }
    if self.mcs != 0 {
      try visitor.visitSingularUInt32Field(value: self.mcs, fieldNumber: 5)
    }
    if self.bandwidth != 0 {
      try visitor.visitSingularUInt32Field(value: self.bandwidth, fieldNumber: 6)
    }
    if self.guardNs != 0 {
      try visitor.visitSingularUInt32Field(value: self.guardNs, fieldNumber: 7)
    }
    if self.rateMbps != 0 {
      try visitor.visitSingularUInt32Field(value: self.rateMbps, fieldNumber: 8)
    }
    if self.airtimeFractionLast1S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.airtimeFractionLast1S, fieldNumber: 9)
    }
    if self.phyMode != 0 {
      try visitor.visitSingularUInt32Field(value: self.phyMode, fieldNumber: 10)
    }
    if self.rateMbpsLast30S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rateMbpsLast30S, fieldNumber: 11)
    }
    if self.rateMbpsLast15S.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rateMbpsLast15S, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClient.TxStats, rhs: SpaceX_API_Device_WifiClient.TxStats) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.successBytes != rhs.successBytes {return false}
    if lhs.phyMode != rhs.phyMode {return false}
    if lhs.nss != rhs.nss {return false}
    if lhs.rateMbps != rhs.rateMbps {return false}
    if lhs.rateMbpsLast30S != rhs.rateMbpsLast30S {return false}
    if lhs.rateMbpsLast15S != rhs.rateMbpsLast15S {return false}
    if lhs.mcs != rhs.mcs {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.guardNs != rhs.guardNs {return false}
    if lhs.airtimeFractionLast1S != rhs.airtimeFractionLast1S {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiClient.PingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiClient.protoMessageName + ".PingMetrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "in_unhappy_hour_2s"),
    2: .standard(proto: "in_unhappy_hour_5s"),
    3: .standard(proto: "drop_rate_5m"),
    4: .standard(proto: "latency_5m"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.inUnhappyHour2S) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.inUnhappyHour5S) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.dropRate5M) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.latency5M) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.inUnhappyHour2S != false {
      try visitor.visitSingularBoolField(value: self.inUnhappyHour2S, fieldNumber: 1)
    }
    if self.inUnhappyHour5S != false {
      try visitor.visitSingularBoolField(value: self.inUnhappyHour5S, fieldNumber: 2)
    }
    if self.dropRate5M.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.dropRate5M, fieldNumber: 3)
    }
    if self.latency5M.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.latency5M, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClient.PingMetrics, rhs: SpaceX_API_Device_WifiClient.PingMetrics) -> Bool {
    if lhs.inUnhappyHour2S != rhs.inUnhappyHour2S {return false}
    if lhs.inUnhappyHour5S != rhs.inUnhappyHour5S {return false}
    if lhs.dropRate5M != rhs.dropRate5M {return false}
    if lhs.latency5M != rhs.latency5M {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiClient.FqcodelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiClient.protoMessageName + ".FqcodelInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enqs_hi_prio"),
    2: .standard(proto: "enqs_fqcodel"),
    3: .standard(proto: "enqs_new"),
    4: .standard(proto: "enqs_old"),
    5: .standard(proto: "enqs_dropped"),
    6: .standard(proto: "deqs_new"),
    7: .standard(proto: "deqs_old"),
    8: .standard(proto: "deqs_flow_new"),
    9: .standard(proto: "deqs_flow_old_deficit"),
    10: .standard(proto: "deqs_flow_old_starvation"),
    11: .standard(proto: "deqs_dropped"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.enqsHiPrio) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.enqsFqcodel) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.enqsNew) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.enqsOld) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.enqsDropped) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.deqsNew) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.deqsOld) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.deqsFlowNew) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.deqsFlowOldDeficit) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.deqsFlowOldStarvation) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.deqsDropped) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enqsHiPrio != 0 {
      try visitor.visitSingularUInt64Field(value: self.enqsHiPrio, fieldNumber: 1)
    }
    if self.enqsFqcodel != 0 {
      try visitor.visitSingularUInt64Field(value: self.enqsFqcodel, fieldNumber: 2)
    }
    if self.enqsNew != 0 {
      try visitor.visitSingularUInt64Field(value: self.enqsNew, fieldNumber: 3)
    }
    if self.enqsOld != 0 {
      try visitor.visitSingularUInt64Field(value: self.enqsOld, fieldNumber: 4)
    }
    if self.enqsDropped != 0 {
      try visitor.visitSingularUInt64Field(value: self.enqsDropped, fieldNumber: 5)
    }
    if self.deqsNew != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsNew, fieldNumber: 6)
    }
    if self.deqsOld != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsOld, fieldNumber: 7)
    }
    if self.deqsFlowNew != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsFlowNew, fieldNumber: 8)
    }
    if self.deqsFlowOldDeficit != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsFlowOldDeficit, fieldNumber: 9)
    }
    if self.deqsFlowOldStarvation != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsFlowOldStarvation, fieldNumber: 10)
    }
    if self.deqsDropped != 0 {
      try visitor.visitSingularUInt64Field(value: self.deqsDropped, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiClient.FqcodelInfo, rhs: SpaceX_API_Device_WifiClient.FqcodelInfo) -> Bool {
    if lhs.enqsHiPrio != rhs.enqsHiPrio {return false}
    if lhs.enqsFqcodel != rhs.enqsFqcodel {return false}
    if lhs.enqsNew != rhs.enqsNew {return false}
    if lhs.enqsOld != rhs.enqsOld {return false}
    if lhs.enqsDropped != rhs.enqsDropped {return false}
    if lhs.deqsNew != rhs.deqsNew {return false}
    if lhs.deqsOld != rhs.deqsOld {return false}
    if lhs.deqsFlowNew != rhs.deqsFlowNew {return false}
    if lhs.deqsFlowOldDeficit != rhs.deqsFlowOldDeficit {return false}
    if lhs.deqsFlowOldStarvation != rhs.deqsFlowOldStarvation {return false}
    if lhs.deqsDropped != rhs.deqsDropped {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetupRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "skip"),
    2: .standard(proto: "network_name"),
    3: .standard(proto: "network_password"),
    4: .same(proto: "bypass"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.skip) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.networkName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.networkPassword) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.bypass) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.skip != false {
      try visitor.visitSingularBoolField(value: self.skip, fieldNumber: 1)
    }
    if !self.networkName.isEmpty {
      try visitor.visitSingularStringField(value: self.networkName, fieldNumber: 2)
    }
    if !self.networkPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.networkPassword, fieldNumber: 3)
    }
    if self.bypass != false {
      try visitor.visitSingularBoolField(value: self.bypass, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetupRequest, rhs: SpaceX_API_Device_WifiSetupRequest) -> Bool {
    if lhs.skip != rhs.skip {return false}
    if lhs.networkName != rhs.networkName {return false}
    if lhs.networkPassword != rhs.networkPassword {return false}
    if lhs.bypass != rhs.bypass {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetupResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetupResponse, rhs: SpaceX_API_Device_WifiSetupResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiBandStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiBandStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chan_busy_time_fraction"),
    2: .standard(proto: "tx_air_time_fraction"),
    3: .standard(proto: "rx_air_time_fraction"),
    4: .standard(proto: "obss_air_time_fraction"),
    5: .standard(proto: "edcca_air_time_fraction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.chanBusyTimeFraction) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.txAirTimeFraction) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.rxAirTimeFraction) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.obssAirTimeFraction) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.edccaAirTimeFraction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.chanBusyTimeFraction.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.chanBusyTimeFraction, fieldNumber: 1)
    }
    if self.txAirTimeFraction.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.txAirTimeFraction, fieldNumber: 2)
    }
    if self.rxAirTimeFraction.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rxAirTimeFraction, fieldNumber: 3)
    }
    if self.obssAirTimeFraction.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.obssAirTimeFraction, fieldNumber: 4)
    }
    if self.edccaAirTimeFraction.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.edccaAirTimeFraction, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiBandStatus, rhs: SpaceX_API_Device_WifiBandStatus) -> Bool {
    if lhs.chanBusyTimeFraction != rhs.chanBusyTimeFraction {return false}
    if lhs.txAirTimeFraction != rhs.txAirTimeFraction {return false}
    if lhs.rxAirTimeFraction != rhs.rxAirTimeFraction {return false}
    if lhs.obssAirTimeFraction != rhs.obssAirTimeFraction {return false}
    if lhs.edccaAirTimeFraction != rhs.edccaAirTimeFraction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiAlerts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiAlerts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "thermal_throttle"),
    2: .standard(proto: "install_pending"),
    3: .standard(proto: "freshly_fused"),
    4: .standard(proto: "lan_eth_slow_link_10"),
    5: .standard(proto: "lan_eth_slow_link_100"),
    10: .standard(proto: "wan_eth_poor_connection"),
    11: .standard(proto: "mesh_topology_changing_often"),
    12: .standard(proto: "mesh_unreliable_backhaul"),
    13: .standard(proto: "radius_missing_process"),
    14: .standard(proto: "eth_switch_error"),
    15: .standard(proto: "poe_on_dish_unreachable"),
    16: .standard(proto: "poe_fuse_blown"),
    17: .standard(proto: "poe_router_overcurrent"),
    18: .standard(proto: "poe_off_current_nominal"),
    19: .standard(proto: "poe_vin_overvoltage"),
    20: .standard(proto: "poe_vin_undervoltage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.thermalThrottle) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.installPending) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.freshlyFused) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.lanEthSlowLink10) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.lanEthSlowLink100) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.wanEthPoorConnection) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.meshTopologyChangingOften) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.meshUnreliableBackhaul) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.radiusMissingProcess) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.ethSwitchError) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self.poeOnDishUnreachable) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self.poeFuseBlown) }()
      case 17: try { try decoder.decodeSingularBoolField(value: &self.poeRouterOvercurrent) }()
      case 18: try { try decoder.decodeSingularBoolField(value: &self.poeOffCurrentNominal) }()
      case 19: try { try decoder.decodeSingularBoolField(value: &self.poeVinOvervoltage) }()
      case 20: try { try decoder.decodeSingularBoolField(value: &self.poeVinUndervoltage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.thermalThrottle != false {
      try visitor.visitSingularBoolField(value: self.thermalThrottle, fieldNumber: 1)
    }
    if self.installPending != false {
      try visitor.visitSingularBoolField(value: self.installPending, fieldNumber: 2)
    }
    if self.freshlyFused != false {
      try visitor.visitSingularBoolField(value: self.freshlyFused, fieldNumber: 3)
    }
    if self.lanEthSlowLink10 != false {
      try visitor.visitSingularBoolField(value: self.lanEthSlowLink10, fieldNumber: 4)
    }
    if self.lanEthSlowLink100 != false {
      try visitor.visitSingularBoolField(value: self.lanEthSlowLink100, fieldNumber: 5)
    }
    if self.wanEthPoorConnection != false {
      try visitor.visitSingularBoolField(value: self.wanEthPoorConnection, fieldNumber: 10)
    }
    if self.meshTopologyChangingOften != false {
      try visitor.visitSingularBoolField(value: self.meshTopologyChangingOften, fieldNumber: 11)
    }
    if self.meshUnreliableBackhaul != false {
      try visitor.visitSingularBoolField(value: self.meshUnreliableBackhaul, fieldNumber: 12)
    }
    if self.radiusMissingProcess != false {
      try visitor.visitSingularBoolField(value: self.radiusMissingProcess, fieldNumber: 13)
    }
    if self.ethSwitchError != false {
      try visitor.visitSingularBoolField(value: self.ethSwitchError, fieldNumber: 14)
    }
    if self.poeOnDishUnreachable != false {
      try visitor.visitSingularBoolField(value: self.poeOnDishUnreachable, fieldNumber: 15)
    }
    if self.poeFuseBlown != false {
      try visitor.visitSingularBoolField(value: self.poeFuseBlown, fieldNumber: 16)
    }
    if self.poeRouterOvercurrent != false {
      try visitor.visitSingularBoolField(value: self.poeRouterOvercurrent, fieldNumber: 17)
    }
    if self.poeOffCurrentNominal != false {
      try visitor.visitSingularBoolField(value: self.poeOffCurrentNominal, fieldNumber: 18)
    }
    if self.poeVinOvervoltage != false {
      try visitor.visitSingularBoolField(value: self.poeVinOvervoltage, fieldNumber: 19)
    }
    if self.poeVinUndervoltage != false {
      try visitor.visitSingularBoolField(value: self.poeVinUndervoltage, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiAlerts, rhs: SpaceX_API_Device_WifiAlerts) -> Bool {
    if lhs.thermalThrottle != rhs.thermalThrottle {return false}
    if lhs.installPending != rhs.installPending {return false}
    if lhs.freshlyFused != rhs.freshlyFused {return false}
    if lhs.lanEthSlowLink10 != rhs.lanEthSlowLink10 {return false}
    if lhs.lanEthSlowLink100 != rhs.lanEthSlowLink100 {return false}
    if lhs.wanEthPoorConnection != rhs.wanEthPoorConnection {return false}
    if lhs.meshTopologyChangingOften != rhs.meshTopologyChangingOften {return false}
    if lhs.meshUnreliableBackhaul != rhs.meshUnreliableBackhaul {return false}
    if lhs.radiusMissingProcess != rhs.radiusMissingProcess {return false}
    if lhs.ethSwitchError != rhs.ethSwitchError {return false}
    if lhs.poeOnDishUnreachable != rhs.poeOnDishUnreachable {return false}
    if lhs.poeFuseBlown != rhs.poeFuseBlown {return false}
    if lhs.poeRouterOvercurrent != rhs.poeRouterOvercurrent {return false}
    if lhs.poeOffCurrentNominal != rhs.poeOffCurrentNominal {return false}
    if lhs.poeVinOvervoltage != rhs.poeVinOvervoltage {return false}
    if lhs.poeVinUndervoltage != rhs.poeVinUndervoltage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "device_info"),
    4: .standard(proto: "device_state"),
    1: .standard(proto: "captive_portal_enabled"),
    1003: .standard(proto: "ipv4_wan_address"),
    1017: .standard(proto: "ipv6_wan_addresses"),
    1004: .standard(proto: "ping_drop_rate"),
    1021: .standard(proto: "ping_drop_rate_5m"),
    1005: .standard(proto: "ping_latency_ms"),
    1012: .standard(proto: "dish_ping_drop_rate"),
    1018: .standard(proto: "dish_ping_drop_rate_5m"),
    1013: .standard(proto: "dish_ping_latency_ms"),
    1014: .standard(proto: "pop_ping_drop_rate"),
    1020: .standard(proto: "pop_ping_drop_rate_5m"),
    1015: .standard(proto: "pop_ping_latency_ms"),
    1008: .standard(proto: "rf_2ghz_status"),
    1009: .standard(proto: "rf_5ghz_status"),
    1010: .same(proto: "alerts"),
    1011: .standard(proto: "is_aviation"),
    2000: .same(proto: "config"),
    3000: .same(proto: "clients"),
    3001: .standard(proto: "has_client_index"),
    3002: .standard(proto: "client_index"),
    1016: .standard(proto: "is_aviation_conformed"),
    3003: .standard(proto: "radius_stats"),
    1019: .standard(proto: "dhcp_servers"),
    1022: .standard(proto: "poe_stats"),
    1023: .standard(proto: "dish_id"),
    1024: .standard(proto: "utc_ns"),
    1025: .standard(proto: "software_update_stats"),
  ]

  fileprivate class _StorageClass {
    var _deviceInfo: SpaceX_API_Device_DeviceInfo? = nil
    var _deviceState: SpaceX_API_Device_DeviceState? = nil
    var _captivePortalEnabled: Bool = false
    var _ipv4WanAddress: String = String()
    var _ipv6WanAddresses: [String] = []
    var _pingDropRate: Float = 0
    var _pingDropRate5M: Float = 0
    var _pingLatencyMs: Float = 0
    var _dishPingDropRate: Float = 0
    var _dishPingDropRate5M: Float = 0
    var _dishPingLatencyMs: Float = 0
    var _popPingDropRate: Float = 0
    var _popPingDropRate5M: Float = 0
    var _popPingLatencyMs: Float = 0
    var _rf2GhzStatus: SpaceX_API_Device_WifiBandStatus? = nil
    var _rf5GhzStatus: SpaceX_API_Device_WifiBandStatus? = nil
    var _alerts: SpaceX_API_Device_WifiAlerts? = nil
    var _isAviation: Bool = false
    var _config: SpaceX_API_Device_WifiConfig? = nil
    var _clients: [SpaceX_API_Device_WifiClient] = []
    var _hasClientIndex_p: Bool = false
    var _clientIndex: Int32 = 0
    var _isAviationConformed: Bool = false
    var _radiusStats: SpaceX_API_Device_RadiusStatsMap? = nil
    var _dhcpServers: [SpaceX_API_Device_DhcpServer] = []
    var _poeStats: SpaceX_API_Device_PoeStats? = nil
    var _dishID: String = String()
    var _utcNs: Int64 = 0
    var _softwareUpdateStats: SpaceX_API_Device_WifiSoftwareUpdateStats? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _deviceInfo = source._deviceInfo
      _deviceState = source._deviceState
      _captivePortalEnabled = source._captivePortalEnabled
      _ipv4WanAddress = source._ipv4WanAddress
      _ipv6WanAddresses = source._ipv6WanAddresses
      _pingDropRate = source._pingDropRate
      _pingDropRate5M = source._pingDropRate5M
      _pingLatencyMs = source._pingLatencyMs
      _dishPingDropRate = source._dishPingDropRate
      _dishPingDropRate5M = source._dishPingDropRate5M
      _dishPingLatencyMs = source._dishPingLatencyMs
      _popPingDropRate = source._popPingDropRate
      _popPingDropRate5M = source._popPingDropRate5M
      _popPingLatencyMs = source._popPingLatencyMs
      _rf2GhzStatus = source._rf2GhzStatus
      _rf5GhzStatus = source._rf5GhzStatus
      _alerts = source._alerts
      _isAviation = source._isAviation
      _config = source._config
      _clients = source._clients
      _hasClientIndex_p = source._hasClientIndex_p
      _clientIndex = source._clientIndex
      _isAviationConformed = source._isAviationConformed
      _radiusStats = source._radiusStats
      _dhcpServers = source._dhcpServers
      _poeStats = source._poeStats
      _dishID = source._dishID
      _utcNs = source._utcNs
      _softwareUpdateStats = source._softwareUpdateStats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._captivePortalEnabled) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._deviceInfo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._deviceState) }()
        case 1003: try { try decoder.decodeSingularStringField(value: &_storage._ipv4WanAddress) }()
        case 1004: try { try decoder.decodeSingularFloatField(value: &_storage._pingDropRate) }()
        case 1005: try { try decoder.decodeSingularFloatField(value: &_storage._pingLatencyMs) }()
        case 1008: try { try decoder.decodeSingularMessageField(value: &_storage._rf2GhzStatus) }()
        case 1009: try { try decoder.decodeSingularMessageField(value: &_storage._rf5GhzStatus) }()
        case 1010: try { try decoder.decodeSingularMessageField(value: &_storage._alerts) }()
        case 1011: try { try decoder.decodeSingularBoolField(value: &_storage._isAviation) }()
        case 1012: try { try decoder.decodeSingularFloatField(value: &_storage._dishPingDropRate) }()
        case 1013: try { try decoder.decodeSingularFloatField(value: &_storage._dishPingLatencyMs) }()
        case 1014: try { try decoder.decodeSingularFloatField(value: &_storage._popPingDropRate) }()
        case 1015: try { try decoder.decodeSingularFloatField(value: &_storage._popPingLatencyMs) }()
        case 1016: try { try decoder.decodeSingularBoolField(value: &_storage._isAviationConformed) }()
        case 1017: try { try decoder.decodeRepeatedStringField(value: &_storage._ipv6WanAddresses) }()
        case 1018: try { try decoder.decodeSingularFloatField(value: &_storage._dishPingDropRate5M) }()
        case 1019: try { try decoder.decodeRepeatedMessageField(value: &_storage._dhcpServers) }()
        case 1020: try { try decoder.decodeSingularFloatField(value: &_storage._popPingDropRate5M) }()
        case 1021: try { try decoder.decodeSingularFloatField(value: &_storage._pingDropRate5M) }()
        case 1022: try { try decoder.decodeSingularMessageField(value: &_storage._poeStats) }()
        case 1023: try { try decoder.decodeSingularStringField(value: &_storage._dishID) }()
        case 1024: try { try decoder.decodeSingularInt64Field(value: &_storage._utcNs) }()
        case 1025: try { try decoder.decodeSingularMessageField(value: &_storage._softwareUpdateStats) }()
        case 2000: try { try decoder.decodeSingularMessageField(value: &_storage._config) }()
        case 3000: try { try decoder.decodeRepeatedMessageField(value: &_storage._clients) }()
        case 3001: try { try decoder.decodeSingularBoolField(value: &_storage._hasClientIndex_p) }()
        case 3002: try { try decoder.decodeSingularInt32Field(value: &_storage._clientIndex) }()
        case 3003: try { try decoder.decodeSingularMessageField(value: &_storage._radiusStats) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._captivePortalEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._captivePortalEnabled, fieldNumber: 1)
      }
      try { if let v = _storage._deviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._deviceState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._ipv4WanAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipv4WanAddress, fieldNumber: 1003)
      }
      if _storage._pingDropRate.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._pingDropRate, fieldNumber: 1004)
      }
      if _storage._pingLatencyMs.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._pingLatencyMs, fieldNumber: 1005)
      }
      try { if let v = _storage._rf2GhzStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1008)
      } }()
      try { if let v = _storage._rf5GhzStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1009)
      } }()
      try { if let v = _storage._alerts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1010)
      } }()
      if _storage._isAviation != false {
        try visitor.visitSingularBoolField(value: _storage._isAviation, fieldNumber: 1011)
      }
      if _storage._dishPingDropRate.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dishPingDropRate, fieldNumber: 1012)
      }
      if _storage._dishPingLatencyMs.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dishPingLatencyMs, fieldNumber: 1013)
      }
      if _storage._popPingDropRate.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._popPingDropRate, fieldNumber: 1014)
      }
      if _storage._popPingLatencyMs.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._popPingLatencyMs, fieldNumber: 1015)
      }
      if _storage._isAviationConformed != false {
        try visitor.visitSingularBoolField(value: _storage._isAviationConformed, fieldNumber: 1016)
      }
      if !_storage._ipv6WanAddresses.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ipv6WanAddresses, fieldNumber: 1017)
      }
      if _storage._dishPingDropRate5M.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dishPingDropRate5M, fieldNumber: 1018)
      }
      if !_storage._dhcpServers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dhcpServers, fieldNumber: 1019)
      }
      if _storage._popPingDropRate5M.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._popPingDropRate5M, fieldNumber: 1020)
      }
      if _storage._pingDropRate5M.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._pingDropRate5M, fieldNumber: 1021)
      }
      try { if let v = _storage._poeStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1022)
      } }()
      if !_storage._dishID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dishID, fieldNumber: 1023)
      }
      if _storage._utcNs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._utcNs, fieldNumber: 1024)
      }
      try { if let v = _storage._softwareUpdateStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1025)
      } }()
      try { if let v = _storage._config {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2000)
      } }()
      if !_storage._clients.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._clients, fieldNumber: 3000)
      }
      if _storage._hasClientIndex_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasClientIndex_p, fieldNumber: 3001)
      }
      if _storage._clientIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._clientIndex, fieldNumber: 3002)
      }
      try { if let v = _storage._radiusStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3003)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetStatusResponse, rhs: SpaceX_API_Device_WifiGetStatusResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._deviceInfo != rhs_storage._deviceInfo {return false}
        if _storage._deviceState != rhs_storage._deviceState {return false}
        if _storage._captivePortalEnabled != rhs_storage._captivePortalEnabled {return false}
        if _storage._ipv4WanAddress != rhs_storage._ipv4WanAddress {return false}
        if _storage._ipv6WanAddresses != rhs_storage._ipv6WanAddresses {return false}
        if _storage._pingDropRate != rhs_storage._pingDropRate {return false}
        if _storage._pingDropRate5M != rhs_storage._pingDropRate5M {return false}
        if _storage._pingLatencyMs != rhs_storage._pingLatencyMs {return false}
        if _storage._dishPingDropRate != rhs_storage._dishPingDropRate {return false}
        if _storage._dishPingDropRate5M != rhs_storage._dishPingDropRate5M {return false}
        if _storage._dishPingLatencyMs != rhs_storage._dishPingLatencyMs {return false}
        if _storage._popPingDropRate != rhs_storage._popPingDropRate {return false}
        if _storage._popPingDropRate5M != rhs_storage._popPingDropRate5M {return false}
        if _storage._popPingLatencyMs != rhs_storage._popPingLatencyMs {return false}
        if _storage._rf2GhzStatus != rhs_storage._rf2GhzStatus {return false}
        if _storage._rf5GhzStatus != rhs_storage._rf5GhzStatus {return false}
        if _storage._alerts != rhs_storage._alerts {return false}
        if _storage._isAviation != rhs_storage._isAviation {return false}
        if _storage._config != rhs_storage._config {return false}
        if _storage._clients != rhs_storage._clients {return false}
        if _storage._hasClientIndex_p != rhs_storage._hasClientIndex_p {return false}
        if _storage._clientIndex != rhs_storage._clientIndex {return false}
        if _storage._isAviationConformed != rhs_storage._isAviationConformed {return false}
        if _storage._radiusStats != rhs_storage._radiusStats {return false}
        if _storage._dhcpServers != rhs_storage._dhcpServers {return false}
        if _storage._poeStats != rhs_storage._poeStats {return false}
        if _storage._dishID != rhs_storage._dishID {return false}
        if _storage._utcNs != rhs_storage._utcNs {return false}
        if _storage._softwareUpdateStats != rhs_storage._softwareUpdateStats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiAuthenticateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiAuthenticateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._challenge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._challenge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiAuthenticateRequest, rhs: SpaceX_API_Device_WifiAuthenticateRequest) -> Bool {
    if lhs._challenge != rhs._challenge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiAuthenticateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiAuthenticateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "wifi"),
    2: .same(proto: "dish"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._wifi) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dish) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._wifi {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dish {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiAuthenticateResponse, rhs: SpaceX_API_Device_WifiAuthenticateResponse) -> Bool {
    if lhs._wifi != rhs._wifi {return false}
    if lhs._dish != rhs._dish {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiAccountBondingEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiAccountBondingEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dish_id"),
    2: .standard(proto: "is_repeater"),
    3: .standard(proto: "hardware_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dishID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isRepeater) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hardwareVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dishID.isEmpty {
      try visitor.visitSingularStringField(value: self.dishID, fieldNumber: 1)
    }
    if self.isRepeater != false {
      try visitor.visitSingularBoolField(value: self.isRepeater, fieldNumber: 2)
    }
    if !self.hardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiAccountBondingEvent, rhs: SpaceX_API_Device_WifiAccountBondingEvent) -> Bool {
    if lhs.dishID != rhs.dishID {return false}
    if lhs.isRepeater != rhs.isRepeater {return false}
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiNewPeerEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiNewPeerEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "peer_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.peerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.peerID.isEmpty {
      try visitor.visitSingularStringField(value: self.peerID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiNewPeerEvent, rhs: SpaceX_API_Device_WifiNewPeerEvent) -> Bool {
    if lhs.peerID != rhs.peerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_PingMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PingMetrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latency_mean_ms"),
    2: .standard(proto: "latency_stddev_ms"),
    3: .standard(proto: "latency_mean_ms_5m"),
    4: .standard(proto: "latency_mean_ms_1h"),
    5: .standard(proto: "latency_mean_ms_1d"),
    6: .standard(proto: "drop_rate"),
    7: .standard(proto: "drop_rate_5m"),
    8: .standard(proto: "drop_rate_1h"),
    9: .standard(proto: "drop_rate_1d"),
    10: .standard(proto: "seconds_since_last_success"),
    11: .standard(proto: "seconds_since_last_1s_outage"),
    15: .standard(proto: "seconds_since_last_2s_outage"),
    12: .standard(proto: "seconds_since_last_5s_outage"),
    18: .standard(proto: "seconds_since_last_15s_outage"),
    19: .standard(proto: "seconds_since_last_60s_outage"),
    20: .standard(proto: "seconds_since_last_300s_outage"),
    13: .standard(proto: "happy_hours_1s_1d"),
    16: .standard(proto: "happy_hours_2s_1d"),
    14: .standard(proto: "happy_hours_5s_1d"),
  ]

  fileprivate class _StorageClass {
    var _latencyMeanMs: Float = 0
    var _latencyStddevMs: Float = 0
    var _latencyMeanMs5M: Float = 0
    var _latencyMeanMs1H: Float = 0
    var _latencyMeanMs1D: Float = 0
    var _dropRate: Float = 0
    var _dropRate5M: Float = 0
    var _dropRate1H: Float = 0
    var _dropRate1D: Float = 0
    var _secondsSinceLastSuccess: Float = 0
    var _secondsSinceLast1SOutage: Float = 0
    var _secondsSinceLast2SOutage: Float = 0
    var _secondsSinceLast5SOutage: Float = 0
    var _secondsSinceLast15SOutage: Float = 0
    var _secondsSinceLast60SOutage: Float = 0
    var _secondsSinceLast300SOutage: Float = 0
    var _happyHours1S1D: Float = 0
    var _happyHours2S1D: Float = 0
    var _happyHours5S1D: Float = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _latencyMeanMs = source._latencyMeanMs
      _latencyStddevMs = source._latencyStddevMs
      _latencyMeanMs5M = source._latencyMeanMs5M
      _latencyMeanMs1H = source._latencyMeanMs1H
      _latencyMeanMs1D = source._latencyMeanMs1D
      _dropRate = source._dropRate
      _dropRate5M = source._dropRate5M
      _dropRate1H = source._dropRate1H
      _dropRate1D = source._dropRate1D
      _secondsSinceLastSuccess = source._secondsSinceLastSuccess
      _secondsSinceLast1SOutage = source._secondsSinceLast1SOutage
      _secondsSinceLast2SOutage = source._secondsSinceLast2SOutage
      _secondsSinceLast5SOutage = source._secondsSinceLast5SOutage
      _secondsSinceLast15SOutage = source._secondsSinceLast15SOutage
      _secondsSinceLast60SOutage = source._secondsSinceLast60SOutage
      _secondsSinceLast300SOutage = source._secondsSinceLast300SOutage
      _happyHours1S1D = source._happyHours1S1D
      _happyHours2S1D = source._happyHours2S1D
      _happyHours5S1D = source._happyHours5S1D
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._latencyMeanMs) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._latencyStddevMs) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._latencyMeanMs5M) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._latencyMeanMs1H) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._latencyMeanMs1D) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._dropRate) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._dropRate5M) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._dropRate1H) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._dropRate1D) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLastSuccess) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast1SOutage) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast5SOutage) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._happyHours1S1D) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._happyHours5S1D) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast2SOutage) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._happyHours2S1D) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast15SOutage) }()
        case 19: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast60SOutage) }()
        case 20: try { try decoder.decodeSingularFloatField(value: &_storage._secondsSinceLast300SOutage) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._latencyMeanMs.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._latencyMeanMs, fieldNumber: 1)
      }
      if _storage._latencyStddevMs.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._latencyStddevMs, fieldNumber: 2)
      }
      if _storage._latencyMeanMs5M.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._latencyMeanMs5M, fieldNumber: 3)
      }
      if _storage._latencyMeanMs1H.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._latencyMeanMs1H, fieldNumber: 4)
      }
      if _storage._latencyMeanMs1D.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._latencyMeanMs1D, fieldNumber: 5)
      }
      if _storage._dropRate.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dropRate, fieldNumber: 6)
      }
      if _storage._dropRate5M.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dropRate5M, fieldNumber: 7)
      }
      if _storage._dropRate1H.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dropRate1H, fieldNumber: 8)
      }
      if _storage._dropRate1D.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._dropRate1D, fieldNumber: 9)
      }
      if _storage._secondsSinceLastSuccess.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLastSuccess, fieldNumber: 10)
      }
      if _storage._secondsSinceLast1SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast1SOutage, fieldNumber: 11)
      }
      if _storage._secondsSinceLast5SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast5SOutage, fieldNumber: 12)
      }
      if _storage._happyHours1S1D.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._happyHours1S1D, fieldNumber: 13)
      }
      if _storage._happyHours5S1D.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._happyHours5S1D, fieldNumber: 14)
      }
      if _storage._secondsSinceLast2SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast2SOutage, fieldNumber: 15)
      }
      if _storage._happyHours2S1D.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._happyHours2S1D, fieldNumber: 16)
      }
      if _storage._secondsSinceLast15SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast15SOutage, fieldNumber: 18)
      }
      if _storage._secondsSinceLast60SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast60SOutage, fieldNumber: 19)
      }
      if _storage._secondsSinceLast300SOutage.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsSinceLast300SOutage, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_PingMetrics, rhs: SpaceX_API_Device_PingMetrics) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._latencyMeanMs != rhs_storage._latencyMeanMs {return false}
        if _storage._latencyStddevMs != rhs_storage._latencyStddevMs {return false}
        if _storage._latencyMeanMs5M != rhs_storage._latencyMeanMs5M {return false}
        if _storage._latencyMeanMs1H != rhs_storage._latencyMeanMs1H {return false}
        if _storage._latencyMeanMs1D != rhs_storage._latencyMeanMs1D {return false}
        if _storage._dropRate != rhs_storage._dropRate {return false}
        if _storage._dropRate5M != rhs_storage._dropRate5M {return false}
        if _storage._dropRate1H != rhs_storage._dropRate1H {return false}
        if _storage._dropRate1D != rhs_storage._dropRate1D {return false}
        if _storage._secondsSinceLastSuccess != rhs_storage._secondsSinceLastSuccess {return false}
        if _storage._secondsSinceLast1SOutage != rhs_storage._secondsSinceLast1SOutage {return false}
        if _storage._secondsSinceLast2SOutage != rhs_storage._secondsSinceLast2SOutage {return false}
        if _storage._secondsSinceLast5SOutage != rhs_storage._secondsSinceLast5SOutage {return false}
        if _storage._secondsSinceLast15SOutage != rhs_storage._secondsSinceLast15SOutage {return false}
        if _storage._secondsSinceLast60SOutage != rhs_storage._secondsSinceLast60SOutage {return false}
        if _storage._secondsSinceLast300SOutage != rhs_storage._secondsSinceLast300SOutage {return false}
        if _storage._happyHours1S1D != rhs_storage._happyHours1S1D {return false}
        if _storage._happyHours2S1D != rhs_storage._happyHours2S1D {return false}
        if _storage._happyHours5S1D != rhs_storage._happyHours5S1D {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetPingMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetPingMetricsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetPingMetricsRequest, rhs: SpaceX_API_Device_WifiGetPingMetricsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetPingMetricsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetPingMetricsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internet"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._internet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._internet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetPingMetricsResponse, rhs: SpaceX_API_Device_WifiGetPingMetricsResponse) -> Bool {
    if lhs._internet != rhs._internet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiNetwork: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiNetwork"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "band"),
    2: .same(proto: "ssid"),
    3: .same(proto: "channel"),
    4: .standard(proto: "encryption_type_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.band) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ssid) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.encryptionTypeStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.band != .wifiUnknown {
      try visitor.visitSingularEnumField(value: self.band, fieldNumber: 1)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 2)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 3)
    }
    if !self.encryptionTypeStr.isEmpty {
      try visitor.visitSingularStringField(value: self.encryptionTypeStr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiNetwork, rhs: SpaceX_API_Device_WifiNetwork) -> Bool {
    if lhs.band != rhs.band {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.encryptionTypeStr != rhs.encryptionTypeStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiNetwork.Band: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WIFI_UNKNOWN"),
    1: .same(proto: "WIFI_2_4GHZ"),
    2: .same(proto: "WIFI_5GHZ"),
  ]
}

extension SpaceX_API_Device_WifiPersistentStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiPersistentStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "factory_reset_button"),
    2: .standard(proto: "factory_reset_plug_unplug"),
    3: .standard(proto: "factory_reset_command"),
    4: .standard(proto: "factory_reset_failed_load_wifi_config"),
    5: .standard(proto: "reboot_from_software_update"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._factoryResetButton) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._factoryResetPlugUnplug) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._factoryResetCommand) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._factoryResetFailedLoadWifiConfig) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rebootFromSoftwareUpdate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._factoryResetButton {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._factoryResetPlugUnplug {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._factoryResetCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._factoryResetFailedLoadWifiConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rebootFromSoftwareUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiPersistentStats, rhs: SpaceX_API_Device_WifiPersistentStats) -> Bool {
    if lhs._factoryResetButton != rhs._factoryResetButton {return false}
    if lhs._factoryResetPlugUnplug != rhs._factoryResetPlugUnplug {return false}
    if lhs._factoryResetCommand != rhs._factoryResetCommand {return false}
    if lhs._factoryResetFailedLoadWifiConfig != rhs._factoryResetFailedLoadWifiConfig {return false}
    if lhs._rebootFromSoftwareUpdate != rhs._rebootFromSoftwareUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiPersistentStats.Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiPersistentStats.protoMessageName + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .standard(proto: "last_occurred_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.lastOccurredTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 1)
    }
    if self.lastOccurredTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.lastOccurredTimestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiPersistentStats.Event, rhs: SpaceX_API_Device_WifiPersistentStats.Event) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.lastOccurredTimestamp != rhs.lastOccurredTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetPersistentStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetPersistentStatsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stats"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stats) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetPersistentStatsResponse, rhs: SpaceX_API_Device_WifiGetPersistentStatsResponse) -> Bool {
    if lhs._stats != rhs._stats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_RadioStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RadioStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "band"),
    2: .standard(proto: "rx_stats"),
    3: .standard(proto: "tx_stats"),
    4: .standard(proto: "thermal_status"),
    5: .standard(proto: "antenna_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.band) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rxStats) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._txStats) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._thermalStatus) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._antennaStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.band != .rfUnknown {
      try visitor.visitSingularEnumField(value: self.band, fieldNumber: 1)
    }
    try { if let v = self._rxStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._txStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._thermalStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._antennaStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_RadioStats, rhs: SpaceX_API_Device_RadioStats) -> Bool {
    if lhs.band != rhs.band {return false}
    if lhs._rxStats != rhs._rxStats {return false}
    if lhs._txStats != rhs._txStats {return false}
    if lhs._thermalStatus != rhs._thermalStatus {return false}
    if lhs._antennaStatus != rhs._antennaStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_RadioStats.ThermalStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_RadioStats.protoMessageName + ".ThermalStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "temp"),
    3: .same(proto: "temp2"),
    4: .standard(proto: "power_reduction"),
    5: .standard(proto: "duty_cycle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.level) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.temp) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.temp2) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.powerReduction) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.dutyCycle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != 0 {
      try visitor.visitSingularUInt32Field(value: self.level, fieldNumber: 1)
    }
    if self.temp != 0 {
      try visitor.visitSingularUInt32Field(value: self.temp, fieldNumber: 2)
    }
    if self.temp2.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.temp2, fieldNumber: 3)
    }
    if self.powerReduction != 0 {
      try visitor.visitSingularUInt32Field(value: self.powerReduction, fieldNumber: 4)
    }
    if self.dutyCycle != 0 {
      try visitor.visitSingularUInt32Field(value: self.dutyCycle, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_RadioStats.ThermalStatus, rhs: SpaceX_API_Device_RadioStats.ThermalStatus) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.temp != rhs.temp {return false}
    if lhs.temp2 != rhs.temp2 {return false}
    if lhs.powerReduction != rhs.powerReduction {return false}
    if lhs.dutyCycle != rhs.dutyCycle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_RadioStats.AntennaStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_RadioStats.protoMessageName + ".AntennaStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rssi1"),
    2: .same(proto: "rssi2"),
    3: .same(proto: "rssi3"),
    4: .same(proto: "rssi4"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.rssi1) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.rssi2) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.rssi3) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.rssi4) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rssi1.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssi1, fieldNumber: 1)
    }
    if self.rssi2.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssi2, fieldNumber: 2)
    }
    if self.rssi3.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssi3, fieldNumber: 3)
    }
    if self.rssi4.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssi4, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_RadioStats.AntennaStatus, rhs: SpaceX_API_Device_RadioStats.AntennaStatus) -> Bool {
    if lhs.rssi1 != rhs.rssi1 {return false}
    if lhs.rssi2 != rhs.rssi2 {return false}
    if lhs.rssi3 != rhs.rssi3 {return false}
    if lhs.rssi4 != rhs.rssi4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_starlink_routers_hourly_metrics_v2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".starlink_routers_hourly_metrics_v2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "timestamp_date"),
    3: .standard(proto: "timestamp_hour"),
    10000: .same(proto: "timestamp"),
    4: .standard(proto: "sys_hw_gen"),
    5: .standard(proto: "sys_sw"),
    6: .standard(proto: "sys_country"),
    7: .standard(proto: "sys_is_dev"),
    8: .standard(proto: "sys_alloc_fds"),
    9: .standard(proto: "sys_cpu_usage"),
    10: .standard(proto: "sys_mem_free_kb"),
    11: .standard(proto: "sys_bootcount"),
    12: .standard(proto: "sys_partitions_equal"),
    13: .standard(proto: "sys_uptime_seconds"),
    14: .standard(proto: "sys_anti_rollback_version"),
    15: .standard(proto: "sys_is_witl"),
    16: .standard(proto: "sys_is_aviation_conformed"),
    17: .standard(proto: "sys_ubi_max_ec"),
    18: .standard(proto: "sys_ubi_bad_peb"),
    19: .standard(proto: "sys_board_rev"),
    100: .standard(proto: "radios_2ghz_channel"),
    101: .standard(proto: "radios_2ghz_antenna1_rssi"),
    102: .standard(proto: "radios_2ghz_antenna2_rssi"),
    103: .standard(proto: "radios_2ghz_antenna3_rssi"),
    197: .standard(proto: "radios_2ghz_antenna4_rssi"),
    157: .standard(proto: "radios_2ghz_antenna1_tssi"),
    158: .standard(proto: "radios_2ghz_antenna2_tssi"),
    159: .standard(proto: "radios_2ghz_antenna3_tssi"),
    160: .standard(proto: "radios_2ghz_antenna4_tssi"),
    104: .standard(proto: "radios_2ghz_iface_count"),
    105: .standard(proto: "radios_2ghz_chan_busy_fraction"),
    106: .standard(proto: "radios_2ghz_edcca_fraction"),
    107: .standard(proto: "radios_2ghz_overlapping_bss_fraction"),
    108: .standard(proto: "radios_2ghz_rx_bytes"),
    109: .standard(proto: "radios_2ghz_rx_packets"),
    110: .standard(proto: "radios_2ghz_rx_errors"),
    111: .standard(proto: "radios_2ghz_rx_frame_errors"),
    112: .standard(proto: "radios_2ghz_rx_packet_error_rate"),
    113: .standard(proto: "radios_2ghz_rx_airtime_fraction"),
    114: .standard(proto: "radios_2ghz_tx_bytes"),
    115: .standard(proto: "radios_2ghz_tx_packets"),
    116: .standard(proto: "radios_2ghz_tx_errors"),
    117: .standard(proto: "radios_2ghz_tx_packet_error_rate"),
    118: .standard(proto: "radios_2ghz_tx_airtime_fraction"),
    119: .standard(proto: "radios_5ghz_channel"),
    120: .standard(proto: "radios_5ghz_antenna1_rssi"),
    121: .standard(proto: "radios_5ghz_antenna2_rssi"),
    122: .standard(proto: "radios_5ghz_antenna3_rssi"),
    198: .standard(proto: "radios_5ghz_antenna4_rssi"),
    161: .standard(proto: "radios_5ghz_antenna1_tssi"),
    162: .standard(proto: "radios_5ghz_antenna2_tssi"),
    163: .standard(proto: "radios_5ghz_antenna3_tssi"),
    164: .standard(proto: "radios_5ghz_antenna4_tssi"),
    123: .standard(proto: "radios_5ghz_iface_count"),
    124: .standard(proto: "radios_5ghz_chan_busy_fraction"),
    125: .standard(proto: "radios_5ghz_edcca_fraction"),
    126: .standard(proto: "radios_5ghz_overlapping_bss_fraction"),
    127: .standard(proto: "radios_5ghz_rx_bytes"),
    128: .standard(proto: "radios_5ghz_rx_packets"),
    129: .standard(proto: "radios_5ghz_rx_errors"),
    130: .standard(proto: "radios_5ghz_rx_frame_errors"),
    131: .standard(proto: "radios_5ghz_rx_packet_error_rate"),
    132: .standard(proto: "radios_5ghz_rx_airtime_fraction"),
    133: .standard(proto: "radios_5ghz_tx_bytes"),
    134: .standard(proto: "radios_5ghz_tx_packets"),
    135: .standard(proto: "radios_5ghz_tx_errors"),
    136: .standard(proto: "radios_5ghz_tx_packet_error_rate"),
    137: .standard(proto: "radios_5ghz_tx_airtime_fraction"),
    138: .standard(proto: "radios_5ghz_high_channel"),
    139: .standard(proto: "radios_5ghz_high_antenna1_rssi"),
    140: .standard(proto: "radios_5ghz_high_antenna2_rssi"),
    141: .standard(proto: "radios_5ghz_high_antenna3_rssi"),
    199: .standard(proto: "radios_5ghz_high_antenna4_rssi"),
    165: .standard(proto: "radios_5ghz_high_antenna1_tssi"),
    166: .standard(proto: "radios_5ghz_high_antenna2_tssi"),
    167: .standard(proto: "radios_5ghz_high_antenna3_tssi"),
    168: .standard(proto: "radios_5ghz_high_antenna4_tssi"),
    142: .standard(proto: "radios_5ghz_high_iface_count"),
    143: .standard(proto: "radios_5ghz_high_chan_busy_fraction"),
    144: .standard(proto: "radios_5ghz_high_edcca_fraction"),
    145: .standard(proto: "radios_5ghz_high_overlapping_bss_fraction"),
    146: .standard(proto: "radios_5ghz_high_rx_bytes"),
    147: .standard(proto: "radios_5ghz_high_rx_packets"),
    148: .standard(proto: "radios_5ghz_high_rx_errors"),
    149: .standard(proto: "radios_5ghz_high_rx_frame_errors"),
    150: .standard(proto: "radios_5ghz_high_rx_packet_error_rate"),
    151: .standard(proto: "radios_5ghz_high_rx_airtime_fraction"),
    152: .standard(proto: "radios_5ghz_high_tx_bytes"),
    153: .standard(proto: "radios_5ghz_high_tx_packets"),
    154: .standard(proto: "radios_5ghz_high_tx_errors"),
    155: .standard(proto: "radios_5ghz_high_tx_packet_error_rate"),
    156: .standard(proto: "radios_5ghz_high_tx_airtime_fraction"),
    200: .standard(proto: "radios_2ghz_thermal_temp"),
    201: .standard(proto: "radios_5ghz_thermal_temp"),
    206: .standard(proto: "radios_5ghz_high_thermal_temp"),
    202: .standard(proto: "radios_2ghz_thermal_duty_cycle"),
    203: .standard(proto: "radios_5ghz_thermal_duty_cycle"),
    207: .standard(proto: "radios_5ghz_high_thermal_duty_cycle"),
    204: .standard(proto: "radios_2ghz_thermal_throttled_seconds"),
    205: .standard(proto: "radios_5ghz_thermal_throttled_seconds"),
    208: .standard(proto: "radios_5ghz_high_thermal_throttled_seconds"),
    210: .standard(proto: "board_temp"),
    211: .standard(proto: "poe_mcu_die_temp"),
    300: .standard(proto: "ifaces_lan_eth_rx_bytes"),
    301: .standard(proto: "ifaces_lan_eth_rx_packets"),
    302: .standard(proto: "ifaces_lan_eth_rx_errors"),
    303: .standard(proto: "ifaces_lan_eth_rx_frame_errors"),
    304: .standard(proto: "ifaces_lan_eth_tx_bytes"),
    305: .standard(proto: "ifaces_lan_eth_tx_packets"),
    306: .standard(proto: "ifaces_lan_eth_tx_errors"),
    314: .standard(proto: "ifaces_lan1_eth_rx_bytes"),
    315: .standard(proto: "ifaces_lan1_eth_rx_packets"),
    316: .standard(proto: "ifaces_lan1_eth_rx_errors"),
    317: .standard(proto: "ifaces_lan1_eth_rx_frame_errors"),
    318: .standard(proto: "ifaces_lan1_eth_tx_bytes"),
    319: .standard(proto: "ifaces_lan1_eth_tx_packets"),
    320: .standard(proto: "ifaces_lan1_eth_tx_errors"),
    307: .standard(proto: "ifaces_wan_eth_rx_bytes"),
    308: .standard(proto: "ifaces_wan_eth_rx_packets"),
    309: .standard(proto: "ifaces_wan_eth_rx_errors"),
    310: .standard(proto: "ifaces_wan_eth_rx_frame_errors"),
    311: .standard(proto: "ifaces_wan_eth_tx_bytes"),
    312: .standard(proto: "ifaces_wan_eth_tx_packets"),
    313: .standard(proto: "ifaces_wan_eth_tx_errors"),
    400: .same(proto: "clients"),
    401: .standard(proto: "clients_2ghz"),
    402: .standard(proto: "clients_5ghz"),
    413: .standard(proto: "clients_5ghz_high"),
    403: .standard(proto: "clients_eth"),
    429: .standard(proto: "clients_5ghz_rx_bandwidth_20mhz"),
    430: .standard(proto: "clients_5ghz_rx_bandwidth_40mhz"),
    431: .standard(proto: "clients_5ghz_rx_bandwidth_80mhz"),
    404: .standard(proto: "clients_repeater"),
    405: .standard(proto: "clients_repeater_2ghz"),
    406: .standard(proto: "clients_repeater_5ghz"),
    416: .standard(proto: "clients_repeater_5ghz_high"),
    407: .standard(proto: "clients_repeater_eth"),
    408: .standard(proto: "mesh_hops"),
    409: .standard(proto: "mesh_one_hop_rssi_avg_2ghz"),
    410: .standard(proto: "mesh_one_hop_rssi_avg_5ghz"),
    414: .standard(proto: "mesh_one_hop_rssi_avg_5ghz_high"),
    411: .standard(proto: "mesh_two_hop_rssi_avg_2ghz"),
    412: .standard(proto: "mesh_two_hop_rssi_avg_5ghz"),
    415: .standard(proto: "mesh_two_hop_rssi_avg_5ghz_high"),
    418: .standard(proto: "repeater_tx_rate_mbps_min"),
    419: .standard(proto: "repeater_rx_rate_mbps_min"),
    420: .standard(proto: "repeater_tx_rate_mbps_avg"),
    421: .standard(proto: "repeater_rx_rate_mbps_avg"),
    422: .standard(proto: "repeater_seconds_since_2s_outage_min"),
    424: .standard(proto: "repeater_seconds_since_5s_outage_min"),
    423: .standard(proto: "repeater_seconds_since_2s_outage_avg"),
    425: .standard(proto: "repeater_seconds_since_5s_outage_avg"),
    426: .standard(proto: "repeater_latency_ms_1h_max"),
    427: .standard(proto: "repeater_latency_ms_1h_avg"),
    428: .standard(proto: "mesh_topology_change_count_1d"),
    600: .standard(proto: "ping_seconds_since_last_1s_outage"),
    601: .standard(proto: "ping_seconds_since_last_2s_outage"),
    602: .standard(proto: "ping_seconds_since_last_5s_outage"),
    603: .standard(proto: "ping_seconds_since_last_60s_outage"),
    604: .standard(proto: "ping_seconds_since_last_300s_outage"),
    605: .standard(proto: "ping_drop_rate"),
    606: .standard(proto: "ping_drop_rate_last_1h"),
    607: .standard(proto: "ping_latency"),
    618: .standard(proto: "ping_latency_last_1h"),
    610: .standard(proto: "ping_dish_seconds_since_last_1s_outage"),
    611: .standard(proto: "ping_dish_seconds_since_last_2s_outage"),
    612: .standard(proto: "ping_dish_seconds_since_last_5s_outage"),
    613: .standard(proto: "ping_dish_seconds_since_last_60s_outage"),
    614: .standard(proto: "ping_dish_seconds_since_last_300s_outage"),
    615: .standard(proto: "ping_dish_drop_rate"),
    616: .standard(proto: "ping_dish_drop_rate_last_1h"),
    617: .standard(proto: "ping_dish_latency"),
    619: .standard(proto: "ping_dish_latency_last_1h"),
    700: .standard(proto: "client_speedtest_router_download_mbps"),
    701: .standard(proto: "client_speedtest_router_upload_mbps"),
    702: .standard(proto: "client_speedtest_router_rssi"),
    703: .standard(proto: "client_speedtest_wifi_download_mbps"),
    704: .standard(proto: "client_speedtest_wifi_upload_mbps"),
    705: .standard(proto: "client_speedtest_client_download_mbps"),
    706: .standard(proto: "client_speedtest_client_upload_mbps"),
    707: .standard(proto: "client_speedtest_client_rssi"),
    708: .standard(proto: "client_speedtest_client_iface"),
    709: .standard(proto: "client_speedtest_client_oui"),
    710: .standard(proto: "client_speedtest_client_tx_rate"),
    711: .standard(proto: "client_speedtest_client_rx_rate"),
    712: .standard(proto: "client_speedtest_client_platform_type"),
    800: .standard(proto: "speedtest_tcp_8_download_mbps_avg"),
    801: .standard(proto: "speedtest_tcp_8_download_mbps_max"),
    802: .standard(proto: "speedtest_tcp_8_upload_mbps_avg"),
    803: .standard(proto: "speedtest_tcp_8_upload_mbps_max"),
    804: .standard(proto: "speedtest_tcp_64_download_mbps_avg"),
    805: .standard(proto: "speedtest_tcp_64_download_mbps_max"),
    806: .standard(proto: "speedtest_tcp_64_upload_mbps_avg"),
    807: .standard(proto: "speedtest_tcp_64_upload_mbps_max"),
    900: .standard(proto: "dish_cell_id"),
    1000: .standard(proto: "config_setup_complete"),
    1001: .standard(proto: "config_bands_split"),
    1002: .standard(proto: "config_is_repeater"),
    1003: .standard(proto: "config_open_network"),
    1004: .standard(proto: "config_is_aviation"),
    1005: .standard(proto: "config_secure_dns"),
    1006: .standard(proto: "config_legacy"),
    1007: .standard(proto: "config_ap_mode"),
    1008: .standard(proto: "config_dfs_enabled"),
    1009: .standard(proto: "config_network_name_is_default"),
    1010: .standard(proto: "config_remote_ssh_enabled"),
    1011: .standard(proto: "config_is_repeater_wired"),
    1012: .standard(proto: "config_is_repeater_wireless"),
    1013: .standard(proto: "config_block_schedules_set"),
    1014: .standard(proto: "config_custom_nameservers"),
    1015: .standard(proto: "config_disable_mesh_onboarding"),
    1016: .standard(proto: "config_pin_country_code"),
    1017: .standard(proto: "config_disable_update_reboot"),
    1018: .standard(proto: "config_disable_2ghz"),
    1019: .standard(proto: "config_disable_5ghz"),
    1029: .standard(proto: "config_disable_5ghz_high"),
    1020: .standard(proto: "config_channel_2ghz"),
    1021: .standard(proto: "config_channel_5ghz"),
    1022: .standard(proto: "config_channel_5ghz_high"),
    1023: .standard(proto: "config_networks"),
    1024: .standard(proto: "config_networks_guest"),
    1025: .standard(proto: "config_networks_hidden"),
    1026: .standard(proto: "config_networks_client_isolation"),
    1027: .standard(proto: "config_networks_bands_split"),
    1101: .standard(proto: "wan_traffic_control_cake_bytes"),
    1102: .standard(proto: "wan_traffic_control_cake_packets"),
    1103: .standard(proto: "wan_traffic_control_cake_drops"),
    1104: .standard(proto: "wan_traffic_control_cake_ack_drops"),
    1100: .standard(proto: "conntrack_entries"),
    1105: .standard(proto: "dhcp_secs_eq_0"),
    1106: .standard(proto: "dhcp_secs_gt_0"),
    1107: .standard(proto: "dhcp_secs_gt_10"),
    1108: .standard(proto: "dhcp_secs_gt_30"),
    1109: .standard(proto: "dhcp_secs_gt_60"),
  ]

  fileprivate class _StorageClass {
    var _id: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _timestampDate: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _timestampHour: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _timestamp: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _sysHwGen: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysSw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _sysCountry: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _sysIsDev: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysAllocFds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysCpuUsage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _sysMemFreeKb: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _sysBootcount: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _sysPartitionsEqual: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysUptimeSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysAntiRollbackVersion: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _sysIsWitl: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysIsAviationConformed: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysUbiMaxEc: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysUbiBadPeb: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysBoardRev: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios2GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzHighAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna4Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna1Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna2Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna3Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighAntenna4Tssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzHighChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _radios5GhzHighTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzHighThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzHighThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _boardTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _poeMcuDieTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _ifacesLanEthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLanEthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesLan1EthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthRxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthRxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthRxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthTxBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthTxPackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _ifacesWanEthTxErrors: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _clients: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsEth: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5GhzRxBandwidth20Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5GhzRxBandwidth40Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5GhzRxBandwidth80Mhz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeaterEth: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _meshOneHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshOneHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshOneHopRssiAvg5GhzHigh: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTwoHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTwoHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTwoHopRssiAvg5GhzHigh: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterTxRateMbpsMin: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterRxRateMbpsMin: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterTxRateMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterRxRateMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterSecondsSince2SOutageMin: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterSecondsSince5SOutageMin: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterSecondsSince2SOutageAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterSecondsSince5SOutageAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterLatencyMs1HMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _repeaterLatencyMs1HAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTopologyChangeCount1D: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _pingSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDropRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingLatency: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishDropRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishLatency: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestWifiDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestWifiUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientIface: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientOui: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientSpeedtestClientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientPlatformType: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _speedtestTcp8DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _dishCellID: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configSetupComplete: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configBandsSplit: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsRepeater: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configOpenNetwork: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsAviation: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configSecureDns: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configLegacy: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configApMode: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDfsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configNetworkNameIsDefault: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configRemoteSshEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsRepeaterWired: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsRepeaterWireless: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configBlockSchedulesSet: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configCustomNameservers: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDisableMeshOnboarding: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configPinCountryCode: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDisableUpdateReboot: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDisable2Ghz: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDisable5Ghz: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDisable5GhzHigh: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configChannel2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configChannel5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configChannel5GhzHigh: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configNetworks: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configNetworksGuest: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configNetworksHidden: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configNetworksClientIsolation: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configNetworksBandsSplit: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _wanTrafficControlCakeBytes: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _wanTrafficControlCakePackets: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _wanTrafficControlCakeDrops: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _wanTrafficControlCakeAckDrops: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _conntrackEntries: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dhcpSecsEq0: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dhcpSecsGt0: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dhcpSecsGt10: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dhcpSecsGt30: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dhcpSecsGt60: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _timestampDate = source._timestampDate
      _timestampHour = source._timestampHour
      _timestamp = source._timestamp
      _sysHwGen = source._sysHwGen
      _sysSw = source._sysSw
      _sysCountry = source._sysCountry
      _sysIsDev = source._sysIsDev
      _sysAllocFds = source._sysAllocFds
      _sysCpuUsage = source._sysCpuUsage
      _sysMemFreeKb = source._sysMemFreeKb
      _sysBootcount = source._sysBootcount
      _sysPartitionsEqual = source._sysPartitionsEqual
      _sysUptimeSeconds = source._sysUptimeSeconds
      _sysAntiRollbackVersion = source._sysAntiRollbackVersion
      _sysIsWitl = source._sysIsWitl
      _sysIsAviationConformed = source._sysIsAviationConformed
      _sysUbiMaxEc = source._sysUbiMaxEc
      _sysUbiBadPeb = source._sysUbiBadPeb
      _sysBoardRev = source._sysBoardRev
      _radios2GhzChannel = source._radios2GhzChannel
      _radios2GhzAntenna1Rssi = source._radios2GhzAntenna1Rssi
      _radios2GhzAntenna2Rssi = source._radios2GhzAntenna2Rssi
      _radios2GhzAntenna3Rssi = source._radios2GhzAntenna3Rssi
      _radios2GhzAntenna4Rssi = source._radios2GhzAntenna4Rssi
      _radios2GhzAntenna1Tssi = source._radios2GhzAntenna1Tssi
      _radios2GhzAntenna2Tssi = source._radios2GhzAntenna2Tssi
      _radios2GhzAntenna3Tssi = source._radios2GhzAntenna3Tssi
      _radios2GhzAntenna4Tssi = source._radios2GhzAntenna4Tssi
      _radios2GhzIfaceCount = source._radios2GhzIfaceCount
      _radios2GhzChanBusyFraction = source._radios2GhzChanBusyFraction
      _radios2GhzEdccaFraction = source._radios2GhzEdccaFraction
      _radios2GhzOverlappingBssFraction = source._radios2GhzOverlappingBssFraction
      _radios2GhzRxBytes = source._radios2GhzRxBytes
      _radios2GhzRxPackets = source._radios2GhzRxPackets
      _radios2GhzRxErrors = source._radios2GhzRxErrors
      _radios2GhzRxFrameErrors = source._radios2GhzRxFrameErrors
      _radios2GhzRxPacketErrorRate = source._radios2GhzRxPacketErrorRate
      _radios2GhzRxAirtimeFraction = source._radios2GhzRxAirtimeFraction
      _radios2GhzTxBytes = source._radios2GhzTxBytes
      _radios2GhzTxPackets = source._radios2GhzTxPackets
      _radios2GhzTxErrors = source._radios2GhzTxErrors
      _radios2GhzTxPacketErrorRate = source._radios2GhzTxPacketErrorRate
      _radios2GhzTxAirtimeFraction = source._radios2GhzTxAirtimeFraction
      _radios5GhzChannel = source._radios5GhzChannel
      _radios5GhzAntenna1Rssi = source._radios5GhzAntenna1Rssi
      _radios5GhzAntenna2Rssi = source._radios5GhzAntenna2Rssi
      _radios5GhzAntenna3Rssi = source._radios5GhzAntenna3Rssi
      _radios5GhzAntenna4Rssi = source._radios5GhzAntenna4Rssi
      _radios5GhzAntenna1Tssi = source._radios5GhzAntenna1Tssi
      _radios5GhzAntenna2Tssi = source._radios5GhzAntenna2Tssi
      _radios5GhzAntenna3Tssi = source._radios5GhzAntenna3Tssi
      _radios5GhzAntenna4Tssi = source._radios5GhzAntenna4Tssi
      _radios5GhzIfaceCount = source._radios5GhzIfaceCount
      _radios5GhzChanBusyFraction = source._radios5GhzChanBusyFraction
      _radios5GhzEdccaFraction = source._radios5GhzEdccaFraction
      _radios5GhzOverlappingBssFraction = source._radios5GhzOverlappingBssFraction
      _radios5GhzRxBytes = source._radios5GhzRxBytes
      _radios5GhzRxPackets = source._radios5GhzRxPackets
      _radios5GhzRxErrors = source._radios5GhzRxErrors
      _radios5GhzRxFrameErrors = source._radios5GhzRxFrameErrors
      _radios5GhzRxPacketErrorRate = source._radios5GhzRxPacketErrorRate
      _radios5GhzRxAirtimeFraction = source._radios5GhzRxAirtimeFraction
      _radios5GhzTxBytes = source._radios5GhzTxBytes
      _radios5GhzTxPackets = source._radios5GhzTxPackets
      _radios5GhzTxErrors = source._radios5GhzTxErrors
      _radios5GhzTxPacketErrorRate = source._radios5GhzTxPacketErrorRate
      _radios5GhzTxAirtimeFraction = source._radios5GhzTxAirtimeFraction
      _radios5GhzHighChannel = source._radios5GhzHighChannel
      _radios5GhzHighAntenna1Rssi = source._radios5GhzHighAntenna1Rssi
      _radios5GhzHighAntenna2Rssi = source._radios5GhzHighAntenna2Rssi
      _radios5GhzHighAntenna3Rssi = source._radios5GhzHighAntenna3Rssi
      _radios5GhzHighAntenna4Rssi = source._radios5GhzHighAntenna4Rssi
      _radios5GhzHighAntenna1Tssi = source._radios5GhzHighAntenna1Tssi
      _radios5GhzHighAntenna2Tssi = source._radios5GhzHighAntenna2Tssi
      _radios5GhzHighAntenna3Tssi = source._radios5GhzHighAntenna3Tssi
      _radios5GhzHighAntenna4Tssi = source._radios5GhzHighAntenna4Tssi
      _radios5GhzHighIfaceCount = source._radios5GhzHighIfaceCount
      _radios5GhzHighChanBusyFraction = source._radios5GhzHighChanBusyFraction
      _radios5GhzHighEdccaFraction = source._radios5GhzHighEdccaFraction
      _radios5GhzHighOverlappingBssFraction = source._radios5GhzHighOverlappingBssFraction
      _radios5GhzHighRxBytes = source._radios5GhzHighRxBytes
      _radios5GhzHighRxPackets = source._radios5GhzHighRxPackets
      _radios5GhzHighRxErrors = source._radios5GhzHighRxErrors
      _radios5GhzHighRxFrameErrors = source._radios5GhzHighRxFrameErrors
      _radios5GhzHighRxPacketErrorRate = source._radios5GhzHighRxPacketErrorRate
      _radios5GhzHighRxAirtimeFraction = source._radios5GhzHighRxAirtimeFraction
      _radios5GhzHighTxBytes = source._radios5GhzHighTxBytes
      _radios5GhzHighTxPackets = source._radios5GhzHighTxPackets
      _radios5GhzHighTxErrors = source._radios5GhzHighTxErrors
      _radios5GhzHighTxPacketErrorRate = source._radios5GhzHighTxPacketErrorRate
      _radios5GhzHighTxAirtimeFraction = source._radios5GhzHighTxAirtimeFraction
      _radios2GhzThermalTemp = source._radios2GhzThermalTemp
      _radios5GhzThermalTemp = source._radios5GhzThermalTemp
      _radios5GhzHighThermalTemp = source._radios5GhzHighThermalTemp
      _radios2GhzThermalDutyCycle = source._radios2GhzThermalDutyCycle
      _radios5GhzThermalDutyCycle = source._radios5GhzThermalDutyCycle
      _radios5GhzHighThermalDutyCycle = source._radios5GhzHighThermalDutyCycle
      _radios2GhzThermalThrottledSeconds = source._radios2GhzThermalThrottledSeconds
      _radios5GhzThermalThrottledSeconds = source._radios5GhzThermalThrottledSeconds
      _radios5GhzHighThermalThrottledSeconds = source._radios5GhzHighThermalThrottledSeconds
      _boardTemp = source._boardTemp
      _poeMcuDieTemp = source._poeMcuDieTemp
      _ifacesLanEthRxBytes = source._ifacesLanEthRxBytes
      _ifacesLanEthRxPackets = source._ifacesLanEthRxPackets
      _ifacesLanEthRxErrors = source._ifacesLanEthRxErrors
      _ifacesLanEthRxFrameErrors = source._ifacesLanEthRxFrameErrors
      _ifacesLanEthTxBytes = source._ifacesLanEthTxBytes
      _ifacesLanEthTxPackets = source._ifacesLanEthTxPackets
      _ifacesLanEthTxErrors = source._ifacesLanEthTxErrors
      _ifacesLan1EthRxBytes = source._ifacesLan1EthRxBytes
      _ifacesLan1EthRxPackets = source._ifacesLan1EthRxPackets
      _ifacesLan1EthRxErrors = source._ifacesLan1EthRxErrors
      _ifacesLan1EthRxFrameErrors = source._ifacesLan1EthRxFrameErrors
      _ifacesLan1EthTxBytes = source._ifacesLan1EthTxBytes
      _ifacesLan1EthTxPackets = source._ifacesLan1EthTxPackets
      _ifacesLan1EthTxErrors = source._ifacesLan1EthTxErrors
      _ifacesWanEthRxBytes = source._ifacesWanEthRxBytes
      _ifacesWanEthRxPackets = source._ifacesWanEthRxPackets
      _ifacesWanEthRxErrors = source._ifacesWanEthRxErrors
      _ifacesWanEthRxFrameErrors = source._ifacesWanEthRxFrameErrors
      _ifacesWanEthTxBytes = source._ifacesWanEthTxBytes
      _ifacesWanEthTxPackets = source._ifacesWanEthTxPackets
      _ifacesWanEthTxErrors = source._ifacesWanEthTxErrors
      _clients = source._clients
      _clients2Ghz = source._clients2Ghz
      _clients5Ghz = source._clients5Ghz
      _clients5GhzHigh = source._clients5GhzHigh
      _clientsEth = source._clientsEth
      _clients5GhzRxBandwidth20Mhz = source._clients5GhzRxBandwidth20Mhz
      _clients5GhzRxBandwidth40Mhz = source._clients5GhzRxBandwidth40Mhz
      _clients5GhzRxBandwidth80Mhz = source._clients5GhzRxBandwidth80Mhz
      _clientsRepeater = source._clientsRepeater
      _clientsRepeater2Ghz = source._clientsRepeater2Ghz
      _clientsRepeater5Ghz = source._clientsRepeater5Ghz
      _clientsRepeater5GhzHigh = source._clientsRepeater5GhzHigh
      _clientsRepeaterEth = source._clientsRepeaterEth
      _meshHops = source._meshHops
      _meshOneHopRssiAvg2Ghz = source._meshOneHopRssiAvg2Ghz
      _meshOneHopRssiAvg5Ghz = source._meshOneHopRssiAvg5Ghz
      _meshOneHopRssiAvg5GhzHigh = source._meshOneHopRssiAvg5GhzHigh
      _meshTwoHopRssiAvg2Ghz = source._meshTwoHopRssiAvg2Ghz
      _meshTwoHopRssiAvg5Ghz = source._meshTwoHopRssiAvg5Ghz
      _meshTwoHopRssiAvg5GhzHigh = source._meshTwoHopRssiAvg5GhzHigh
      _repeaterTxRateMbpsMin = source._repeaterTxRateMbpsMin
      _repeaterRxRateMbpsMin = source._repeaterRxRateMbpsMin
      _repeaterTxRateMbpsAvg = source._repeaterTxRateMbpsAvg
      _repeaterRxRateMbpsAvg = source._repeaterRxRateMbpsAvg
      _repeaterSecondsSince2SOutageMin = source._repeaterSecondsSince2SOutageMin
      _repeaterSecondsSince5SOutageMin = source._repeaterSecondsSince5SOutageMin
      _repeaterSecondsSince2SOutageAvg = source._repeaterSecondsSince2SOutageAvg
      _repeaterSecondsSince5SOutageAvg = source._repeaterSecondsSince5SOutageAvg
      _repeaterLatencyMs1HMax = source._repeaterLatencyMs1HMax
      _repeaterLatencyMs1HAvg = source._repeaterLatencyMs1HAvg
      _meshTopologyChangeCount1D = source._meshTopologyChangeCount1D
      _pingSecondsSinceLast1SOutage = source._pingSecondsSinceLast1SOutage
      _pingSecondsSinceLast2SOutage = source._pingSecondsSinceLast2SOutage
      _pingSecondsSinceLast5SOutage = source._pingSecondsSinceLast5SOutage
      _pingSecondsSinceLast60SOutage = source._pingSecondsSinceLast60SOutage
      _pingSecondsSinceLast300SOutage = source._pingSecondsSinceLast300SOutage
      _pingDropRate = source._pingDropRate
      _pingDropRateLast1H = source._pingDropRateLast1H
      _pingLatency = source._pingLatency
      _pingLatencyLast1H = source._pingLatencyLast1H
      _pingDishSecondsSinceLast1SOutage = source._pingDishSecondsSinceLast1SOutage
      _pingDishSecondsSinceLast2SOutage = source._pingDishSecondsSinceLast2SOutage
      _pingDishSecondsSinceLast5SOutage = source._pingDishSecondsSinceLast5SOutage
      _pingDishSecondsSinceLast60SOutage = source._pingDishSecondsSinceLast60SOutage
      _pingDishSecondsSinceLast300SOutage = source._pingDishSecondsSinceLast300SOutage
      _pingDishDropRate = source._pingDishDropRate
      _pingDishDropRateLast1H = source._pingDishDropRateLast1H
      _pingDishLatency = source._pingDishLatency
      _pingDishLatencyLast1H = source._pingDishLatencyLast1H
      _clientSpeedtestRouterDownloadMbps = source._clientSpeedtestRouterDownloadMbps
      _clientSpeedtestRouterUploadMbps = source._clientSpeedtestRouterUploadMbps
      _clientSpeedtestRouterRssi = source._clientSpeedtestRouterRssi
      _clientSpeedtestWifiDownloadMbps = source._clientSpeedtestWifiDownloadMbps
      _clientSpeedtestWifiUploadMbps = source._clientSpeedtestWifiUploadMbps
      _clientSpeedtestClientDownloadMbps = source._clientSpeedtestClientDownloadMbps
      _clientSpeedtestClientUploadMbps = source._clientSpeedtestClientUploadMbps
      _clientSpeedtestClientRssi = source._clientSpeedtestClientRssi
      _clientSpeedtestClientIface = source._clientSpeedtestClientIface
      _clientSpeedtestClientOui = source._clientSpeedtestClientOui
      _clientSpeedtestClientTxRate = source._clientSpeedtestClientTxRate
      _clientSpeedtestClientRxRate = source._clientSpeedtestClientRxRate
      _clientSpeedtestClientPlatformType = source._clientSpeedtestClientPlatformType
      _speedtestTcp8DownloadMbpsAvg = source._speedtestTcp8DownloadMbpsAvg
      _speedtestTcp8DownloadMbpsMax = source._speedtestTcp8DownloadMbpsMax
      _speedtestTcp8UploadMbpsAvg = source._speedtestTcp8UploadMbpsAvg
      _speedtestTcp8UploadMbpsMax = source._speedtestTcp8UploadMbpsMax
      _speedtestTcp64DownloadMbpsAvg = source._speedtestTcp64DownloadMbpsAvg
      _speedtestTcp64DownloadMbpsMax = source._speedtestTcp64DownloadMbpsMax
      _speedtestTcp64UploadMbpsAvg = source._speedtestTcp64UploadMbpsAvg
      _speedtestTcp64UploadMbpsMax = source._speedtestTcp64UploadMbpsMax
      _dishCellID = source._dishCellID
      _configSetupComplete = source._configSetupComplete
      _configBandsSplit = source._configBandsSplit
      _configIsRepeater = source._configIsRepeater
      _configOpenNetwork = source._configOpenNetwork
      _configIsAviation = source._configIsAviation
      _configSecureDns = source._configSecureDns
      _configLegacy = source._configLegacy
      _configApMode = source._configApMode
      _configDfsEnabled = source._configDfsEnabled
      _configNetworkNameIsDefault = source._configNetworkNameIsDefault
      _configRemoteSshEnabled = source._configRemoteSshEnabled
      _configIsRepeaterWired = source._configIsRepeaterWired
      _configIsRepeaterWireless = source._configIsRepeaterWireless
      _configBlockSchedulesSet = source._configBlockSchedulesSet
      _configCustomNameservers = source._configCustomNameservers
      _configDisableMeshOnboarding = source._configDisableMeshOnboarding
      _configPinCountryCode = source._configPinCountryCode
      _configDisableUpdateReboot = source._configDisableUpdateReboot
      _configDisable2Ghz = source._configDisable2Ghz
      _configDisable5Ghz = source._configDisable5Ghz
      _configDisable5GhzHigh = source._configDisable5GhzHigh
      _configChannel2Ghz = source._configChannel2Ghz
      _configChannel5Ghz = source._configChannel5Ghz
      _configChannel5GhzHigh = source._configChannel5GhzHigh
      _configNetworks = source._configNetworks
      _configNetworksGuest = source._configNetworksGuest
      _configNetworksHidden = source._configNetworksHidden
      _configNetworksClientIsolation = source._configNetworksClientIsolation
      _configNetworksBandsSplit = source._configNetworksBandsSplit
      _wanTrafficControlCakeBytes = source._wanTrafficControlCakeBytes
      _wanTrafficControlCakePackets = source._wanTrafficControlCakePackets
      _wanTrafficControlCakeDrops = source._wanTrafficControlCakeDrops
      _wanTrafficControlCakeAckDrops = source._wanTrafficControlCakeAckDrops
      _conntrackEntries = source._conntrackEntries
      _dhcpSecsEq0 = source._dhcpSecsEq0
      _dhcpSecsGt0 = source._dhcpSecsGt0
      _dhcpSecsGt10 = source._dhcpSecsGt10
      _dhcpSecsGt30 = source._dhcpSecsGt30
      _dhcpSecsGt60 = source._dhcpSecsGt60
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._timestampDate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._timestampHour) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._sysHwGen) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._sysSw) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._sysCountry) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._sysIsDev) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._sysAllocFds) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._sysCpuUsage) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._sysMemFreeKb) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._sysBootcount) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._sysPartitionsEqual) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._sysUptimeSeconds) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._sysAntiRollbackVersion) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._sysIsWitl) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._sysIsAviationConformed) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._sysUbiMaxEc) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._sysUbiBadPeb) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._sysBoardRev) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzChannel) }()
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna1Rssi) }()
        case 102: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna2Rssi) }()
        case 103: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna3Rssi) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzIfaceCount) }()
        case 105: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzChanBusyFraction) }()
        case 106: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzEdccaFraction) }()
        case 107: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzOverlappingBssFraction) }()
        case 108: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxBytes) }()
        case 109: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxPackets) }()
        case 110: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxErrors) }()
        case 111: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxFrameErrors) }()
        case 112: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxPacketErrorRate) }()
        case 113: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxAirtimeFraction) }()
        case 114: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxBytes) }()
        case 115: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxPackets) }()
        case 116: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxErrors) }()
        case 117: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxPacketErrorRate) }()
        case 118: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxAirtimeFraction) }()
        case 119: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzChannel) }()
        case 120: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna1Rssi) }()
        case 121: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna2Rssi) }()
        case 122: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna3Rssi) }()
        case 123: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzIfaceCount) }()
        case 124: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzChanBusyFraction) }()
        case 125: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzEdccaFraction) }()
        case 126: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzOverlappingBssFraction) }()
        case 127: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxBytes) }()
        case 128: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxPackets) }()
        case 129: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxErrors) }()
        case 130: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxFrameErrors) }()
        case 131: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxPacketErrorRate) }()
        case 132: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxAirtimeFraction) }()
        case 133: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxBytes) }()
        case 134: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxPackets) }()
        case 135: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxErrors) }()
        case 136: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxPacketErrorRate) }()
        case 137: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxAirtimeFraction) }()
        case 138: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighChannel) }()
        case 139: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna1Rssi) }()
        case 140: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna2Rssi) }()
        case 141: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna3Rssi) }()
        case 142: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighIfaceCount) }()
        case 143: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighChanBusyFraction) }()
        case 144: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighEdccaFraction) }()
        case 145: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighOverlappingBssFraction) }()
        case 146: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxBytes) }()
        case 147: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxPackets) }()
        case 148: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxErrors) }()
        case 149: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxFrameErrors) }()
        case 150: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxPacketErrorRate) }()
        case 151: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighRxAirtimeFraction) }()
        case 152: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighTxBytes) }()
        case 153: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighTxPackets) }()
        case 154: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighTxErrors) }()
        case 155: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighTxPacketErrorRate) }()
        case 156: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighTxAirtimeFraction) }()
        case 157: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna1Tssi) }()
        case 158: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna2Tssi) }()
        case 159: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna3Tssi) }()
        case 160: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna4Tssi) }()
        case 161: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna1Tssi) }()
        case 162: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna2Tssi) }()
        case 163: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna3Tssi) }()
        case 164: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna4Tssi) }()
        case 165: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna1Tssi) }()
        case 166: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna2Tssi) }()
        case 167: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna3Tssi) }()
        case 168: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna4Tssi) }()
        case 197: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna4Rssi) }()
        case 198: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna4Rssi) }()
        case 199: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighAntenna4Rssi) }()
        case 200: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalTemp) }()
        case 201: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalTemp) }()
        case 202: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalDutyCycle) }()
        case 203: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalDutyCycle) }()
        case 204: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalThrottledSeconds) }()
        case 205: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalThrottledSeconds) }()
        case 206: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighThermalTemp) }()
        case 207: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighThermalDutyCycle) }()
        case 208: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzHighThermalThrottledSeconds) }()
        case 210: try { try decoder.decodeSingularMessageField(value: &_storage._boardTemp) }()
        case 211: try { try decoder.decodeSingularMessageField(value: &_storage._poeMcuDieTemp) }()
        case 300: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxBytes) }()
        case 301: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxPackets) }()
        case 302: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxErrors) }()
        case 303: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxFrameErrors) }()
        case 304: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxBytes) }()
        case 305: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxPackets) }()
        case 306: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxErrors) }()
        case 307: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxBytes) }()
        case 308: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxPackets) }()
        case 309: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxErrors) }()
        case 310: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxFrameErrors) }()
        case 311: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxBytes) }()
        case 312: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxPackets) }()
        case 313: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxErrors) }()
        case 314: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthRxBytes) }()
        case 315: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthRxPackets) }()
        case 316: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthRxErrors) }()
        case 317: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthRxFrameErrors) }()
        case 318: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthTxBytes) }()
        case 319: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthTxPackets) }()
        case 320: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLan1EthTxErrors) }()
        case 400: try { try decoder.decodeSingularMessageField(value: &_storage._clients) }()
        case 401: try { try decoder.decodeSingularMessageField(value: &_storage._clients2Ghz) }()
        case 402: try { try decoder.decodeSingularMessageField(value: &_storage._clients5Ghz) }()
        case 403: try { try decoder.decodeSingularMessageField(value: &_storage._clientsEth) }()
        case 404: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater) }()
        case 405: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater2Ghz) }()
        case 406: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater5Ghz) }()
        case 407: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeaterEth) }()
        case 408: try { try decoder.decodeSingularMessageField(value: &_storage._meshHops) }()
        case 409: try { try decoder.decodeSingularMessageField(value: &_storage._meshOneHopRssiAvg2Ghz) }()
        case 410: try { try decoder.decodeSingularMessageField(value: &_storage._meshOneHopRssiAvg5Ghz) }()
        case 411: try { try decoder.decodeSingularMessageField(value: &_storage._meshTwoHopRssiAvg2Ghz) }()
        case 412: try { try decoder.decodeSingularMessageField(value: &_storage._meshTwoHopRssiAvg5Ghz) }()
        case 413: try { try decoder.decodeSingularMessageField(value: &_storage._clients5GhzHigh) }()
        case 414: try { try decoder.decodeSingularMessageField(value: &_storage._meshOneHopRssiAvg5GhzHigh) }()
        case 415: try { try decoder.decodeSingularMessageField(value: &_storage._meshTwoHopRssiAvg5GhzHigh) }()
        case 416: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater5GhzHigh) }()
        case 418: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterTxRateMbpsMin) }()
        case 419: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterRxRateMbpsMin) }()
        case 420: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterTxRateMbpsAvg) }()
        case 421: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterRxRateMbpsAvg) }()
        case 422: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterSecondsSince2SOutageMin) }()
        case 423: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterSecondsSince2SOutageAvg) }()
        case 424: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterSecondsSince5SOutageMin) }()
        case 425: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterSecondsSince5SOutageAvg) }()
        case 426: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterLatencyMs1HMax) }()
        case 427: try { try decoder.decodeSingularMessageField(value: &_storage._repeaterLatencyMs1HAvg) }()
        case 428: try { try decoder.decodeSingularMessageField(value: &_storage._meshTopologyChangeCount1D) }()
        case 429: try { try decoder.decodeSingularMessageField(value: &_storage._clients5GhzRxBandwidth20Mhz) }()
        case 430: try { try decoder.decodeSingularMessageField(value: &_storage._clients5GhzRxBandwidth40Mhz) }()
        case 431: try { try decoder.decodeSingularMessageField(value: &_storage._clients5GhzRxBandwidth80Mhz) }()
        case 600: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast1SOutage) }()
        case 601: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast2SOutage) }()
        case 602: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast5SOutage) }()
        case 603: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast60SOutage) }()
        case 604: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast300SOutage) }()
        case 605: try { try decoder.decodeSingularMessageField(value: &_storage._pingDropRate) }()
        case 606: try { try decoder.decodeSingularMessageField(value: &_storage._pingDropRateLast1H) }()
        case 607: try { try decoder.decodeSingularMessageField(value: &_storage._pingLatency) }()
        case 610: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast1SOutage) }()
        case 611: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast2SOutage) }()
        case 612: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast5SOutage) }()
        case 613: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast60SOutage) }()
        case 614: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast300SOutage) }()
        case 615: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishDropRate) }()
        case 616: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishDropRateLast1H) }()
        case 617: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishLatency) }()
        case 618: try { try decoder.decodeSingularMessageField(value: &_storage._pingLatencyLast1H) }()
        case 619: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishLatencyLast1H) }()
        case 700: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterDownloadMbps) }()
        case 701: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterUploadMbps) }()
        case 702: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterRssi) }()
        case 703: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestWifiDownloadMbps) }()
        case 704: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestWifiUploadMbps) }()
        case 705: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientDownloadMbps) }()
        case 706: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientUploadMbps) }()
        case 707: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientRssi) }()
        case 708: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientIface) }()
        case 709: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientOui) }()
        case 710: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientTxRate) }()
        case 711: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientRxRate) }()
        case 712: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientPlatformType) }()
        case 800: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8DownloadMbpsAvg) }()
        case 801: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8DownloadMbpsMax) }()
        case 802: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8UploadMbpsAvg) }()
        case 803: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8UploadMbpsMax) }()
        case 804: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64DownloadMbpsAvg) }()
        case 805: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64DownloadMbpsMax) }()
        case 806: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64UploadMbpsAvg) }()
        case 807: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64UploadMbpsMax) }()
        case 900: try { try decoder.decodeSingularMessageField(value: &_storage._dishCellID) }()
        case 1000: try { try decoder.decodeSingularMessageField(value: &_storage._configSetupComplete) }()
        case 1001: try { try decoder.decodeSingularMessageField(value: &_storage._configBandsSplit) }()
        case 1002: try { try decoder.decodeSingularMessageField(value: &_storage._configIsRepeater) }()
        case 1003: try { try decoder.decodeSingularMessageField(value: &_storage._configOpenNetwork) }()
        case 1004: try { try decoder.decodeSingularMessageField(value: &_storage._configIsAviation) }()
        case 1005: try { try decoder.decodeSingularMessageField(value: &_storage._configSecureDns) }()
        case 1006: try { try decoder.decodeSingularMessageField(value: &_storage._configLegacy) }()
        case 1007: try { try decoder.decodeSingularMessageField(value: &_storage._configApMode) }()
        case 1008: try { try decoder.decodeSingularMessageField(value: &_storage._configDfsEnabled) }()
        case 1009: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworkNameIsDefault) }()
        case 1010: try { try decoder.decodeSingularMessageField(value: &_storage._configRemoteSshEnabled) }()
        case 1011: try { try decoder.decodeSingularMessageField(value: &_storage._configIsRepeaterWired) }()
        case 1012: try { try decoder.decodeSingularMessageField(value: &_storage._configIsRepeaterWireless) }()
        case 1013: try { try decoder.decodeSingularMessageField(value: &_storage._configBlockSchedulesSet) }()
        case 1014: try { try decoder.decodeSingularMessageField(value: &_storage._configCustomNameservers) }()
        case 1015: try { try decoder.decodeSingularMessageField(value: &_storage._configDisableMeshOnboarding) }()
        case 1016: try { try decoder.decodeSingularMessageField(value: &_storage._configPinCountryCode) }()
        case 1017: try { try decoder.decodeSingularMessageField(value: &_storage._configDisableUpdateReboot) }()
        case 1018: try { try decoder.decodeSingularMessageField(value: &_storage._configDisable2Ghz) }()
        case 1019: try { try decoder.decodeSingularMessageField(value: &_storage._configDisable5Ghz) }()
        case 1020: try { try decoder.decodeSingularMessageField(value: &_storage._configChannel2Ghz) }()
        case 1021: try { try decoder.decodeSingularMessageField(value: &_storage._configChannel5Ghz) }()
        case 1022: try { try decoder.decodeSingularMessageField(value: &_storage._configChannel5GhzHigh) }()
        case 1023: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworks) }()
        case 1024: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworksGuest) }()
        case 1025: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworksHidden) }()
        case 1026: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworksClientIsolation) }()
        case 1027: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworksBandsSplit) }()
        case 1029: try { try decoder.decodeSingularMessageField(value: &_storage._configDisable5GhzHigh) }()
        case 1100: try { try decoder.decodeSingularMessageField(value: &_storage._conntrackEntries) }()
        case 1101: try { try decoder.decodeSingularMessageField(value: &_storage._wanTrafficControlCakeBytes) }()
        case 1102: try { try decoder.decodeSingularMessageField(value: &_storage._wanTrafficControlCakePackets) }()
        case 1103: try { try decoder.decodeSingularMessageField(value: &_storage._wanTrafficControlCakeDrops) }()
        case 1104: try { try decoder.decodeSingularMessageField(value: &_storage._wanTrafficControlCakeAckDrops) }()
        case 1105: try { try decoder.decodeSingularMessageField(value: &_storage._dhcpSecsEq0) }()
        case 1106: try { try decoder.decodeSingularMessageField(value: &_storage._dhcpSecsGt0) }()
        case 1107: try { try decoder.decodeSingularMessageField(value: &_storage._dhcpSecsGt10) }()
        case 1108: try { try decoder.decodeSingularMessageField(value: &_storage._dhcpSecsGt30) }()
        case 1109: try { try decoder.decodeSingularMessageField(value: &_storage._dhcpSecsGt60) }()
        case 10000: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._timestampDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._timestampHour {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._sysHwGen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._sysSw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sysCountry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._sysIsDev {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._sysAllocFds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._sysCpuUsage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._sysMemFreeKb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._sysBootcount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._sysPartitionsEqual {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._sysUptimeSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._sysAntiRollbackVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._sysIsWitl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._sysIsAviationConformed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._sysUbiMaxEc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._sysUbiBadPeb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._sysBoardRev {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._radios2GhzChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._radios2GhzAntenna1Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._radios2GhzAntenna2Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._radios2GhzAntenna3Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._radios2GhzIfaceCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._radios2GhzChanBusyFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._radios2GhzEdccaFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      } }()
      try { if let v = _storage._radios2GhzOverlappingBssFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      } }()
      try { if let v = _storage._radios2GhzRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      } }()
      try { if let v = _storage._radios2GhzRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      } }()
      try { if let v = _storage._radios2GhzRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      } }()
      try { if let v = _storage._radios2GhzRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      } }()
      try { if let v = _storage._radios2GhzRxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      } }()
      try { if let v = _storage._radios2GhzRxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      } }()
      try { if let v = _storage._radios2GhzTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
      } }()
      try { if let v = _storage._radios2GhzTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      } }()
      try { if let v = _storage._radios2GhzTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
      } }()
      try { if let v = _storage._radios2GhzTxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      } }()
      try { if let v = _storage._radios2GhzTxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
      } }()
      try { if let v = _storage._radios5GhzChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 119)
      } }()
      try { if let v = _storage._radios5GhzAntenna1Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 120)
      } }()
      try { if let v = _storage._radios5GhzAntenna2Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 121)
      } }()
      try { if let v = _storage._radios5GhzAntenna3Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 122)
      } }()
      try { if let v = _storage._radios5GhzIfaceCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
      } }()
      try { if let v = _storage._radios5GhzChanBusyFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
      } }()
      try { if let v = _storage._radios5GhzEdccaFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 125)
      } }()
      try { if let v = _storage._radios5GhzOverlappingBssFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 126)
      } }()
      try { if let v = _storage._radios5GhzRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 127)
      } }()
      try { if let v = _storage._radios5GhzRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 128)
      } }()
      try { if let v = _storage._radios5GhzRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 129)
      } }()
      try { if let v = _storage._radios5GhzRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 130)
      } }()
      try { if let v = _storage._radios5GhzRxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 131)
      } }()
      try { if let v = _storage._radios5GhzRxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 132)
      } }()
      try { if let v = _storage._radios5GhzTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 133)
      } }()
      try { if let v = _storage._radios5GhzTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 134)
      } }()
      try { if let v = _storage._radios5GhzTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 135)
      } }()
      try { if let v = _storage._radios5GhzTxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 136)
      } }()
      try { if let v = _storage._radios5GhzTxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 137)
      } }()
      try { if let v = _storage._radios5GhzHighChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 138)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna1Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 139)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna2Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 140)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna3Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 141)
      } }()
      try { if let v = _storage._radios5GhzHighIfaceCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 142)
      } }()
      try { if let v = _storage._radios5GhzHighChanBusyFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 143)
      } }()
      try { if let v = _storage._radios5GhzHighEdccaFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 144)
      } }()
      try { if let v = _storage._radios5GhzHighOverlappingBssFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 145)
      } }()
      try { if let v = _storage._radios5GhzHighRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 146)
      } }()
      try { if let v = _storage._radios5GhzHighRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 147)
      } }()
      try { if let v = _storage._radios5GhzHighRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 148)
      } }()
      try { if let v = _storage._radios5GhzHighRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 149)
      } }()
      try { if let v = _storage._radios5GhzHighRxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 150)
      } }()
      try { if let v = _storage._radios5GhzHighRxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 151)
      } }()
      try { if let v = _storage._radios5GhzHighTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 152)
      } }()
      try { if let v = _storage._radios5GhzHighTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 153)
      } }()
      try { if let v = _storage._radios5GhzHighTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 154)
      } }()
      try { if let v = _storage._radios5GhzHighTxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 155)
      } }()
      try { if let v = _storage._radios5GhzHighTxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 156)
      } }()
      try { if let v = _storage._radios2GhzAntenna1Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 157)
      } }()
      try { if let v = _storage._radios2GhzAntenna2Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 158)
      } }()
      try { if let v = _storage._radios2GhzAntenna3Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 159)
      } }()
      try { if let v = _storage._radios2GhzAntenna4Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 160)
      } }()
      try { if let v = _storage._radios5GhzAntenna1Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 161)
      } }()
      try { if let v = _storage._radios5GhzAntenna2Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 162)
      } }()
      try { if let v = _storage._radios5GhzAntenna3Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 163)
      } }()
      try { if let v = _storage._radios5GhzAntenna4Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 164)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna1Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 165)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna2Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 166)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna3Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 167)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna4Tssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 168)
      } }()
      try { if let v = _storage._radios2GhzAntenna4Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 197)
      } }()
      try { if let v = _storage._radios5GhzAntenna4Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 198)
      } }()
      try { if let v = _storage._radios5GhzHighAntenna4Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 199)
      } }()
      try { if let v = _storage._radios2GhzThermalTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      } }()
      try { if let v = _storage._radios5GhzThermalTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      } }()
      try { if let v = _storage._radios2GhzThermalDutyCycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
      } }()
      try { if let v = _storage._radios5GhzThermalDutyCycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 203)
      } }()
      try { if let v = _storage._radios2GhzThermalThrottledSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
      } }()
      try { if let v = _storage._radios5GhzThermalThrottledSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 205)
      } }()
      try { if let v = _storage._radios5GhzHighThermalTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 206)
      } }()
      try { if let v = _storage._radios5GhzHighThermalDutyCycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 207)
      } }()
      try { if let v = _storage._radios5GhzHighThermalThrottledSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 208)
      } }()
      try { if let v = _storage._boardTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 210)
      } }()
      try { if let v = _storage._poeMcuDieTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 211)
      } }()
      try { if let v = _storage._ifacesLanEthRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
      } }()
      try { if let v = _storage._ifacesLanEthRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      } }()
      try { if let v = _storage._ifacesLanEthRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 302)
      } }()
      try { if let v = _storage._ifacesLanEthRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 303)
      } }()
      try { if let v = _storage._ifacesLanEthTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 304)
      } }()
      try { if let v = _storage._ifacesLanEthTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 305)
      } }()
      try { if let v = _storage._ifacesLanEthTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 306)
      } }()
      try { if let v = _storage._ifacesWanEthRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 307)
      } }()
      try { if let v = _storage._ifacesWanEthRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 308)
      } }()
      try { if let v = _storage._ifacesWanEthRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 309)
      } }()
      try { if let v = _storage._ifacesWanEthRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 310)
      } }()
      try { if let v = _storage._ifacesWanEthTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 311)
      } }()
      try { if let v = _storage._ifacesWanEthTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 312)
      } }()
      try { if let v = _storage._ifacesWanEthTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 313)
      } }()
      try { if let v = _storage._ifacesLan1EthRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 314)
      } }()
      try { if let v = _storage._ifacesLan1EthRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 315)
      } }()
      try { if let v = _storage._ifacesLan1EthRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 316)
      } }()
      try { if let v = _storage._ifacesLan1EthRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 317)
      } }()
      try { if let v = _storage._ifacesLan1EthTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 318)
      } }()
      try { if let v = _storage._ifacesLan1EthTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 319)
      } }()
      try { if let v = _storage._ifacesLan1EthTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 320)
      } }()
      try { if let v = _storage._clients {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
      } }()
      try { if let v = _storage._clients2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 401)
      } }()
      try { if let v = _storage._clients5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 402)
      } }()
      try { if let v = _storage._clientsEth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 403)
      } }()
      try { if let v = _storage._clientsRepeater {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 404)
      } }()
      try { if let v = _storage._clientsRepeater2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 405)
      } }()
      try { if let v = _storage._clientsRepeater5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 406)
      } }()
      try { if let v = _storage._clientsRepeaterEth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 407)
      } }()
      try { if let v = _storage._meshHops {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 408)
      } }()
      try { if let v = _storage._meshOneHopRssiAvg2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 409)
      } }()
      try { if let v = _storage._meshOneHopRssiAvg5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 410)
      } }()
      try { if let v = _storage._meshTwoHopRssiAvg2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 411)
      } }()
      try { if let v = _storage._meshTwoHopRssiAvg5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 412)
      } }()
      try { if let v = _storage._clients5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 413)
      } }()
      try { if let v = _storage._meshOneHopRssiAvg5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 414)
      } }()
      try { if let v = _storage._meshTwoHopRssiAvg5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 415)
      } }()
      try { if let v = _storage._clientsRepeater5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 416)
      } }()
      try { if let v = _storage._repeaterTxRateMbpsMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 418)
      } }()
      try { if let v = _storage._repeaterRxRateMbpsMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 419)
      } }()
      try { if let v = _storage._repeaterTxRateMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 420)
      } }()
      try { if let v = _storage._repeaterRxRateMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 421)
      } }()
      try { if let v = _storage._repeaterSecondsSince2SOutageMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 422)
      } }()
      try { if let v = _storage._repeaterSecondsSince2SOutageAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 423)
      } }()
      try { if let v = _storage._repeaterSecondsSince5SOutageMin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 424)
      } }()
      try { if let v = _storage._repeaterSecondsSince5SOutageAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 425)
      } }()
      try { if let v = _storage._repeaterLatencyMs1HMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 426)
      } }()
      try { if let v = _storage._repeaterLatencyMs1HAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 427)
      } }()
      try { if let v = _storage._meshTopologyChangeCount1D {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 428)
      } }()
      try { if let v = _storage._clients5GhzRxBandwidth20Mhz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 429)
      } }()
      try { if let v = _storage._clients5GhzRxBandwidth40Mhz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 430)
      } }()
      try { if let v = _storage._clients5GhzRxBandwidth80Mhz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 431)
      } }()
      try { if let v = _storage._pingSecondsSinceLast1SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 600)
      } }()
      try { if let v = _storage._pingSecondsSinceLast2SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 601)
      } }()
      try { if let v = _storage._pingSecondsSinceLast5SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 602)
      } }()
      try { if let v = _storage._pingSecondsSinceLast60SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 603)
      } }()
      try { if let v = _storage._pingSecondsSinceLast300SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 604)
      } }()
      try { if let v = _storage._pingDropRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 605)
      } }()
      try { if let v = _storage._pingDropRateLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 606)
      } }()
      try { if let v = _storage._pingLatency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 607)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast1SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 610)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast2SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 611)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast5SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 612)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast60SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 613)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast300SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 614)
      } }()
      try { if let v = _storage._pingDishDropRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 615)
      } }()
      try { if let v = _storage._pingDishDropRateLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 616)
      } }()
      try { if let v = _storage._pingDishLatency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 617)
      } }()
      try { if let v = _storage._pingLatencyLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 618)
      } }()
      try { if let v = _storage._pingDishLatencyLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 619)
      } }()
      try { if let v = _storage._clientSpeedtestRouterDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 700)
      } }()
      try { if let v = _storage._clientSpeedtestRouterUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 701)
      } }()
      try { if let v = _storage._clientSpeedtestRouterRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 702)
      } }()
      try { if let v = _storage._clientSpeedtestWifiDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 703)
      } }()
      try { if let v = _storage._clientSpeedtestWifiUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 704)
      } }()
      try { if let v = _storage._clientSpeedtestClientDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 705)
      } }()
      try { if let v = _storage._clientSpeedtestClientUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 706)
      } }()
      try { if let v = _storage._clientSpeedtestClientRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 707)
      } }()
      try { if let v = _storage._clientSpeedtestClientIface {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 708)
      } }()
      try { if let v = _storage._clientSpeedtestClientOui {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 709)
      } }()
      try { if let v = _storage._clientSpeedtestClientTxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 710)
      } }()
      try { if let v = _storage._clientSpeedtestClientRxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 711)
      } }()
      try { if let v = _storage._clientSpeedtestClientPlatformType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 712)
      } }()
      try { if let v = _storage._speedtestTcp8DownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 800)
      } }()
      try { if let v = _storage._speedtestTcp8DownloadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 801)
      } }()
      try { if let v = _storage._speedtestTcp8UploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 802)
      } }()
      try { if let v = _storage._speedtestTcp8UploadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 803)
      } }()
      try { if let v = _storage._speedtestTcp64DownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 804)
      } }()
      try { if let v = _storage._speedtestTcp64DownloadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 805)
      } }()
      try { if let v = _storage._speedtestTcp64UploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 806)
      } }()
      try { if let v = _storage._speedtestTcp64UploadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 807)
      } }()
      try { if let v = _storage._dishCellID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 900)
      } }()
      try { if let v = _storage._configSetupComplete {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
      } }()
      try { if let v = _storage._configBandsSplit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
      } }()
      try { if let v = _storage._configIsRepeater {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      } }()
      try { if let v = _storage._configOpenNetwork {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
      } }()
      try { if let v = _storage._configIsAviation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1004)
      } }()
      try { if let v = _storage._configSecureDns {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1005)
      } }()
      try { if let v = _storage._configLegacy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1006)
      } }()
      try { if let v = _storage._configApMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1007)
      } }()
      try { if let v = _storage._configDfsEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1008)
      } }()
      try { if let v = _storage._configNetworkNameIsDefault {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1009)
      } }()
      try { if let v = _storage._configRemoteSshEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1010)
      } }()
      try { if let v = _storage._configIsRepeaterWired {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1011)
      } }()
      try { if let v = _storage._configIsRepeaterWireless {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1012)
      } }()
      try { if let v = _storage._configBlockSchedulesSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1013)
      } }()
      try { if let v = _storage._configCustomNameservers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1014)
      } }()
      try { if let v = _storage._configDisableMeshOnboarding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1015)
      } }()
      try { if let v = _storage._configPinCountryCode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1016)
      } }()
      try { if let v = _storage._configDisableUpdateReboot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1017)
      } }()
      try { if let v = _storage._configDisable2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1018)
      } }()
      try { if let v = _storage._configDisable5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1019)
      } }()
      try { if let v = _storage._configChannel2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1020)
      } }()
      try { if let v = _storage._configChannel5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1021)
      } }()
      try { if let v = _storage._configChannel5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1022)
      } }()
      try { if let v = _storage._configNetworks {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1023)
      } }()
      try { if let v = _storage._configNetworksGuest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1024)
      } }()
      try { if let v = _storage._configNetworksHidden {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1025)
      } }()
      try { if let v = _storage._configNetworksClientIsolation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1026)
      } }()
      try { if let v = _storage._configNetworksBandsSplit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1027)
      } }()
      try { if let v = _storage._configDisable5GhzHigh {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1029)
      } }()
      try { if let v = _storage._conntrackEntries {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1100)
      } }()
      try { if let v = _storage._wanTrafficControlCakeBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1101)
      } }()
      try { if let v = _storage._wanTrafficControlCakePackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1102)
      } }()
      try { if let v = _storage._wanTrafficControlCakeDrops {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1103)
      } }()
      try { if let v = _storage._wanTrafficControlCakeAckDrops {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1104)
      } }()
      try { if let v = _storage._dhcpSecsEq0 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1105)
      } }()
      try { if let v = _storage._dhcpSecsGt0 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1106)
      } }()
      try { if let v = _storage._dhcpSecsGt10 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1107)
      } }()
      try { if let v = _storage._dhcpSecsGt30 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1108)
      } }()
      try { if let v = _storage._dhcpSecsGt60 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1109)
      } }()
      try { if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10000)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_starlink_routers_hourly_metrics_v2, rhs: SpaceX_API_Device_starlink_routers_hourly_metrics_v2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._timestampDate != rhs_storage._timestampDate {return false}
        if _storage._timestampHour != rhs_storage._timestampHour {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._sysHwGen != rhs_storage._sysHwGen {return false}
        if _storage._sysSw != rhs_storage._sysSw {return false}
        if _storage._sysCountry != rhs_storage._sysCountry {return false}
        if _storage._sysIsDev != rhs_storage._sysIsDev {return false}
        if _storage._sysAllocFds != rhs_storage._sysAllocFds {return false}
        if _storage._sysCpuUsage != rhs_storage._sysCpuUsage {return false}
        if _storage._sysMemFreeKb != rhs_storage._sysMemFreeKb {return false}
        if _storage._sysBootcount != rhs_storage._sysBootcount {return false}
        if _storage._sysPartitionsEqual != rhs_storage._sysPartitionsEqual {return false}
        if _storage._sysUptimeSeconds != rhs_storage._sysUptimeSeconds {return false}
        if _storage._sysAntiRollbackVersion != rhs_storage._sysAntiRollbackVersion {return false}
        if _storage._sysIsWitl != rhs_storage._sysIsWitl {return false}
        if _storage._sysIsAviationConformed != rhs_storage._sysIsAviationConformed {return false}
        if _storage._sysUbiMaxEc != rhs_storage._sysUbiMaxEc {return false}
        if _storage._sysUbiBadPeb != rhs_storage._sysUbiBadPeb {return false}
        if _storage._sysBoardRev != rhs_storage._sysBoardRev {return false}
        if _storage._radios2GhzChannel != rhs_storage._radios2GhzChannel {return false}
        if _storage._radios2GhzAntenna1Rssi != rhs_storage._radios2GhzAntenna1Rssi {return false}
        if _storage._radios2GhzAntenna2Rssi != rhs_storage._radios2GhzAntenna2Rssi {return false}
        if _storage._radios2GhzAntenna3Rssi != rhs_storage._radios2GhzAntenna3Rssi {return false}
        if _storage._radios2GhzAntenna4Rssi != rhs_storage._radios2GhzAntenna4Rssi {return false}
        if _storage._radios2GhzAntenna1Tssi != rhs_storage._radios2GhzAntenna1Tssi {return false}
        if _storage._radios2GhzAntenna2Tssi != rhs_storage._radios2GhzAntenna2Tssi {return false}
        if _storage._radios2GhzAntenna3Tssi != rhs_storage._radios2GhzAntenna3Tssi {return false}
        if _storage._radios2GhzAntenna4Tssi != rhs_storage._radios2GhzAntenna4Tssi {return false}
        if _storage._radios2GhzIfaceCount != rhs_storage._radios2GhzIfaceCount {return false}
        if _storage._radios2GhzChanBusyFraction != rhs_storage._radios2GhzChanBusyFraction {return false}
        if _storage._radios2GhzEdccaFraction != rhs_storage._radios2GhzEdccaFraction {return false}
        if _storage._radios2GhzOverlappingBssFraction != rhs_storage._radios2GhzOverlappingBssFraction {return false}
        if _storage._radios2GhzRxBytes != rhs_storage._radios2GhzRxBytes {return false}
        if _storage._radios2GhzRxPackets != rhs_storage._radios2GhzRxPackets {return false}
        if _storage._radios2GhzRxErrors != rhs_storage._radios2GhzRxErrors {return false}
        if _storage._radios2GhzRxFrameErrors != rhs_storage._radios2GhzRxFrameErrors {return false}
        if _storage._radios2GhzRxPacketErrorRate != rhs_storage._radios2GhzRxPacketErrorRate {return false}
        if _storage._radios2GhzRxAirtimeFraction != rhs_storage._radios2GhzRxAirtimeFraction {return false}
        if _storage._radios2GhzTxBytes != rhs_storage._radios2GhzTxBytes {return false}
        if _storage._radios2GhzTxPackets != rhs_storage._radios2GhzTxPackets {return false}
        if _storage._radios2GhzTxErrors != rhs_storage._radios2GhzTxErrors {return false}
        if _storage._radios2GhzTxPacketErrorRate != rhs_storage._radios2GhzTxPacketErrorRate {return false}
        if _storage._radios2GhzTxAirtimeFraction != rhs_storage._radios2GhzTxAirtimeFraction {return false}
        if _storage._radios5GhzChannel != rhs_storage._radios5GhzChannel {return false}
        if _storage._radios5GhzAntenna1Rssi != rhs_storage._radios5GhzAntenna1Rssi {return false}
        if _storage._radios5GhzAntenna2Rssi != rhs_storage._radios5GhzAntenna2Rssi {return false}
        if _storage._radios5GhzAntenna3Rssi != rhs_storage._radios5GhzAntenna3Rssi {return false}
        if _storage._radios5GhzAntenna4Rssi != rhs_storage._radios5GhzAntenna4Rssi {return false}
        if _storage._radios5GhzAntenna1Tssi != rhs_storage._radios5GhzAntenna1Tssi {return false}
        if _storage._radios5GhzAntenna2Tssi != rhs_storage._radios5GhzAntenna2Tssi {return false}
        if _storage._radios5GhzAntenna3Tssi != rhs_storage._radios5GhzAntenna3Tssi {return false}
        if _storage._radios5GhzAntenna4Tssi != rhs_storage._radios5GhzAntenna4Tssi {return false}
        if _storage._radios5GhzIfaceCount != rhs_storage._radios5GhzIfaceCount {return false}
        if _storage._radios5GhzChanBusyFraction != rhs_storage._radios5GhzChanBusyFraction {return false}
        if _storage._radios5GhzEdccaFraction != rhs_storage._radios5GhzEdccaFraction {return false}
        if _storage._radios5GhzOverlappingBssFraction != rhs_storage._radios5GhzOverlappingBssFraction {return false}
        if _storage._radios5GhzRxBytes != rhs_storage._radios5GhzRxBytes {return false}
        if _storage._radios5GhzRxPackets != rhs_storage._radios5GhzRxPackets {return false}
        if _storage._radios5GhzRxErrors != rhs_storage._radios5GhzRxErrors {return false}
        if _storage._radios5GhzRxFrameErrors != rhs_storage._radios5GhzRxFrameErrors {return false}
        if _storage._radios5GhzRxPacketErrorRate != rhs_storage._radios5GhzRxPacketErrorRate {return false}
        if _storage._radios5GhzRxAirtimeFraction != rhs_storage._radios5GhzRxAirtimeFraction {return false}
        if _storage._radios5GhzTxBytes != rhs_storage._radios5GhzTxBytes {return false}
        if _storage._radios5GhzTxPackets != rhs_storage._radios5GhzTxPackets {return false}
        if _storage._radios5GhzTxErrors != rhs_storage._radios5GhzTxErrors {return false}
        if _storage._radios5GhzTxPacketErrorRate != rhs_storage._radios5GhzTxPacketErrorRate {return false}
        if _storage._radios5GhzTxAirtimeFraction != rhs_storage._radios5GhzTxAirtimeFraction {return false}
        if _storage._radios5GhzHighChannel != rhs_storage._radios5GhzHighChannel {return false}
        if _storage._radios5GhzHighAntenna1Rssi != rhs_storage._radios5GhzHighAntenna1Rssi {return false}
        if _storage._radios5GhzHighAntenna2Rssi != rhs_storage._radios5GhzHighAntenna2Rssi {return false}
        if _storage._radios5GhzHighAntenna3Rssi != rhs_storage._radios5GhzHighAntenna3Rssi {return false}
        if _storage._radios5GhzHighAntenna4Rssi != rhs_storage._radios5GhzHighAntenna4Rssi {return false}
        if _storage._radios5GhzHighAntenna1Tssi != rhs_storage._radios5GhzHighAntenna1Tssi {return false}
        if _storage._radios5GhzHighAntenna2Tssi != rhs_storage._radios5GhzHighAntenna2Tssi {return false}
        if _storage._radios5GhzHighAntenna3Tssi != rhs_storage._radios5GhzHighAntenna3Tssi {return false}
        if _storage._radios5GhzHighAntenna4Tssi != rhs_storage._radios5GhzHighAntenna4Tssi {return false}
        if _storage._radios5GhzHighIfaceCount != rhs_storage._radios5GhzHighIfaceCount {return false}
        if _storage._radios5GhzHighChanBusyFraction != rhs_storage._radios5GhzHighChanBusyFraction {return false}
        if _storage._radios5GhzHighEdccaFraction != rhs_storage._radios5GhzHighEdccaFraction {return false}
        if _storage._radios5GhzHighOverlappingBssFraction != rhs_storage._radios5GhzHighOverlappingBssFraction {return false}
        if _storage._radios5GhzHighRxBytes != rhs_storage._radios5GhzHighRxBytes {return false}
        if _storage._radios5GhzHighRxPackets != rhs_storage._radios5GhzHighRxPackets {return false}
        if _storage._radios5GhzHighRxErrors != rhs_storage._radios5GhzHighRxErrors {return false}
        if _storage._radios5GhzHighRxFrameErrors != rhs_storage._radios5GhzHighRxFrameErrors {return false}
        if _storage._radios5GhzHighRxPacketErrorRate != rhs_storage._radios5GhzHighRxPacketErrorRate {return false}
        if _storage._radios5GhzHighRxAirtimeFraction != rhs_storage._radios5GhzHighRxAirtimeFraction {return false}
        if _storage._radios5GhzHighTxBytes != rhs_storage._radios5GhzHighTxBytes {return false}
        if _storage._radios5GhzHighTxPackets != rhs_storage._radios5GhzHighTxPackets {return false}
        if _storage._radios5GhzHighTxErrors != rhs_storage._radios5GhzHighTxErrors {return false}
        if _storage._radios5GhzHighTxPacketErrorRate != rhs_storage._radios5GhzHighTxPacketErrorRate {return false}
        if _storage._radios5GhzHighTxAirtimeFraction != rhs_storage._radios5GhzHighTxAirtimeFraction {return false}
        if _storage._radios2GhzThermalTemp != rhs_storage._radios2GhzThermalTemp {return false}
        if _storage._radios5GhzThermalTemp != rhs_storage._radios5GhzThermalTemp {return false}
        if _storage._radios5GhzHighThermalTemp != rhs_storage._radios5GhzHighThermalTemp {return false}
        if _storage._radios2GhzThermalDutyCycle != rhs_storage._radios2GhzThermalDutyCycle {return false}
        if _storage._radios5GhzThermalDutyCycle != rhs_storage._radios5GhzThermalDutyCycle {return false}
        if _storage._radios5GhzHighThermalDutyCycle != rhs_storage._radios5GhzHighThermalDutyCycle {return false}
        if _storage._radios2GhzThermalThrottledSeconds != rhs_storage._radios2GhzThermalThrottledSeconds {return false}
        if _storage._radios5GhzThermalThrottledSeconds != rhs_storage._radios5GhzThermalThrottledSeconds {return false}
        if _storage._radios5GhzHighThermalThrottledSeconds != rhs_storage._radios5GhzHighThermalThrottledSeconds {return false}
        if _storage._boardTemp != rhs_storage._boardTemp {return false}
        if _storage._poeMcuDieTemp != rhs_storage._poeMcuDieTemp {return false}
        if _storage._ifacesLanEthRxBytes != rhs_storage._ifacesLanEthRxBytes {return false}
        if _storage._ifacesLanEthRxPackets != rhs_storage._ifacesLanEthRxPackets {return false}
        if _storage._ifacesLanEthRxErrors != rhs_storage._ifacesLanEthRxErrors {return false}
        if _storage._ifacesLanEthRxFrameErrors != rhs_storage._ifacesLanEthRxFrameErrors {return false}
        if _storage._ifacesLanEthTxBytes != rhs_storage._ifacesLanEthTxBytes {return false}
        if _storage._ifacesLanEthTxPackets != rhs_storage._ifacesLanEthTxPackets {return false}
        if _storage._ifacesLanEthTxErrors != rhs_storage._ifacesLanEthTxErrors {return false}
        if _storage._ifacesLan1EthRxBytes != rhs_storage._ifacesLan1EthRxBytes {return false}
        if _storage._ifacesLan1EthRxPackets != rhs_storage._ifacesLan1EthRxPackets {return false}
        if _storage._ifacesLan1EthRxErrors != rhs_storage._ifacesLan1EthRxErrors {return false}
        if _storage._ifacesLan1EthRxFrameErrors != rhs_storage._ifacesLan1EthRxFrameErrors {return false}
        if _storage._ifacesLan1EthTxBytes != rhs_storage._ifacesLan1EthTxBytes {return false}
        if _storage._ifacesLan1EthTxPackets != rhs_storage._ifacesLan1EthTxPackets {return false}
        if _storage._ifacesLan1EthTxErrors != rhs_storage._ifacesLan1EthTxErrors {return false}
        if _storage._ifacesWanEthRxBytes != rhs_storage._ifacesWanEthRxBytes {return false}
        if _storage._ifacesWanEthRxPackets != rhs_storage._ifacesWanEthRxPackets {return false}
        if _storage._ifacesWanEthRxErrors != rhs_storage._ifacesWanEthRxErrors {return false}
        if _storage._ifacesWanEthRxFrameErrors != rhs_storage._ifacesWanEthRxFrameErrors {return false}
        if _storage._ifacesWanEthTxBytes != rhs_storage._ifacesWanEthTxBytes {return false}
        if _storage._ifacesWanEthTxPackets != rhs_storage._ifacesWanEthTxPackets {return false}
        if _storage._ifacesWanEthTxErrors != rhs_storage._ifacesWanEthTxErrors {return false}
        if _storage._clients != rhs_storage._clients {return false}
        if _storage._clients2Ghz != rhs_storage._clients2Ghz {return false}
        if _storage._clients5Ghz != rhs_storage._clients5Ghz {return false}
        if _storage._clients5GhzHigh != rhs_storage._clients5GhzHigh {return false}
        if _storage._clientsEth != rhs_storage._clientsEth {return false}
        if _storage._clients5GhzRxBandwidth20Mhz != rhs_storage._clients5GhzRxBandwidth20Mhz {return false}
        if _storage._clients5GhzRxBandwidth40Mhz != rhs_storage._clients5GhzRxBandwidth40Mhz {return false}
        if _storage._clients5GhzRxBandwidth80Mhz != rhs_storage._clients5GhzRxBandwidth80Mhz {return false}
        if _storage._clientsRepeater != rhs_storage._clientsRepeater {return false}
        if _storage._clientsRepeater2Ghz != rhs_storage._clientsRepeater2Ghz {return false}
        if _storage._clientsRepeater5Ghz != rhs_storage._clientsRepeater5Ghz {return false}
        if _storage._clientsRepeater5GhzHigh != rhs_storage._clientsRepeater5GhzHigh {return false}
        if _storage._clientsRepeaterEth != rhs_storage._clientsRepeaterEth {return false}
        if _storage._meshHops != rhs_storage._meshHops {return false}
        if _storage._meshOneHopRssiAvg2Ghz != rhs_storage._meshOneHopRssiAvg2Ghz {return false}
        if _storage._meshOneHopRssiAvg5Ghz != rhs_storage._meshOneHopRssiAvg5Ghz {return false}
        if _storage._meshOneHopRssiAvg5GhzHigh != rhs_storage._meshOneHopRssiAvg5GhzHigh {return false}
        if _storage._meshTwoHopRssiAvg2Ghz != rhs_storage._meshTwoHopRssiAvg2Ghz {return false}
        if _storage._meshTwoHopRssiAvg5Ghz != rhs_storage._meshTwoHopRssiAvg5Ghz {return false}
        if _storage._meshTwoHopRssiAvg5GhzHigh != rhs_storage._meshTwoHopRssiAvg5GhzHigh {return false}
        if _storage._repeaterTxRateMbpsMin != rhs_storage._repeaterTxRateMbpsMin {return false}
        if _storage._repeaterRxRateMbpsMin != rhs_storage._repeaterRxRateMbpsMin {return false}
        if _storage._repeaterTxRateMbpsAvg != rhs_storage._repeaterTxRateMbpsAvg {return false}
        if _storage._repeaterRxRateMbpsAvg != rhs_storage._repeaterRxRateMbpsAvg {return false}
        if _storage._repeaterSecondsSince2SOutageMin != rhs_storage._repeaterSecondsSince2SOutageMin {return false}
        if _storage._repeaterSecondsSince5SOutageMin != rhs_storage._repeaterSecondsSince5SOutageMin {return false}
        if _storage._repeaterSecondsSince2SOutageAvg != rhs_storage._repeaterSecondsSince2SOutageAvg {return false}
        if _storage._repeaterSecondsSince5SOutageAvg != rhs_storage._repeaterSecondsSince5SOutageAvg {return false}
        if _storage._repeaterLatencyMs1HMax != rhs_storage._repeaterLatencyMs1HMax {return false}
        if _storage._repeaterLatencyMs1HAvg != rhs_storage._repeaterLatencyMs1HAvg {return false}
        if _storage._meshTopologyChangeCount1D != rhs_storage._meshTopologyChangeCount1D {return false}
        if _storage._pingSecondsSinceLast1SOutage != rhs_storage._pingSecondsSinceLast1SOutage {return false}
        if _storage._pingSecondsSinceLast2SOutage != rhs_storage._pingSecondsSinceLast2SOutage {return false}
        if _storage._pingSecondsSinceLast5SOutage != rhs_storage._pingSecondsSinceLast5SOutage {return false}
        if _storage._pingSecondsSinceLast60SOutage != rhs_storage._pingSecondsSinceLast60SOutage {return false}
        if _storage._pingSecondsSinceLast300SOutage != rhs_storage._pingSecondsSinceLast300SOutage {return false}
        if _storage._pingDropRate != rhs_storage._pingDropRate {return false}
        if _storage._pingDropRateLast1H != rhs_storage._pingDropRateLast1H {return false}
        if _storage._pingLatency != rhs_storage._pingLatency {return false}
        if _storage._pingLatencyLast1H != rhs_storage._pingLatencyLast1H {return false}
        if _storage._pingDishSecondsSinceLast1SOutage != rhs_storage._pingDishSecondsSinceLast1SOutage {return false}
        if _storage._pingDishSecondsSinceLast2SOutage != rhs_storage._pingDishSecondsSinceLast2SOutage {return false}
        if _storage._pingDishSecondsSinceLast5SOutage != rhs_storage._pingDishSecondsSinceLast5SOutage {return false}
        if _storage._pingDishSecondsSinceLast60SOutage != rhs_storage._pingDishSecondsSinceLast60SOutage {return false}
        if _storage._pingDishSecondsSinceLast300SOutage != rhs_storage._pingDishSecondsSinceLast300SOutage {return false}
        if _storage._pingDishDropRate != rhs_storage._pingDishDropRate {return false}
        if _storage._pingDishDropRateLast1H != rhs_storage._pingDishDropRateLast1H {return false}
        if _storage._pingDishLatency != rhs_storage._pingDishLatency {return false}
        if _storage._pingDishLatencyLast1H != rhs_storage._pingDishLatencyLast1H {return false}
        if _storage._clientSpeedtestRouterDownloadMbps != rhs_storage._clientSpeedtestRouterDownloadMbps {return false}
        if _storage._clientSpeedtestRouterUploadMbps != rhs_storage._clientSpeedtestRouterUploadMbps {return false}
        if _storage._clientSpeedtestRouterRssi != rhs_storage._clientSpeedtestRouterRssi {return false}
        if _storage._clientSpeedtestWifiDownloadMbps != rhs_storage._clientSpeedtestWifiDownloadMbps {return false}
        if _storage._clientSpeedtestWifiUploadMbps != rhs_storage._clientSpeedtestWifiUploadMbps {return false}
        if _storage._clientSpeedtestClientDownloadMbps != rhs_storage._clientSpeedtestClientDownloadMbps {return false}
        if _storage._clientSpeedtestClientUploadMbps != rhs_storage._clientSpeedtestClientUploadMbps {return false}
        if _storage._clientSpeedtestClientRssi != rhs_storage._clientSpeedtestClientRssi {return false}
        if _storage._clientSpeedtestClientIface != rhs_storage._clientSpeedtestClientIface {return false}
        if _storage._clientSpeedtestClientOui != rhs_storage._clientSpeedtestClientOui {return false}
        if _storage._clientSpeedtestClientTxRate != rhs_storage._clientSpeedtestClientTxRate {return false}
        if _storage._clientSpeedtestClientRxRate != rhs_storage._clientSpeedtestClientRxRate {return false}
        if _storage._clientSpeedtestClientPlatformType != rhs_storage._clientSpeedtestClientPlatformType {return false}
        if _storage._speedtestTcp8DownloadMbpsAvg != rhs_storage._speedtestTcp8DownloadMbpsAvg {return false}
        if _storage._speedtestTcp8DownloadMbpsMax != rhs_storage._speedtestTcp8DownloadMbpsMax {return false}
        if _storage._speedtestTcp8UploadMbpsAvg != rhs_storage._speedtestTcp8UploadMbpsAvg {return false}
        if _storage._speedtestTcp8UploadMbpsMax != rhs_storage._speedtestTcp8UploadMbpsMax {return false}
        if _storage._speedtestTcp64DownloadMbpsAvg != rhs_storage._speedtestTcp64DownloadMbpsAvg {return false}
        if _storage._speedtestTcp64DownloadMbpsMax != rhs_storage._speedtestTcp64DownloadMbpsMax {return false}
        if _storage._speedtestTcp64UploadMbpsAvg != rhs_storage._speedtestTcp64UploadMbpsAvg {return false}
        if _storage._speedtestTcp64UploadMbpsMax != rhs_storage._speedtestTcp64UploadMbpsMax {return false}
        if _storage._dishCellID != rhs_storage._dishCellID {return false}
        if _storage._configSetupComplete != rhs_storage._configSetupComplete {return false}
        if _storage._configBandsSplit != rhs_storage._configBandsSplit {return false}
        if _storage._configIsRepeater != rhs_storage._configIsRepeater {return false}
        if _storage._configOpenNetwork != rhs_storage._configOpenNetwork {return false}
        if _storage._configIsAviation != rhs_storage._configIsAviation {return false}
        if _storage._configSecureDns != rhs_storage._configSecureDns {return false}
        if _storage._configLegacy != rhs_storage._configLegacy {return false}
        if _storage._configApMode != rhs_storage._configApMode {return false}
        if _storage._configDfsEnabled != rhs_storage._configDfsEnabled {return false}
        if _storage._configNetworkNameIsDefault != rhs_storage._configNetworkNameIsDefault {return false}
        if _storage._configRemoteSshEnabled != rhs_storage._configRemoteSshEnabled {return false}
        if _storage._configIsRepeaterWired != rhs_storage._configIsRepeaterWired {return false}
        if _storage._configIsRepeaterWireless != rhs_storage._configIsRepeaterWireless {return false}
        if _storage._configBlockSchedulesSet != rhs_storage._configBlockSchedulesSet {return false}
        if _storage._configCustomNameservers != rhs_storage._configCustomNameservers {return false}
        if _storage._configDisableMeshOnboarding != rhs_storage._configDisableMeshOnboarding {return false}
        if _storage._configPinCountryCode != rhs_storage._configPinCountryCode {return false}
        if _storage._configDisableUpdateReboot != rhs_storage._configDisableUpdateReboot {return false}
        if _storage._configDisable2Ghz != rhs_storage._configDisable2Ghz {return false}
        if _storage._configDisable5Ghz != rhs_storage._configDisable5Ghz {return false}
        if _storage._configDisable5GhzHigh != rhs_storage._configDisable5GhzHigh {return false}
        if _storage._configChannel2Ghz != rhs_storage._configChannel2Ghz {return false}
        if _storage._configChannel5Ghz != rhs_storage._configChannel5Ghz {return false}
        if _storage._configChannel5GhzHigh != rhs_storage._configChannel5GhzHigh {return false}
        if _storage._configNetworks != rhs_storage._configNetworks {return false}
        if _storage._configNetworksGuest != rhs_storage._configNetworksGuest {return false}
        if _storage._configNetworksHidden != rhs_storage._configNetworksHidden {return false}
        if _storage._configNetworksClientIsolation != rhs_storage._configNetworksClientIsolation {return false}
        if _storage._configNetworksBandsSplit != rhs_storage._configNetworksBandsSplit {return false}
        if _storage._wanTrafficControlCakeBytes != rhs_storage._wanTrafficControlCakeBytes {return false}
        if _storage._wanTrafficControlCakePackets != rhs_storage._wanTrafficControlCakePackets {return false}
        if _storage._wanTrafficControlCakeDrops != rhs_storage._wanTrafficControlCakeDrops {return false}
        if _storage._wanTrafficControlCakeAckDrops != rhs_storage._wanTrafficControlCakeAckDrops {return false}
        if _storage._conntrackEntries != rhs_storage._conntrackEntries {return false}
        if _storage._dhcpSecsEq0 != rhs_storage._dhcpSecsEq0 {return false}
        if _storage._dhcpSecsGt0 != rhs_storage._dhcpSecsGt0 {return false}
        if _storage._dhcpSecsGt10 != rhs_storage._dhcpSecsGt10 {return false}
        if _storage._dhcpSecsGt30 != rhs_storage._dhcpSecsGt30 {return false}
        if _storage._dhcpSecsGt60 != rhs_storage._dhcpSecsGt60 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_starlink_router_alerts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".starlink_router_alerts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "source"),
    3: .same(proto: "active"),
    4: .same(proto: "start"),
    5: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 2)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 3)
    }
    try { if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_starlink_router_alerts, rhs: SpaceX_API_Device_starlink_router_alerts) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.source != rhs.source {return false}
    if lhs.active != rhs.active {return false}
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_starlink_router_client_speedtests: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".starlink_router_client_speedtests"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "data_record"),
    3: .same(proto: "country"),
    30: .standard(proto: "speedtest_id"),
    8: .standard(proto: "client_rssi"),
    9: .standard(proto: "router_rssi"),
    10: .standard(proto: "client_iface"),
    11: .standard(proto: "client_oui"),
    12: .standard(proto: "client_tx_rate"),
    13: .standard(proto: "client_rx_rate"),
    27: .standard(proto: "client_platform_type"),
    34: .standard(proto: "client_app_version"),
    35: .standard(proto: "client_app_build"),
    31: .standard(proto: "client_rx_phy_mode"),
    32: .standard(proto: "client_rx_spatial_streams"),
    33: .standard(proto: "client_rx_mcs"),
    4: .standard(proto: "client_download_start_time"),
    5: .standard(proto: "client_upload_start_time"),
    6: .standard(proto: "client_download_mbps_avg"),
    7: .standard(proto: "client_upload_mbps_avg"),
    28: .standard(proto: "client_target"),
    16: .standard(proto: "client_tcp_streams"),
    17: .standard(proto: "router_download_start_time"),
    18: .standard(proto: "router_upload_start_time"),
    19: .standard(proto: "router_download_mbps_avg"),
    20: .standard(proto: "router_upload_mbps_avg"),
    29: .standard(proto: "router_target"),
    22: .standard(proto: "router_tcp_streams"),
    23: .standard(proto: "wifi_download_start_time"),
    24: .standard(proto: "wifi_upload_start_time"),
    25: .standard(proto: "wifi_download_mbps_avg"),
    26: .standard(proto: "wifi_upload_mbps_avg"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _dataRecord: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _country: String = String()
    var _speedtestID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _routerRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientIface: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientOui: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientPlatformType: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientAppVersion: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientAppBuild: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientRxPhyMode: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientRxSpatialStreams: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientRxMcs: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _clientUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _clientDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientTarget: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientTcpStreams: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _routerDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _routerUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _routerDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _routerUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _routerTarget: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _routerTcpStreams: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _wifiDownloadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _wifiUploadStartTime: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _wifiDownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _wifiUploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _dataRecord = source._dataRecord
      _country = source._country
      _speedtestID = source._speedtestID
      _clientRssi = source._clientRssi
      _routerRssi = source._routerRssi
      _clientIface = source._clientIface
      _clientOui = source._clientOui
      _clientTxRate = source._clientTxRate
      _clientRxRate = source._clientRxRate
      _clientPlatformType = source._clientPlatformType
      _clientAppVersion = source._clientAppVersion
      _clientAppBuild = source._clientAppBuild
      _clientRxPhyMode = source._clientRxPhyMode
      _clientRxSpatialStreams = source._clientRxSpatialStreams
      _clientRxMcs = source._clientRxMcs
      _clientDownloadStartTime = source._clientDownloadStartTime
      _clientUploadStartTime = source._clientUploadStartTime
      _clientDownloadMbpsAvg = source._clientDownloadMbpsAvg
      _clientUploadMbpsAvg = source._clientUploadMbpsAvg
      _clientTarget = source._clientTarget
      _clientTcpStreams = source._clientTcpStreams
      _routerDownloadStartTime = source._routerDownloadStartTime
      _routerUploadStartTime = source._routerUploadStartTime
      _routerDownloadMbpsAvg = source._routerDownloadMbpsAvg
      _routerUploadMbpsAvg = source._routerUploadMbpsAvg
      _routerTarget = source._routerTarget
      _routerTcpStreams = source._routerTcpStreams
      _wifiDownloadStartTime = source._wifiDownloadStartTime
      _wifiUploadStartTime = source._wifiUploadStartTime
      _wifiDownloadMbpsAvg = source._wifiDownloadMbpsAvg
      _wifiUploadMbpsAvg = source._wifiUploadMbpsAvg
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._dataRecord) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._country) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._clientDownloadStartTime) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._clientUploadStartTime) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._clientDownloadMbpsAvg) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._clientUploadMbpsAvg) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._clientRssi) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._routerRssi) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._clientIface) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._clientOui) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._clientTxRate) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._clientRxRate) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._clientTcpStreams) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._routerDownloadStartTime) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._routerUploadStartTime) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._routerDownloadMbpsAvg) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._routerUploadMbpsAvg) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._routerTcpStreams) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._wifiDownloadStartTime) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._wifiUploadStartTime) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._wifiDownloadMbpsAvg) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._wifiUploadMbpsAvg) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._clientPlatformType) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._clientTarget) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._routerTarget) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestID) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._clientRxPhyMode) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._clientRxSpatialStreams) }()
        case 33: try { try decoder.decodeSingularMessageField(value: &_storage._clientRxMcs) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._clientAppVersion) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._clientAppBuild) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      try { if let v = _storage._dataRecord {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 3)
      }
      try { if let v = _storage._clientDownloadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._clientUploadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._clientDownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._clientUploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._clientRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._routerRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._clientIface {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._clientOui {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._clientTxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._clientRxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._clientTcpStreams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._routerDownloadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._routerUploadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._routerDownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._routerUploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._routerTcpStreams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._wifiDownloadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._wifiUploadStartTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._wifiDownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._wifiUploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._clientPlatformType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._clientTarget {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._routerTarget {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._speedtestID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._clientRxPhyMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._clientRxSpatialStreams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._clientRxMcs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._clientAppVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._clientAppBuild {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_starlink_router_client_speedtests, rhs: SpaceX_API_Device_starlink_router_client_speedtests) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._dataRecord != rhs_storage._dataRecord {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._speedtestID != rhs_storage._speedtestID {return false}
        if _storage._clientRssi != rhs_storage._clientRssi {return false}
        if _storage._routerRssi != rhs_storage._routerRssi {return false}
        if _storage._clientIface != rhs_storage._clientIface {return false}
        if _storage._clientOui != rhs_storage._clientOui {return false}
        if _storage._clientTxRate != rhs_storage._clientTxRate {return false}
        if _storage._clientRxRate != rhs_storage._clientRxRate {return false}
        if _storage._clientPlatformType != rhs_storage._clientPlatformType {return false}
        if _storage._clientAppVersion != rhs_storage._clientAppVersion {return false}
        if _storage._clientAppBuild != rhs_storage._clientAppBuild {return false}
        if _storage._clientRxPhyMode != rhs_storage._clientRxPhyMode {return false}
        if _storage._clientRxSpatialStreams != rhs_storage._clientRxSpatialStreams {return false}
        if _storage._clientRxMcs != rhs_storage._clientRxMcs {return false}
        if _storage._clientDownloadStartTime != rhs_storage._clientDownloadStartTime {return false}
        if _storage._clientUploadStartTime != rhs_storage._clientUploadStartTime {return false}
        if _storage._clientDownloadMbpsAvg != rhs_storage._clientDownloadMbpsAvg {return false}
        if _storage._clientUploadMbpsAvg != rhs_storage._clientUploadMbpsAvg {return false}
        if _storage._clientTarget != rhs_storage._clientTarget {return false}
        if _storage._clientTcpStreams != rhs_storage._clientTcpStreams {return false}
        if _storage._routerDownloadStartTime != rhs_storage._routerDownloadStartTime {return false}
        if _storage._routerUploadStartTime != rhs_storage._routerUploadStartTime {return false}
        if _storage._routerDownloadMbpsAvg != rhs_storage._routerDownloadMbpsAvg {return false}
        if _storage._routerUploadMbpsAvg != rhs_storage._routerUploadMbpsAvg {return false}
        if _storage._routerTarget != rhs_storage._routerTarget {return false}
        if _storage._routerTcpStreams != rhs_storage._routerTcpStreams {return false}
        if _storage._wifiDownloadStartTime != rhs_storage._wifiDownloadStartTime {return false}
        if _storage._wifiUploadStartTime != rhs_storage._wifiUploadStartTime {return false}
        if _storage._wifiDownloadMbpsAvg != rhs_storage._wifiDownloadMbpsAvg {return false}
        if _storage._wifiUploadMbpsAvg != rhs_storage._wifiUploadMbpsAvg {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_StarlinkRouterClients: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StarlinkRouterClients"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "router_id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "client_id"),
    4: .standard(proto: "client_telem_index"),
    119: .standard(proto: "router_hw"),
    120: .standard(proto: "router_sw"),
    121: .standard(proto: "client_router_id"),
    122: .standard(proto: "client_hw"),
    123: .standard(proto: "client_sw"),
    101: .same(proto: "oui"),
    102: .standard(proto: "upstream_id"),
    103: .standard(proto: "is_repeater"),
    104: .standard(proto: "connected_s"),
    105: .same(proto: "interface"),
    106: .standard(proto: "radio_channel"),
    107: .same(proto: "rssi"),
    108: .standard(proto: "rx_mcs"),
    109: .standard(proto: "tx_mcs"),
    110: .standard(proto: "rx_rate"),
    111: .standard(proto: "tx_rate"),
    112: .standard(proto: "rx_bandwidth"),
    113: .standard(proto: "rx_spatial_streams"),
    114: .standard(proto: "rx_phy_mode"),
    118: .standard(proto: "mesh_hops"),
    124: .standard(proto: "speedtest_upload_mbps"),
    125: .standard(proto: "speedtest_download_mbps"),
    127: .standard(proto: "site_survey_rssi"),
    128: .standard(proto: "site_survey_est_rx_rate"),
    129: .standard(proto: "est_controller_throughput_mbps"),
    115: .standard(proto: "ping_drop_rate_last_1h"),
    116: .standard(proto: "ping_latency_last_1h"),
    117: .standard(proto: "steer_state"),
    126: .same(proto: "blocked"),
  ]

  fileprivate class _StorageClass {
    var _routerID: String = String()
    var _timestamp: SpaceX_API_Telemetron_Public_Common_TimestampInfo? = nil
    var _clientID: UInt32 = 0
    var _clientTelemIndex: String = String()
    var _routerHw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _routerSw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientRouterID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientHw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientSw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _oui: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _upstreamID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _isRepeater: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _connectedS: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _interface: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _radioChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _rxMcs: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _txMcs: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _rxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _txRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _rxBandwidth: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _rxSpatialStreams: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _rxPhyMode: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _speedtestUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _siteSurveyRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _siteSurveyEstRxRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _estControllerThroughputMbps: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingLatencyLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _steerState: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _blocked: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _routerID = source._routerID
      _timestamp = source._timestamp
      _clientID = source._clientID
      _clientTelemIndex = source._clientTelemIndex
      _routerHw = source._routerHw
      _routerSw = source._routerSw
      _clientRouterID = source._clientRouterID
      _clientHw = source._clientHw
      _clientSw = source._clientSw
      _oui = source._oui
      _upstreamID = source._upstreamID
      _isRepeater = source._isRepeater
      _connectedS = source._connectedS
      _interface = source._interface
      _radioChannel = source._radioChannel
      _rssi = source._rssi
      _rxMcs = source._rxMcs
      _txMcs = source._txMcs
      _rxRate = source._rxRate
      _txRate = source._txRate
      _rxBandwidth = source._rxBandwidth
      _rxSpatialStreams = source._rxSpatialStreams
      _rxPhyMode = source._rxPhyMode
      _meshHops = source._meshHops
      _speedtestUploadMbps = source._speedtestUploadMbps
      _speedtestDownloadMbps = source._speedtestDownloadMbps
      _siteSurveyRssi = source._siteSurveyRssi
      _siteSurveyEstRxRate = source._siteSurveyEstRxRate
      _estControllerThroughputMbps = source._estControllerThroughputMbps
      _pingDropRateLast1H = source._pingDropRateLast1H
      _pingLatencyLast1H = source._pingLatencyLast1H
      _steerState = source._steerState
      _blocked = source._blocked
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._routerID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._clientTelemIndex) }()
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._oui) }()
        case 102: try { try decoder.decodeSingularMessageField(value: &_storage._upstreamID) }()
        case 103: try { try decoder.decodeSingularMessageField(value: &_storage._isRepeater) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._connectedS) }()
        case 105: try { try decoder.decodeSingularMessageField(value: &_storage._interface) }()
        case 106: try { try decoder.decodeSingularMessageField(value: &_storage._radioChannel) }()
        case 107: try { try decoder.decodeSingularMessageField(value: &_storage._rssi) }()
        case 108: try { try decoder.decodeSingularMessageField(value: &_storage._rxMcs) }()
        case 109: try { try decoder.decodeSingularMessageField(value: &_storage._txMcs) }()
        case 110: try { try decoder.decodeSingularMessageField(value: &_storage._rxRate) }()
        case 111: try { try decoder.decodeSingularMessageField(value: &_storage._txRate) }()
        case 112: try { try decoder.decodeSingularMessageField(value: &_storage._rxBandwidth) }()
        case 113: try { try decoder.decodeSingularMessageField(value: &_storage._rxSpatialStreams) }()
        case 114: try { try decoder.decodeSingularMessageField(value: &_storage._rxPhyMode) }()
        case 115: try { try decoder.decodeSingularMessageField(value: &_storage._pingDropRateLast1H) }()
        case 116: try { try decoder.decodeSingularMessageField(value: &_storage._pingLatencyLast1H) }()
        case 117: try { try decoder.decodeSingularMessageField(value: &_storage._steerState) }()
        case 118: try { try decoder.decodeSingularMessageField(value: &_storage._meshHops) }()
        case 119: try { try decoder.decodeSingularMessageField(value: &_storage._routerHw) }()
        case 120: try { try decoder.decodeSingularMessageField(value: &_storage._routerSw) }()
        case 121: try { try decoder.decodeSingularMessageField(value: &_storage._clientRouterID) }()
        case 122: try { try decoder.decodeSingularMessageField(value: &_storage._clientHw) }()
        case 123: try { try decoder.decodeSingularMessageField(value: &_storage._clientSw) }()
        case 124: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestUploadMbps) }()
        case 125: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestDownloadMbps) }()
        case 126: try { try decoder.decodeSingularMessageField(value: &_storage._blocked) }()
        case 127: try { try decoder.decodeSingularMessageField(value: &_storage._siteSurveyRssi) }()
        case 128: try { try decoder.decodeSingularMessageField(value: &_storage._siteSurveyEstRxRate) }()
        case 129: try { try decoder.decodeSingularMessageField(value: &_storage._estControllerThroughputMbps) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._routerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._routerID, fieldNumber: 1)
      }
      try { if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._clientID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._clientID, fieldNumber: 3)
      }
      if !_storage._clientTelemIndex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientTelemIndex, fieldNumber: 4)
      }
      try { if let v = _storage._oui {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._upstreamID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._isRepeater {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._connectedS {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._interface {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._radioChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      } }()
      try { if let v = _storage._rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      } }()
      try { if let v = _storage._rxMcs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      } }()
      try { if let v = _storage._txMcs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      } }()
      try { if let v = _storage._rxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      } }()
      try { if let v = _storage._txRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      } }()
      try { if let v = _storage._rxBandwidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      } }()
      try { if let v = _storage._rxSpatialStreams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      } }()
      try { if let v = _storage._rxPhyMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
      } }()
      try { if let v = _storage._pingDropRateLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      } }()
      try { if let v = _storage._pingLatencyLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
      } }()
      try { if let v = _storage._steerState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      } }()
      try { if let v = _storage._meshHops {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
      } }()
      try { if let v = _storage._routerHw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 119)
      } }()
      try { if let v = _storage._routerSw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 120)
      } }()
      try { if let v = _storage._clientRouterID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 121)
      } }()
      try { if let v = _storage._clientHw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 122)
      } }()
      try { if let v = _storage._clientSw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
      } }()
      try { if let v = _storage._speedtestUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
      } }()
      try { if let v = _storage._speedtestDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 125)
      } }()
      try { if let v = _storage._blocked {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 126)
      } }()
      try { if let v = _storage._siteSurveyRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 127)
      } }()
      try { if let v = _storage._siteSurveyEstRxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 128)
      } }()
      try { if let v = _storage._estControllerThroughputMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 129)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_StarlinkRouterClients, rhs: SpaceX_API_Device_StarlinkRouterClients) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._routerID != rhs_storage._routerID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._clientTelemIndex != rhs_storage._clientTelemIndex {return false}
        if _storage._routerHw != rhs_storage._routerHw {return false}
        if _storage._routerSw != rhs_storage._routerSw {return false}
        if _storage._clientRouterID != rhs_storage._clientRouterID {return false}
        if _storage._clientHw != rhs_storage._clientHw {return false}
        if _storage._clientSw != rhs_storage._clientSw {return false}
        if _storage._oui != rhs_storage._oui {return false}
        if _storage._upstreamID != rhs_storage._upstreamID {return false}
        if _storage._isRepeater != rhs_storage._isRepeater {return false}
        if _storage._connectedS != rhs_storage._connectedS {return false}
        if _storage._interface != rhs_storage._interface {return false}
        if _storage._radioChannel != rhs_storage._radioChannel {return false}
        if _storage._rssi != rhs_storage._rssi {return false}
        if _storage._rxMcs != rhs_storage._rxMcs {return false}
        if _storage._txMcs != rhs_storage._txMcs {return false}
        if _storage._rxRate != rhs_storage._rxRate {return false}
        if _storage._txRate != rhs_storage._txRate {return false}
        if _storage._rxBandwidth != rhs_storage._rxBandwidth {return false}
        if _storage._rxSpatialStreams != rhs_storage._rxSpatialStreams {return false}
        if _storage._rxPhyMode != rhs_storage._rxPhyMode {return false}
        if _storage._meshHops != rhs_storage._meshHops {return false}
        if _storage._speedtestUploadMbps != rhs_storage._speedtestUploadMbps {return false}
        if _storage._speedtestDownloadMbps != rhs_storage._speedtestDownloadMbps {return false}
        if _storage._siteSurveyRssi != rhs_storage._siteSurveyRssi {return false}
        if _storage._siteSurveyEstRxRate != rhs_storage._siteSurveyEstRxRate {return false}
        if _storage._estControllerThroughputMbps != rhs_storage._estControllerThroughputMbps {return false}
        if _storage._pingDropRateLast1H != rhs_storage._pingDropRateLast1H {return false}
        if _storage._pingLatencyLast1H != rhs_storage._pingLatencyLast1H {return false}
        if _storage._steerState != rhs_storage._steerState {return false}
        if _storage._blocked != rhs_storage._blocked {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSetClientGivenNameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSetClientGivenNameRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_name"),
    2: .standard(proto: "client_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._clientName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clientConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientName {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._clientConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSetClientGivenNameRequest, rhs: SpaceX_API_Device_WifiSetClientGivenNameRequest) -> Bool {
    if lhs._clientName != rhs._clientName {return false}
    if lhs._clientConfig != rhs._clientConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSelfTestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSelfTestRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSelfTestRequest, rhs: SpaceX_API_Device_WifiSelfTestRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiSelfTestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiSelfTestResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "self_test"),
    2: .same(proto: "json"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._selfTest) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.json) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._selfTest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiSelfTestResponse, rhs: SpaceX_API_Device_WifiSelfTestResponse) -> Bool {
    if lhs._selfTest != rhs._selfTest {return false}
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiRunSelfTestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiRunSelfTestRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiRunSelfTestRequest, rhs: SpaceX_API_Device_WifiRunSelfTestRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiRfTestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiRfTestRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_measurements"),
    2: .standard(proto: "channel_2ghz"),
    3: .standard(proto: "channel_5ghz"),
    4: .standard(proto: "channel_5ghz_high"),
    5: .standard(proto: "mcs_2ghz"),
    6: .standard(proto: "mcs_5ghz"),
    7: .standard(proto: "mcs_5ghz_high"),
    8: .standard(proto: "phy_mode_2ghz"),
    9: .standard(proto: "phy_mode_5ghz"),
    10: .standard(proto: "phy_mode_5ghz_high"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.numMeasurements) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel2Ghz) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.channel5Ghz) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.channel5GhzHigh) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.mcs2Ghz) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.mcs5Ghz) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.mcs5GhzHigh) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.phyMode2Ghz) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.phyMode5Ghz) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.phyMode5GhzHigh) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numMeasurements != 0 {
      try visitor.visitSingularUInt32Field(value: self.numMeasurements, fieldNumber: 1)
    }
    if self.channel2Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel2Ghz, fieldNumber: 2)
    }
    if self.channel5Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel5Ghz, fieldNumber: 3)
    }
    if self.channel5GhzHigh != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel5GhzHigh, fieldNumber: 4)
    }
    if self.mcs2Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.mcs2Ghz, fieldNumber: 5)
    }
    if self.mcs5Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.mcs5Ghz, fieldNumber: 6)
    }
    if self.mcs5GhzHigh != 0 {
      try visitor.visitSingularUInt32Field(value: self.mcs5GhzHigh, fieldNumber: 7)
    }
    if self.phyMode2Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.phyMode2Ghz, fieldNumber: 8)
    }
    if self.phyMode5Ghz != 0 {
      try visitor.visitSingularUInt32Field(value: self.phyMode5Ghz, fieldNumber: 9)
    }
    if self.phyMode5GhzHigh != 0 {
      try visitor.visitSingularUInt32Field(value: self.phyMode5GhzHigh, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiRfTestRequest, rhs: SpaceX_API_Device_WifiRfTestRequest) -> Bool {
    if lhs.numMeasurements != rhs.numMeasurements {return false}
    if lhs.channel2Ghz != rhs.channel2Ghz {return false}
    if lhs.channel5Ghz != rhs.channel5Ghz {return false}
    if lhs.channel5GhzHigh != rhs.channel5GhzHigh {return false}
    if lhs.mcs2Ghz != rhs.mcs2Ghz {return false}
    if lhs.mcs5Ghz != rhs.mcs5Ghz {return false}
    if lhs.mcs5GhzHigh != rhs.mcs5GhzHigh {return false}
    if lhs.phyMode2Ghz != rhs.phyMode2Ghz {return false}
    if lhs.phyMode5Ghz != rhs.phyMode5Ghz {return false}
    if lhs.phyMode5GhzHigh != rhs.phyMode5GhzHigh {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiRfTestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiRfTestResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "report"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.report) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.report.isEmpty {
      try visitor.visitSingularStringField(value: self.report, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiRfTestResponse, rhs: SpaceX_API_Device_WifiRfTestResponse) -> Bool {
    if lhs.report != rhs.report {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetFirewallRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetFirewallRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetFirewallRequest, rhs: SpaceX_API_Device_WifiGetFirewallRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGetFirewallResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGetFirewallResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iptables"),
    2: .standard(proto: "iptables_6"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iptables) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.iptables6) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iptables.isEmpty {
      try visitor.visitSingularStringField(value: self.iptables, fieldNumber: 1)
    }
    if !self.iptables6.isEmpty {
      try visitor.visitSingularStringField(value: self.iptables6, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGetFirewallResponse, rhs: SpaceX_API_Device_WifiGetFirewallResponse) -> Bool {
    if lhs.iptables != rhs.iptables {return false}
    if lhs.iptables6 != rhs.iptables6 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiTogglePoeNegotiationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiTogglePoeNegotiationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiTogglePoeNegotiationRequest, rhs: SpaceX_API_Device_WifiTogglePoeNegotiationRequest) -> Bool {
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiCalibrationModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiCalibrationModeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiCalibrationModeRequest, rhs: SpaceX_API_Device_WifiCalibrationModeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_starlink_router_hourly_metrics_v2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".starlink_router_hourly_metrics_v2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "timestamp_date"),
    3: .standard(proto: "timestamp_hour"),
    4: .standard(proto: "sys_hw_gen"),
    5: .standard(proto: "sys_sw"),
    6: .standard(proto: "sys_country"),
    7: .standard(proto: "sys_is_dev"),
    8: .standard(proto: "sys_alloc_fds"),
    9: .standard(proto: "sys_cpu_usage"),
    10: .standard(proto: "sys_mem_free_kb"),
    11: .standard(proto: "sys_bootcount"),
    12: .standard(proto: "sys_partitions_equal"),
    13: .standard(proto: "sys_uptime_seconds"),
    14: .standard(proto: "sys_anti_rollback_version"),
    100: .standard(proto: "radios_2ghz_channel"),
    101: .standard(proto: "radios_2ghz_antenna1_rssi"),
    102: .standard(proto: "radios_2ghz_antenna2_rssi"),
    103: .standard(proto: "radios_2ghz_antenna3_rssi"),
    104: .standard(proto: "radios_2ghz_iface_count"),
    105: .standard(proto: "radios_2ghz_chan_busy_fraction"),
    106: .standard(proto: "radios_2ghz_edcca_fraction"),
    107: .standard(proto: "radios_2ghz_overlapping_bss_fraction"),
    108: .standard(proto: "radios_2ghz_rx_bytes"),
    109: .standard(proto: "radios_2ghz_rx_packets"),
    110: .standard(proto: "radios_2ghz_rx_errors"),
    111: .standard(proto: "radios_2ghz_rx_frame_errors"),
    112: .standard(proto: "radios_2ghz_rx_packet_error_rate"),
    113: .standard(proto: "radios_2ghz_rx_airtime_fraction"),
    114: .standard(proto: "radios_2ghz_tx_bytes"),
    115: .standard(proto: "radios_2ghz_tx_packets"),
    116: .standard(proto: "radios_2ghz_tx_errors"),
    117: .standard(proto: "radios_2ghz_tx_packet_error_rate"),
    118: .standard(proto: "radios_2ghz_tx_airtime_fraction"),
    119: .standard(proto: "radios_5ghz_channel"),
    120: .standard(proto: "radios_5ghz_antenna1_rssi"),
    121: .standard(proto: "radios_5ghz_antenna2_rssi"),
    122: .standard(proto: "radios_5ghz_antenna3_rssi"),
    123: .standard(proto: "radios_5ghz_iface_count"),
    124: .standard(proto: "radios_5ghz_chan_busy_fraction"),
    125: .standard(proto: "radios_5ghz_edcca_fraction"),
    126: .standard(proto: "radios_5ghz_overlapping_bss_fraction"),
    127: .standard(proto: "radios_5ghz_rx_bytes"),
    128: .standard(proto: "radios_5ghz_rx_packets"),
    129: .standard(proto: "radios_5ghz_rx_errors"),
    130: .standard(proto: "radios_5ghz_rx_frame_errors"),
    131: .standard(proto: "radios_5ghz_rx_packet_error_rate"),
    132: .standard(proto: "radios_5ghz_rx_airtime_fraction"),
    133: .standard(proto: "radios_5ghz_tx_bytes"),
    134: .standard(proto: "radios_5ghz_tx_packets"),
    135: .standard(proto: "radios_5ghz_tx_errors"),
    136: .standard(proto: "radios_5ghz_tx_packet_error_rate"),
    137: .standard(proto: "radios_5ghz_tx_airtime_fraction"),
    200: .standard(proto: "radios_2ghz_thermal_temp"),
    201: .standard(proto: "radios_5ghz_thermal_temp"),
    202: .standard(proto: "radios_2ghz_thermal_duty_cycle"),
    203: .standard(proto: "radios_5ghz_thermal_duty_cycle"),
    204: .standard(proto: "radios_2ghz_thermal_throttled_seconds"),
    205: .standard(proto: "radios_5ghz_thermal_throttled_seconds"),
    300: .standard(proto: "ifaces_lan_eth_rx_bytes"),
    301: .standard(proto: "ifaces_lan_eth_rx_packets"),
    302: .standard(proto: "ifaces_lan_eth_rx_errors"),
    303: .standard(proto: "ifaces_lan_eth_rx_frame_errors"),
    304: .standard(proto: "ifaces_lan_eth_tx_bytes"),
    305: .standard(proto: "ifaces_lan_eth_tx_packets"),
    306: .standard(proto: "ifaces_lan_eth_tx_errors"),
    307: .standard(proto: "ifaces_wan_eth_rx_bytes"),
    308: .standard(proto: "ifaces_wan_eth_rx_packets"),
    309: .standard(proto: "ifaces_wan_eth_rx_errors"),
    310: .standard(proto: "ifaces_wan_eth_rx_frame_errors"),
    311: .standard(proto: "ifaces_wan_eth_tx_bytes"),
    312: .standard(proto: "ifaces_wan_eth_tx_packets"),
    313: .standard(proto: "ifaces_wan_eth_tx_errors"),
    400: .same(proto: "clients"),
    401: .standard(proto: "clients_2ghz"),
    402: .standard(proto: "clients_5ghz"),
    403: .standard(proto: "clients_eth"),
    404: .standard(proto: "clients_repeater"),
    405: .standard(proto: "clients_repeater_2ghz"),
    406: .standard(proto: "clients_repeater_5ghz"),
    407: .standard(proto: "clients_repeater_eth"),
    408: .standard(proto: "mesh_hops"),
    409: .standard(proto: "mesh_one_hop_rssi_avg_2ghz"),
    410: .standard(proto: "mesh_one_hop_rssi_avg_5ghz"),
    411: .standard(proto: "mesh_two_hop_rssi_avg_2ghz"),
    412: .standard(proto: "mesh_two_hop_rssi_avg_5ghz"),
    600: .standard(proto: "ping_seconds_since_last_1s_outage"),
    601: .standard(proto: "ping_seconds_since_last_2s_outage"),
    602: .standard(proto: "ping_seconds_since_last_5s_outage"),
    603: .standard(proto: "ping_seconds_since_last_60s_outage"),
    604: .standard(proto: "ping_seconds_since_last_300s_outage"),
    605: .standard(proto: "ping_drop_rate"),
    606: .standard(proto: "ping_drop_rate_last_1h"),
    607: .standard(proto: "ping_latency"),
    610: .standard(proto: "ping_dish_seconds_since_last_1s_outage"),
    611: .standard(proto: "ping_dish_seconds_since_last_2s_outage"),
    612: .standard(proto: "ping_dish_seconds_since_last_5s_outage"),
    613: .standard(proto: "ping_dish_seconds_since_last_60s_outage"),
    614: .standard(proto: "ping_dish_seconds_since_last_300s_outage"),
    615: .standard(proto: "ping_dish_drop_rate"),
    616: .standard(proto: "ping_dish_drop_rate_last_1h"),
    617: .standard(proto: "ping_dish_latency"),
    700: .standard(proto: "client_speedtest_router_download_mbps"),
    701: .standard(proto: "client_speedtest_router_upload_mbps"),
    702: .standard(proto: "client_speedtest_router_rssi"),
    703: .standard(proto: "client_speedtest_wifi_download_mbps"),
    704: .standard(proto: "client_speedtest_wifi_upload_mbps"),
    705: .standard(proto: "client_speedtest_client_download_mbps"),
    706: .standard(proto: "client_speedtest_client_upload_mbps"),
    707: .standard(proto: "client_speedtest_client_rssi"),
    708: .standard(proto: "client_speedtest_client_iface"),
    709: .standard(proto: "client_speedtest_client_oui"),
    710: .standard(proto: "client_speedtest_client_tx_rate"),
    711: .standard(proto: "client_speedtest_client_rx_rate"),
    712: .standard(proto: "client_speedtest_client_platform_type"),
    800: .standard(proto: "speedtest_tcp_8_download_mbps_avg"),
    801: .standard(proto: "speedtest_tcp_8_download_mbps_max"),
    802: .standard(proto: "speedtest_tcp_8_upload_mbps_avg"),
    803: .standard(proto: "speedtest_tcp_8_upload_mbps_max"),
    804: .standard(proto: "speedtest_tcp_64_download_mbps_avg"),
    805: .standard(proto: "speedtest_tcp_64_download_mbps_max"),
    806: .standard(proto: "speedtest_tcp_64_upload_mbps_avg"),
    807: .standard(proto: "speedtest_tcp_64_upload_mbps_max"),
    900: .standard(proto: "dish_cell_id"),
    1000: .standard(proto: "config_setup_complete"),
    1001: .standard(proto: "config_bands_split"),
    1002: .standard(proto: "config_is_repeater"),
    1003: .standard(proto: "config_open_network"),
    1004: .standard(proto: "config_is_aviation"),
    1005: .standard(proto: "config_secure_dns"),
    1006: .standard(proto: "config_legacy"),
    1007: .standard(proto: "config_ap_mode"),
    1008: .standard(proto: "config_dfs_enabled"),
    1009: .standard(proto: "config_network_name_is_default"),
    1010: .standard(proto: "config_remote_ssh_enabled"),
  ]

  fileprivate class _StorageClass {
    var _id: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _timestampDate: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _timestampHour: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysHwGen: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysSw: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _sysCountry: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _sysIsDev: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysAllocFds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysCpuUsage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _sysMemFreeKb: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _sysBootcount: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _sysPartitionsEqual: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _sysUptimeSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _sysAntiRollbackVersion: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _radios2GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios2GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzChannel: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzAntenna1Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna2Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzAntenna3Rssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzIfaceCount: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzChanBusyFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzEdccaFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzOverlappingBssFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzRxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzRxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzTxPacketErrorRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzTxAirtimeFraction: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzThermalTemp: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios5GhzThermalDutyCycle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radios2GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _radios5GhzThermalThrottledSeconds: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesLanEthTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthRxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthRxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthRxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthRxFrameErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthTxBytes: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthTxPackets: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _ifacesWanEthTxErrors: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clients5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsEth: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater2Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeater5Ghz: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientsRepeaterEth: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _meshHops: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _meshOneHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshOneHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTwoHopRssiAvg2Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _meshTwoHopRssiAvg5Ghz: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDropRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingLatency: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast1SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast2SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast5SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast60SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishSecondsSinceLast300SOutage: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishDropRate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishDropRateLast1H: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _pingDishLatency: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestRouterRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestWifiDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestWifiUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientDownloadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientUploadMbps: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientRssi: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _clientSpeedtestClientIface: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientOui: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _clientSpeedtestClientTxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientRxRate: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _clientSpeedtestClientPlatformType: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _speedtestTcp8DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp8UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64DownloadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64DownloadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64UploadMbpsAvg: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _speedtestTcp64UploadMbpsMax: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _dishCellID: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _configSetupComplete: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configBandsSplit: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsRepeater: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configOpenNetwork: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configIsAviation: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configSecureDns: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configLegacy: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configApMode: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configDfsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configNetworkNameIsDefault: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _configRemoteSshEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _timestampDate = source._timestampDate
      _timestampHour = source._timestampHour
      _sysHwGen = source._sysHwGen
      _sysSw = source._sysSw
      _sysCountry = source._sysCountry
      _sysIsDev = source._sysIsDev
      _sysAllocFds = source._sysAllocFds
      _sysCpuUsage = source._sysCpuUsage
      _sysMemFreeKb = source._sysMemFreeKb
      _sysBootcount = source._sysBootcount
      _sysPartitionsEqual = source._sysPartitionsEqual
      _sysUptimeSeconds = source._sysUptimeSeconds
      _sysAntiRollbackVersion = source._sysAntiRollbackVersion
      _radios2GhzChannel = source._radios2GhzChannel
      _radios2GhzAntenna1Rssi = source._radios2GhzAntenna1Rssi
      _radios2GhzAntenna2Rssi = source._radios2GhzAntenna2Rssi
      _radios2GhzAntenna3Rssi = source._radios2GhzAntenna3Rssi
      _radios2GhzIfaceCount = source._radios2GhzIfaceCount
      _radios2GhzChanBusyFraction = source._radios2GhzChanBusyFraction
      _radios2GhzEdccaFraction = source._radios2GhzEdccaFraction
      _radios2GhzOverlappingBssFraction = source._radios2GhzOverlappingBssFraction
      _radios2GhzRxBytes = source._radios2GhzRxBytes
      _radios2GhzRxPackets = source._radios2GhzRxPackets
      _radios2GhzRxErrors = source._radios2GhzRxErrors
      _radios2GhzRxFrameErrors = source._radios2GhzRxFrameErrors
      _radios2GhzRxPacketErrorRate = source._radios2GhzRxPacketErrorRate
      _radios2GhzRxAirtimeFraction = source._radios2GhzRxAirtimeFraction
      _radios2GhzTxBytes = source._radios2GhzTxBytes
      _radios2GhzTxPackets = source._radios2GhzTxPackets
      _radios2GhzTxErrors = source._radios2GhzTxErrors
      _radios2GhzTxPacketErrorRate = source._radios2GhzTxPacketErrorRate
      _radios2GhzTxAirtimeFraction = source._radios2GhzTxAirtimeFraction
      _radios5GhzChannel = source._radios5GhzChannel
      _radios5GhzAntenna1Rssi = source._radios5GhzAntenna1Rssi
      _radios5GhzAntenna2Rssi = source._radios5GhzAntenna2Rssi
      _radios5GhzAntenna3Rssi = source._radios5GhzAntenna3Rssi
      _radios5GhzIfaceCount = source._radios5GhzIfaceCount
      _radios5GhzChanBusyFraction = source._radios5GhzChanBusyFraction
      _radios5GhzEdccaFraction = source._radios5GhzEdccaFraction
      _radios5GhzOverlappingBssFraction = source._radios5GhzOverlappingBssFraction
      _radios5GhzRxBytes = source._radios5GhzRxBytes
      _radios5GhzRxPackets = source._radios5GhzRxPackets
      _radios5GhzRxErrors = source._radios5GhzRxErrors
      _radios5GhzRxFrameErrors = source._radios5GhzRxFrameErrors
      _radios5GhzRxPacketErrorRate = source._radios5GhzRxPacketErrorRate
      _radios5GhzRxAirtimeFraction = source._radios5GhzRxAirtimeFraction
      _radios5GhzTxBytes = source._radios5GhzTxBytes
      _radios5GhzTxPackets = source._radios5GhzTxPackets
      _radios5GhzTxErrors = source._radios5GhzTxErrors
      _radios5GhzTxPacketErrorRate = source._radios5GhzTxPacketErrorRate
      _radios5GhzTxAirtimeFraction = source._radios5GhzTxAirtimeFraction
      _radios2GhzThermalTemp = source._radios2GhzThermalTemp
      _radios5GhzThermalTemp = source._radios5GhzThermalTemp
      _radios2GhzThermalDutyCycle = source._radios2GhzThermalDutyCycle
      _radios5GhzThermalDutyCycle = source._radios5GhzThermalDutyCycle
      _radios2GhzThermalThrottledSeconds = source._radios2GhzThermalThrottledSeconds
      _radios5GhzThermalThrottledSeconds = source._radios5GhzThermalThrottledSeconds
      _ifacesLanEthRxBytes = source._ifacesLanEthRxBytes
      _ifacesLanEthRxPackets = source._ifacesLanEthRxPackets
      _ifacesLanEthRxErrors = source._ifacesLanEthRxErrors
      _ifacesLanEthRxFrameErrors = source._ifacesLanEthRxFrameErrors
      _ifacesLanEthTxBytes = source._ifacesLanEthTxBytes
      _ifacesLanEthTxPackets = source._ifacesLanEthTxPackets
      _ifacesLanEthTxErrors = source._ifacesLanEthTxErrors
      _ifacesWanEthRxBytes = source._ifacesWanEthRxBytes
      _ifacesWanEthRxPackets = source._ifacesWanEthRxPackets
      _ifacesWanEthRxErrors = source._ifacesWanEthRxErrors
      _ifacesWanEthRxFrameErrors = source._ifacesWanEthRxFrameErrors
      _ifacesWanEthTxBytes = source._ifacesWanEthTxBytes
      _ifacesWanEthTxPackets = source._ifacesWanEthTxPackets
      _ifacesWanEthTxErrors = source._ifacesWanEthTxErrors
      _clients = source._clients
      _clients2Ghz = source._clients2Ghz
      _clients5Ghz = source._clients5Ghz
      _clientsEth = source._clientsEth
      _clientsRepeater = source._clientsRepeater
      _clientsRepeater2Ghz = source._clientsRepeater2Ghz
      _clientsRepeater5Ghz = source._clientsRepeater5Ghz
      _clientsRepeaterEth = source._clientsRepeaterEth
      _meshHops = source._meshHops
      _meshOneHopRssiAvg2Ghz = source._meshOneHopRssiAvg2Ghz
      _meshOneHopRssiAvg5Ghz = source._meshOneHopRssiAvg5Ghz
      _meshTwoHopRssiAvg2Ghz = source._meshTwoHopRssiAvg2Ghz
      _meshTwoHopRssiAvg5Ghz = source._meshTwoHopRssiAvg5Ghz
      _pingSecondsSinceLast1SOutage = source._pingSecondsSinceLast1SOutage
      _pingSecondsSinceLast2SOutage = source._pingSecondsSinceLast2SOutage
      _pingSecondsSinceLast5SOutage = source._pingSecondsSinceLast5SOutage
      _pingSecondsSinceLast60SOutage = source._pingSecondsSinceLast60SOutage
      _pingSecondsSinceLast300SOutage = source._pingSecondsSinceLast300SOutage
      _pingDropRate = source._pingDropRate
      _pingDropRateLast1H = source._pingDropRateLast1H
      _pingLatency = source._pingLatency
      _pingDishSecondsSinceLast1SOutage = source._pingDishSecondsSinceLast1SOutage
      _pingDishSecondsSinceLast2SOutage = source._pingDishSecondsSinceLast2SOutage
      _pingDishSecondsSinceLast5SOutage = source._pingDishSecondsSinceLast5SOutage
      _pingDishSecondsSinceLast60SOutage = source._pingDishSecondsSinceLast60SOutage
      _pingDishSecondsSinceLast300SOutage = source._pingDishSecondsSinceLast300SOutage
      _pingDishDropRate = source._pingDishDropRate
      _pingDishDropRateLast1H = source._pingDishDropRateLast1H
      _pingDishLatency = source._pingDishLatency
      _clientSpeedtestRouterDownloadMbps = source._clientSpeedtestRouterDownloadMbps
      _clientSpeedtestRouterUploadMbps = source._clientSpeedtestRouterUploadMbps
      _clientSpeedtestRouterRssi = source._clientSpeedtestRouterRssi
      _clientSpeedtestWifiDownloadMbps = source._clientSpeedtestWifiDownloadMbps
      _clientSpeedtestWifiUploadMbps = source._clientSpeedtestWifiUploadMbps
      _clientSpeedtestClientDownloadMbps = source._clientSpeedtestClientDownloadMbps
      _clientSpeedtestClientUploadMbps = source._clientSpeedtestClientUploadMbps
      _clientSpeedtestClientRssi = source._clientSpeedtestClientRssi
      _clientSpeedtestClientIface = source._clientSpeedtestClientIface
      _clientSpeedtestClientOui = source._clientSpeedtestClientOui
      _clientSpeedtestClientTxRate = source._clientSpeedtestClientTxRate
      _clientSpeedtestClientRxRate = source._clientSpeedtestClientRxRate
      _clientSpeedtestClientPlatformType = source._clientSpeedtestClientPlatformType
      _speedtestTcp8DownloadMbpsAvg = source._speedtestTcp8DownloadMbpsAvg
      _speedtestTcp8DownloadMbpsMax = source._speedtestTcp8DownloadMbpsMax
      _speedtestTcp8UploadMbpsAvg = source._speedtestTcp8UploadMbpsAvg
      _speedtestTcp8UploadMbpsMax = source._speedtestTcp8UploadMbpsMax
      _speedtestTcp64DownloadMbpsAvg = source._speedtestTcp64DownloadMbpsAvg
      _speedtestTcp64DownloadMbpsMax = source._speedtestTcp64DownloadMbpsMax
      _speedtestTcp64UploadMbpsAvg = source._speedtestTcp64UploadMbpsAvg
      _speedtestTcp64UploadMbpsMax = source._speedtestTcp64UploadMbpsMax
      _dishCellID = source._dishCellID
      _configSetupComplete = source._configSetupComplete
      _configBandsSplit = source._configBandsSplit
      _configIsRepeater = source._configIsRepeater
      _configOpenNetwork = source._configOpenNetwork
      _configIsAviation = source._configIsAviation
      _configSecureDns = source._configSecureDns
      _configLegacy = source._configLegacy
      _configApMode = source._configApMode
      _configDfsEnabled = source._configDfsEnabled
      _configNetworkNameIsDefault = source._configNetworkNameIsDefault
      _configRemoteSshEnabled = source._configRemoteSshEnabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._timestampDate) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._timestampHour) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._sysHwGen) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._sysSw) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._sysCountry) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._sysIsDev) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._sysAllocFds) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._sysCpuUsage) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._sysMemFreeKb) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._sysBootcount) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._sysPartitionsEqual) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._sysUptimeSeconds) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._sysAntiRollbackVersion) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzChannel) }()
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna1Rssi) }()
        case 102: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna2Rssi) }()
        case 103: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzAntenna3Rssi) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzIfaceCount) }()
        case 105: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzChanBusyFraction) }()
        case 106: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzEdccaFraction) }()
        case 107: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzOverlappingBssFraction) }()
        case 108: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxBytes) }()
        case 109: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxPackets) }()
        case 110: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxErrors) }()
        case 111: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxFrameErrors) }()
        case 112: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxPacketErrorRate) }()
        case 113: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzRxAirtimeFraction) }()
        case 114: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxBytes) }()
        case 115: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxPackets) }()
        case 116: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxErrors) }()
        case 117: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxPacketErrorRate) }()
        case 118: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzTxAirtimeFraction) }()
        case 119: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzChannel) }()
        case 120: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna1Rssi) }()
        case 121: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna2Rssi) }()
        case 122: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzAntenna3Rssi) }()
        case 123: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzIfaceCount) }()
        case 124: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzChanBusyFraction) }()
        case 125: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzEdccaFraction) }()
        case 126: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzOverlappingBssFraction) }()
        case 127: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxBytes) }()
        case 128: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxPackets) }()
        case 129: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxErrors) }()
        case 130: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxFrameErrors) }()
        case 131: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxPacketErrorRate) }()
        case 132: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzRxAirtimeFraction) }()
        case 133: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxBytes) }()
        case 134: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxPackets) }()
        case 135: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxErrors) }()
        case 136: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxPacketErrorRate) }()
        case 137: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzTxAirtimeFraction) }()
        case 200: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalTemp) }()
        case 201: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalTemp) }()
        case 202: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalDutyCycle) }()
        case 203: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalDutyCycle) }()
        case 204: try { try decoder.decodeSingularMessageField(value: &_storage._radios2GhzThermalThrottledSeconds) }()
        case 205: try { try decoder.decodeSingularMessageField(value: &_storage._radios5GhzThermalThrottledSeconds) }()
        case 300: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxBytes) }()
        case 301: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxPackets) }()
        case 302: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxErrors) }()
        case 303: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthRxFrameErrors) }()
        case 304: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxBytes) }()
        case 305: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxPackets) }()
        case 306: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesLanEthTxErrors) }()
        case 307: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxBytes) }()
        case 308: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxPackets) }()
        case 309: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxErrors) }()
        case 310: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthRxFrameErrors) }()
        case 311: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxBytes) }()
        case 312: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxPackets) }()
        case 313: try { try decoder.decodeSingularMessageField(value: &_storage._ifacesWanEthTxErrors) }()
        case 400: try { try decoder.decodeSingularMessageField(value: &_storage._clients) }()
        case 401: try { try decoder.decodeSingularMessageField(value: &_storage._clients2Ghz) }()
        case 402: try { try decoder.decodeSingularMessageField(value: &_storage._clients5Ghz) }()
        case 403: try { try decoder.decodeSingularMessageField(value: &_storage._clientsEth) }()
        case 404: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater) }()
        case 405: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater2Ghz) }()
        case 406: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeater5Ghz) }()
        case 407: try { try decoder.decodeSingularMessageField(value: &_storage._clientsRepeaterEth) }()
        case 408: try { try decoder.decodeSingularMessageField(value: &_storage._meshHops) }()
        case 409: try { try decoder.decodeSingularMessageField(value: &_storage._meshOneHopRssiAvg2Ghz) }()
        case 410: try { try decoder.decodeSingularMessageField(value: &_storage._meshOneHopRssiAvg5Ghz) }()
        case 411: try { try decoder.decodeSingularMessageField(value: &_storage._meshTwoHopRssiAvg2Ghz) }()
        case 412: try { try decoder.decodeSingularMessageField(value: &_storage._meshTwoHopRssiAvg5Ghz) }()
        case 600: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast1SOutage) }()
        case 601: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast2SOutage) }()
        case 602: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast5SOutage) }()
        case 603: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast60SOutage) }()
        case 604: try { try decoder.decodeSingularMessageField(value: &_storage._pingSecondsSinceLast300SOutage) }()
        case 605: try { try decoder.decodeSingularMessageField(value: &_storage._pingDropRate) }()
        case 606: try { try decoder.decodeSingularMessageField(value: &_storage._pingDropRateLast1H) }()
        case 607: try { try decoder.decodeSingularMessageField(value: &_storage._pingLatency) }()
        case 610: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast1SOutage) }()
        case 611: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast2SOutage) }()
        case 612: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast5SOutage) }()
        case 613: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast60SOutage) }()
        case 614: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishSecondsSinceLast300SOutage) }()
        case 615: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishDropRate) }()
        case 616: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishDropRateLast1H) }()
        case 617: try { try decoder.decodeSingularMessageField(value: &_storage._pingDishLatency) }()
        case 700: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterDownloadMbps) }()
        case 701: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterUploadMbps) }()
        case 702: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestRouterRssi) }()
        case 703: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestWifiDownloadMbps) }()
        case 704: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestWifiUploadMbps) }()
        case 705: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientDownloadMbps) }()
        case 706: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientUploadMbps) }()
        case 707: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientRssi) }()
        case 708: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientIface) }()
        case 709: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientOui) }()
        case 710: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientTxRate) }()
        case 711: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientRxRate) }()
        case 712: try { try decoder.decodeSingularMessageField(value: &_storage._clientSpeedtestClientPlatformType) }()
        case 800: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8DownloadMbpsAvg) }()
        case 801: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8DownloadMbpsMax) }()
        case 802: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8UploadMbpsAvg) }()
        case 803: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp8UploadMbpsMax) }()
        case 804: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64DownloadMbpsAvg) }()
        case 805: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64DownloadMbpsMax) }()
        case 806: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64UploadMbpsAvg) }()
        case 807: try { try decoder.decodeSingularMessageField(value: &_storage._speedtestTcp64UploadMbpsMax) }()
        case 900: try { try decoder.decodeSingularMessageField(value: &_storage._dishCellID) }()
        case 1000: try { try decoder.decodeSingularMessageField(value: &_storage._configSetupComplete) }()
        case 1001: try { try decoder.decodeSingularMessageField(value: &_storage._configBandsSplit) }()
        case 1002: try { try decoder.decodeSingularMessageField(value: &_storage._configIsRepeater) }()
        case 1003: try { try decoder.decodeSingularMessageField(value: &_storage._configOpenNetwork) }()
        case 1004: try { try decoder.decodeSingularMessageField(value: &_storage._configIsAviation) }()
        case 1005: try { try decoder.decodeSingularMessageField(value: &_storage._configSecureDns) }()
        case 1006: try { try decoder.decodeSingularMessageField(value: &_storage._configLegacy) }()
        case 1007: try { try decoder.decodeSingularMessageField(value: &_storage._configApMode) }()
        case 1008: try { try decoder.decodeSingularMessageField(value: &_storage._configDfsEnabled) }()
        case 1009: try { try decoder.decodeSingularMessageField(value: &_storage._configNetworkNameIsDefault) }()
        case 1010: try { try decoder.decodeSingularMessageField(value: &_storage._configRemoteSshEnabled) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._timestampDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._timestampHour {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._sysHwGen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._sysSw {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sysCountry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._sysIsDev {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._sysAllocFds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._sysCpuUsage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._sysMemFreeKb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._sysBootcount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._sysPartitionsEqual {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._sysUptimeSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._sysAntiRollbackVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._radios2GhzChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._radios2GhzAntenna1Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._radios2GhzAntenna2Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._radios2GhzAntenna3Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._radios2GhzIfaceCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._radios2GhzChanBusyFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._radios2GhzEdccaFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      } }()
      try { if let v = _storage._radios2GhzOverlappingBssFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      } }()
      try { if let v = _storage._radios2GhzRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      } }()
      try { if let v = _storage._radios2GhzRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      } }()
      try { if let v = _storage._radios2GhzRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      } }()
      try { if let v = _storage._radios2GhzRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      } }()
      try { if let v = _storage._radios2GhzRxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      } }()
      try { if let v = _storage._radios2GhzRxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
      } }()
      try { if let v = _storage._radios2GhzTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
      } }()
      try { if let v = _storage._radios2GhzTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
      } }()
      try { if let v = _storage._radios2GhzTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
      } }()
      try { if let v = _storage._radios2GhzTxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      } }()
      try { if let v = _storage._radios2GhzTxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
      } }()
      try { if let v = _storage._radios5GhzChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 119)
      } }()
      try { if let v = _storage._radios5GhzAntenna1Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 120)
      } }()
      try { if let v = _storage._radios5GhzAntenna2Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 121)
      } }()
      try { if let v = _storage._radios5GhzAntenna3Rssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 122)
      } }()
      try { if let v = _storage._radios5GhzIfaceCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
      } }()
      try { if let v = _storage._radios5GhzChanBusyFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
      } }()
      try { if let v = _storage._radios5GhzEdccaFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 125)
      } }()
      try { if let v = _storage._radios5GhzOverlappingBssFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 126)
      } }()
      try { if let v = _storage._radios5GhzRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 127)
      } }()
      try { if let v = _storage._radios5GhzRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 128)
      } }()
      try { if let v = _storage._radios5GhzRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 129)
      } }()
      try { if let v = _storage._radios5GhzRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 130)
      } }()
      try { if let v = _storage._radios5GhzRxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 131)
      } }()
      try { if let v = _storage._radios5GhzRxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 132)
      } }()
      try { if let v = _storage._radios5GhzTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 133)
      } }()
      try { if let v = _storage._radios5GhzTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 134)
      } }()
      try { if let v = _storage._radios5GhzTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 135)
      } }()
      try { if let v = _storage._radios5GhzTxPacketErrorRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 136)
      } }()
      try { if let v = _storage._radios5GhzTxAirtimeFraction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 137)
      } }()
      try { if let v = _storage._radios2GhzThermalTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
      } }()
      try { if let v = _storage._radios5GhzThermalTemp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      } }()
      try { if let v = _storage._radios2GhzThermalDutyCycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
      } }()
      try { if let v = _storage._radios5GhzThermalDutyCycle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 203)
      } }()
      try { if let v = _storage._radios2GhzThermalThrottledSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
      } }()
      try { if let v = _storage._radios5GhzThermalThrottledSeconds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 205)
      } }()
      try { if let v = _storage._ifacesLanEthRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 300)
      } }()
      try { if let v = _storage._ifacesLanEthRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      } }()
      try { if let v = _storage._ifacesLanEthRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 302)
      } }()
      try { if let v = _storage._ifacesLanEthRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 303)
      } }()
      try { if let v = _storage._ifacesLanEthTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 304)
      } }()
      try { if let v = _storage._ifacesLanEthTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 305)
      } }()
      try { if let v = _storage._ifacesLanEthTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 306)
      } }()
      try { if let v = _storage._ifacesWanEthRxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 307)
      } }()
      try { if let v = _storage._ifacesWanEthRxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 308)
      } }()
      try { if let v = _storage._ifacesWanEthRxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 309)
      } }()
      try { if let v = _storage._ifacesWanEthRxFrameErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 310)
      } }()
      try { if let v = _storage._ifacesWanEthTxBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 311)
      } }()
      try { if let v = _storage._ifacesWanEthTxPackets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 312)
      } }()
      try { if let v = _storage._ifacesWanEthTxErrors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 313)
      } }()
      try { if let v = _storage._clients {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 400)
      } }()
      try { if let v = _storage._clients2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 401)
      } }()
      try { if let v = _storage._clients5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 402)
      } }()
      try { if let v = _storage._clientsEth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 403)
      } }()
      try { if let v = _storage._clientsRepeater {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 404)
      } }()
      try { if let v = _storage._clientsRepeater2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 405)
      } }()
      try { if let v = _storage._clientsRepeater5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 406)
      } }()
      try { if let v = _storage._clientsRepeaterEth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 407)
      } }()
      try { if let v = _storage._meshHops {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 408)
      } }()
      try { if let v = _storage._meshOneHopRssiAvg2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 409)
      } }()
      try { if let v = _storage._meshOneHopRssiAvg5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 410)
      } }()
      try { if let v = _storage._meshTwoHopRssiAvg2Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 411)
      } }()
      try { if let v = _storage._meshTwoHopRssiAvg5Ghz {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 412)
      } }()
      try { if let v = _storage._pingSecondsSinceLast1SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 600)
      } }()
      try { if let v = _storage._pingSecondsSinceLast2SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 601)
      } }()
      try { if let v = _storage._pingSecondsSinceLast5SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 602)
      } }()
      try { if let v = _storage._pingSecondsSinceLast60SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 603)
      } }()
      try { if let v = _storage._pingSecondsSinceLast300SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 604)
      } }()
      try { if let v = _storage._pingDropRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 605)
      } }()
      try { if let v = _storage._pingDropRateLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 606)
      } }()
      try { if let v = _storage._pingLatency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 607)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast1SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 610)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast2SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 611)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast5SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 612)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast60SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 613)
      } }()
      try { if let v = _storage._pingDishSecondsSinceLast300SOutage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 614)
      } }()
      try { if let v = _storage._pingDishDropRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 615)
      } }()
      try { if let v = _storage._pingDishDropRateLast1H {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 616)
      } }()
      try { if let v = _storage._pingDishLatency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 617)
      } }()
      try { if let v = _storage._clientSpeedtestRouterDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 700)
      } }()
      try { if let v = _storage._clientSpeedtestRouterUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 701)
      } }()
      try { if let v = _storage._clientSpeedtestRouterRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 702)
      } }()
      try { if let v = _storage._clientSpeedtestWifiDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 703)
      } }()
      try { if let v = _storage._clientSpeedtestWifiUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 704)
      } }()
      try { if let v = _storage._clientSpeedtestClientDownloadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 705)
      } }()
      try { if let v = _storage._clientSpeedtestClientUploadMbps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 706)
      } }()
      try { if let v = _storage._clientSpeedtestClientRssi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 707)
      } }()
      try { if let v = _storage._clientSpeedtestClientIface {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 708)
      } }()
      try { if let v = _storage._clientSpeedtestClientOui {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 709)
      } }()
      try { if let v = _storage._clientSpeedtestClientTxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 710)
      } }()
      try { if let v = _storage._clientSpeedtestClientRxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 711)
      } }()
      try { if let v = _storage._clientSpeedtestClientPlatformType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 712)
      } }()
      try { if let v = _storage._speedtestTcp8DownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 800)
      } }()
      try { if let v = _storage._speedtestTcp8DownloadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 801)
      } }()
      try { if let v = _storage._speedtestTcp8UploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 802)
      } }()
      try { if let v = _storage._speedtestTcp8UploadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 803)
      } }()
      try { if let v = _storage._speedtestTcp64DownloadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 804)
      } }()
      try { if let v = _storage._speedtestTcp64DownloadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 805)
      } }()
      try { if let v = _storage._speedtestTcp64UploadMbpsAvg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 806)
      } }()
      try { if let v = _storage._speedtestTcp64UploadMbpsMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 807)
      } }()
      try { if let v = _storage._dishCellID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 900)
      } }()
      try { if let v = _storage._configSetupComplete {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
      } }()
      try { if let v = _storage._configBandsSplit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
      } }()
      try { if let v = _storage._configIsRepeater {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      } }()
      try { if let v = _storage._configOpenNetwork {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
      } }()
      try { if let v = _storage._configIsAviation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1004)
      } }()
      try { if let v = _storage._configSecureDns {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1005)
      } }()
      try { if let v = _storage._configLegacy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1006)
      } }()
      try { if let v = _storage._configApMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1007)
      } }()
      try { if let v = _storage._configDfsEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1008)
      } }()
      try { if let v = _storage._configNetworkNameIsDefault {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1009)
      } }()
      try { if let v = _storage._configRemoteSshEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1010)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_starlink_router_hourly_metrics_v2, rhs: SpaceX_API_Device_starlink_router_hourly_metrics_v2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._timestampDate != rhs_storage._timestampDate {return false}
        if _storage._timestampHour != rhs_storage._timestampHour {return false}
        if _storage._sysHwGen != rhs_storage._sysHwGen {return false}
        if _storage._sysSw != rhs_storage._sysSw {return false}
        if _storage._sysCountry != rhs_storage._sysCountry {return false}
        if _storage._sysIsDev != rhs_storage._sysIsDev {return false}
        if _storage._sysAllocFds != rhs_storage._sysAllocFds {return false}
        if _storage._sysCpuUsage != rhs_storage._sysCpuUsage {return false}
        if _storage._sysMemFreeKb != rhs_storage._sysMemFreeKb {return false}
        if _storage._sysBootcount != rhs_storage._sysBootcount {return false}
        if _storage._sysPartitionsEqual != rhs_storage._sysPartitionsEqual {return false}
        if _storage._sysUptimeSeconds != rhs_storage._sysUptimeSeconds {return false}
        if _storage._sysAntiRollbackVersion != rhs_storage._sysAntiRollbackVersion {return false}
        if _storage._radios2GhzChannel != rhs_storage._radios2GhzChannel {return false}
        if _storage._radios2GhzAntenna1Rssi != rhs_storage._radios2GhzAntenna1Rssi {return false}
        if _storage._radios2GhzAntenna2Rssi != rhs_storage._radios2GhzAntenna2Rssi {return false}
        if _storage._radios2GhzAntenna3Rssi != rhs_storage._radios2GhzAntenna3Rssi {return false}
        if _storage._radios2GhzIfaceCount != rhs_storage._radios2GhzIfaceCount {return false}
        if _storage._radios2GhzChanBusyFraction != rhs_storage._radios2GhzChanBusyFraction {return false}
        if _storage._radios2GhzEdccaFraction != rhs_storage._radios2GhzEdccaFraction {return false}
        if _storage._radios2GhzOverlappingBssFraction != rhs_storage._radios2GhzOverlappingBssFraction {return false}
        if _storage._radios2GhzRxBytes != rhs_storage._radios2GhzRxBytes {return false}
        if _storage._radios2GhzRxPackets != rhs_storage._radios2GhzRxPackets {return false}
        if _storage._radios2GhzRxErrors != rhs_storage._radios2GhzRxErrors {return false}
        if _storage._radios2GhzRxFrameErrors != rhs_storage._radios2GhzRxFrameErrors {return false}
        if _storage._radios2GhzRxPacketErrorRate != rhs_storage._radios2GhzRxPacketErrorRate {return false}
        if _storage._radios2GhzRxAirtimeFraction != rhs_storage._radios2GhzRxAirtimeFraction {return false}
        if _storage._radios2GhzTxBytes != rhs_storage._radios2GhzTxBytes {return false}
        if _storage._radios2GhzTxPackets != rhs_storage._radios2GhzTxPackets {return false}
        if _storage._radios2GhzTxErrors != rhs_storage._radios2GhzTxErrors {return false}
        if _storage._radios2GhzTxPacketErrorRate != rhs_storage._radios2GhzTxPacketErrorRate {return false}
        if _storage._radios2GhzTxAirtimeFraction != rhs_storage._radios2GhzTxAirtimeFraction {return false}
        if _storage._radios5GhzChannel != rhs_storage._radios5GhzChannel {return false}
        if _storage._radios5GhzAntenna1Rssi != rhs_storage._radios5GhzAntenna1Rssi {return false}
        if _storage._radios5GhzAntenna2Rssi != rhs_storage._radios5GhzAntenna2Rssi {return false}
        if _storage._radios5GhzAntenna3Rssi != rhs_storage._radios5GhzAntenna3Rssi {return false}
        if _storage._radios5GhzIfaceCount != rhs_storage._radios5GhzIfaceCount {return false}
        if _storage._radios5GhzChanBusyFraction != rhs_storage._radios5GhzChanBusyFraction {return false}
        if _storage._radios5GhzEdccaFraction != rhs_storage._radios5GhzEdccaFraction {return false}
        if _storage._radios5GhzOverlappingBssFraction != rhs_storage._radios5GhzOverlappingBssFraction {return false}
        if _storage._radios5GhzRxBytes != rhs_storage._radios5GhzRxBytes {return false}
        if _storage._radios5GhzRxPackets != rhs_storage._radios5GhzRxPackets {return false}
        if _storage._radios5GhzRxErrors != rhs_storage._radios5GhzRxErrors {return false}
        if _storage._radios5GhzRxFrameErrors != rhs_storage._radios5GhzRxFrameErrors {return false}
        if _storage._radios5GhzRxPacketErrorRate != rhs_storage._radios5GhzRxPacketErrorRate {return false}
        if _storage._radios5GhzRxAirtimeFraction != rhs_storage._radios5GhzRxAirtimeFraction {return false}
        if _storage._radios5GhzTxBytes != rhs_storage._radios5GhzTxBytes {return false}
        if _storage._radios5GhzTxPackets != rhs_storage._radios5GhzTxPackets {return false}
        if _storage._radios5GhzTxErrors != rhs_storage._radios5GhzTxErrors {return false}
        if _storage._radios5GhzTxPacketErrorRate != rhs_storage._radios5GhzTxPacketErrorRate {return false}
        if _storage._radios5GhzTxAirtimeFraction != rhs_storage._radios5GhzTxAirtimeFraction {return false}
        if _storage._radios2GhzThermalTemp != rhs_storage._radios2GhzThermalTemp {return false}
        if _storage._radios5GhzThermalTemp != rhs_storage._radios5GhzThermalTemp {return false}
        if _storage._radios2GhzThermalDutyCycle != rhs_storage._radios2GhzThermalDutyCycle {return false}
        if _storage._radios5GhzThermalDutyCycle != rhs_storage._radios5GhzThermalDutyCycle {return false}
        if _storage._radios2GhzThermalThrottledSeconds != rhs_storage._radios2GhzThermalThrottledSeconds {return false}
        if _storage._radios5GhzThermalThrottledSeconds != rhs_storage._radios5GhzThermalThrottledSeconds {return false}
        if _storage._ifacesLanEthRxBytes != rhs_storage._ifacesLanEthRxBytes {return false}
        if _storage._ifacesLanEthRxPackets != rhs_storage._ifacesLanEthRxPackets {return false}
        if _storage._ifacesLanEthRxErrors != rhs_storage._ifacesLanEthRxErrors {return false}
        if _storage._ifacesLanEthRxFrameErrors != rhs_storage._ifacesLanEthRxFrameErrors {return false}
        if _storage._ifacesLanEthTxBytes != rhs_storage._ifacesLanEthTxBytes {return false}
        if _storage._ifacesLanEthTxPackets != rhs_storage._ifacesLanEthTxPackets {return false}
        if _storage._ifacesLanEthTxErrors != rhs_storage._ifacesLanEthTxErrors {return false}
        if _storage._ifacesWanEthRxBytes != rhs_storage._ifacesWanEthRxBytes {return false}
        if _storage._ifacesWanEthRxPackets != rhs_storage._ifacesWanEthRxPackets {return false}
        if _storage._ifacesWanEthRxErrors != rhs_storage._ifacesWanEthRxErrors {return false}
        if _storage._ifacesWanEthRxFrameErrors != rhs_storage._ifacesWanEthRxFrameErrors {return false}
        if _storage._ifacesWanEthTxBytes != rhs_storage._ifacesWanEthTxBytes {return false}
        if _storage._ifacesWanEthTxPackets != rhs_storage._ifacesWanEthTxPackets {return false}
        if _storage._ifacesWanEthTxErrors != rhs_storage._ifacesWanEthTxErrors {return false}
        if _storage._clients != rhs_storage._clients {return false}
        if _storage._clients2Ghz != rhs_storage._clients2Ghz {return false}
        if _storage._clients5Ghz != rhs_storage._clients5Ghz {return false}
        if _storage._clientsEth != rhs_storage._clientsEth {return false}
        if _storage._clientsRepeater != rhs_storage._clientsRepeater {return false}
        if _storage._clientsRepeater2Ghz != rhs_storage._clientsRepeater2Ghz {return false}
        if _storage._clientsRepeater5Ghz != rhs_storage._clientsRepeater5Ghz {return false}
        if _storage._clientsRepeaterEth != rhs_storage._clientsRepeaterEth {return false}
        if _storage._meshHops != rhs_storage._meshHops {return false}
        if _storage._meshOneHopRssiAvg2Ghz != rhs_storage._meshOneHopRssiAvg2Ghz {return false}
        if _storage._meshOneHopRssiAvg5Ghz != rhs_storage._meshOneHopRssiAvg5Ghz {return false}
        if _storage._meshTwoHopRssiAvg2Ghz != rhs_storage._meshTwoHopRssiAvg2Ghz {return false}
        if _storage._meshTwoHopRssiAvg5Ghz != rhs_storage._meshTwoHopRssiAvg5Ghz {return false}
        if _storage._pingSecondsSinceLast1SOutage != rhs_storage._pingSecondsSinceLast1SOutage {return false}
        if _storage._pingSecondsSinceLast2SOutage != rhs_storage._pingSecondsSinceLast2SOutage {return false}
        if _storage._pingSecondsSinceLast5SOutage != rhs_storage._pingSecondsSinceLast5SOutage {return false}
        if _storage._pingSecondsSinceLast60SOutage != rhs_storage._pingSecondsSinceLast60SOutage {return false}
        if _storage._pingSecondsSinceLast300SOutage != rhs_storage._pingSecondsSinceLast300SOutage {return false}
        if _storage._pingDropRate != rhs_storage._pingDropRate {return false}
        if _storage._pingDropRateLast1H != rhs_storage._pingDropRateLast1H {return false}
        if _storage._pingLatency != rhs_storage._pingLatency {return false}
        if _storage._pingDishSecondsSinceLast1SOutage != rhs_storage._pingDishSecondsSinceLast1SOutage {return false}
        if _storage._pingDishSecondsSinceLast2SOutage != rhs_storage._pingDishSecondsSinceLast2SOutage {return false}
        if _storage._pingDishSecondsSinceLast5SOutage != rhs_storage._pingDishSecondsSinceLast5SOutage {return false}
        if _storage._pingDishSecondsSinceLast60SOutage != rhs_storage._pingDishSecondsSinceLast60SOutage {return false}
        if _storage._pingDishSecondsSinceLast300SOutage != rhs_storage._pingDishSecondsSinceLast300SOutage {return false}
        if _storage._pingDishDropRate != rhs_storage._pingDishDropRate {return false}
        if _storage._pingDishDropRateLast1H != rhs_storage._pingDishDropRateLast1H {return false}
        if _storage._pingDishLatency != rhs_storage._pingDishLatency {return false}
        if _storage._clientSpeedtestRouterDownloadMbps != rhs_storage._clientSpeedtestRouterDownloadMbps {return false}
        if _storage._clientSpeedtestRouterUploadMbps != rhs_storage._clientSpeedtestRouterUploadMbps {return false}
        if _storage._clientSpeedtestRouterRssi != rhs_storage._clientSpeedtestRouterRssi {return false}
        if _storage._clientSpeedtestWifiDownloadMbps != rhs_storage._clientSpeedtestWifiDownloadMbps {return false}
        if _storage._clientSpeedtestWifiUploadMbps != rhs_storage._clientSpeedtestWifiUploadMbps {return false}
        if _storage._clientSpeedtestClientDownloadMbps != rhs_storage._clientSpeedtestClientDownloadMbps {return false}
        if _storage._clientSpeedtestClientUploadMbps != rhs_storage._clientSpeedtestClientUploadMbps {return false}
        if _storage._clientSpeedtestClientRssi != rhs_storage._clientSpeedtestClientRssi {return false}
        if _storage._clientSpeedtestClientIface != rhs_storage._clientSpeedtestClientIface {return false}
        if _storage._clientSpeedtestClientOui != rhs_storage._clientSpeedtestClientOui {return false}
        if _storage._clientSpeedtestClientTxRate != rhs_storage._clientSpeedtestClientTxRate {return false}
        if _storage._clientSpeedtestClientRxRate != rhs_storage._clientSpeedtestClientRxRate {return false}
        if _storage._clientSpeedtestClientPlatformType != rhs_storage._clientSpeedtestClientPlatformType {return false}
        if _storage._speedtestTcp8DownloadMbpsAvg != rhs_storage._speedtestTcp8DownloadMbpsAvg {return false}
        if _storage._speedtestTcp8DownloadMbpsMax != rhs_storage._speedtestTcp8DownloadMbpsMax {return false}
        if _storage._speedtestTcp8UploadMbpsAvg != rhs_storage._speedtestTcp8UploadMbpsAvg {return false}
        if _storage._speedtestTcp8UploadMbpsMax != rhs_storage._speedtestTcp8UploadMbpsMax {return false}
        if _storage._speedtestTcp64DownloadMbpsAvg != rhs_storage._speedtestTcp64DownloadMbpsAvg {return false}
        if _storage._speedtestTcp64DownloadMbpsMax != rhs_storage._speedtestTcp64DownloadMbpsMax {return false}
        if _storage._speedtestTcp64UploadMbpsAvg != rhs_storage._speedtestTcp64UploadMbpsAvg {return false}
        if _storage._speedtestTcp64UploadMbpsMax != rhs_storage._speedtestTcp64UploadMbpsMax {return false}
        if _storage._dishCellID != rhs_storage._dishCellID {return false}
        if _storage._configSetupComplete != rhs_storage._configSetupComplete {return false}
        if _storage._configBandsSplit != rhs_storage._configBandsSplit {return false}
        if _storage._configIsRepeater != rhs_storage._configIsRepeater {return false}
        if _storage._configOpenNetwork != rhs_storage._configOpenNetwork {return false}
        if _storage._configIsAviation != rhs_storage._configIsAviation {return false}
        if _storage._configSecureDns != rhs_storage._configSecureDns {return false}
        if _storage._configLegacy != rhs_storage._configLegacy {return false}
        if _storage._configApMode != rhs_storage._configApMode {return false}
        if _storage._configDfsEnabled != rhs_storage._configDfsEnabled {return false}
        if _storage._configNetworkNameIsDefault != rhs_storage._configNetworkNameIsDefault {return false}
        if _storage._configRemoteSshEnabled != rhs_storage._configRemoteSshEnabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGuestInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGuestInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGuestInfoRequest, rhs: SpaceX_API_Device_WifiGuestInfoRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiGuestInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiGuestInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_guest"),
    2: .standard(proto: "is_online"),
    3: .standard(proto: "router_hardware_version"),
    4: .standard(proto: "dish_hardware_version"),
    5: .standard(proto: "is_router_aviation_conformed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isGuest) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isOnline) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.routerHardwareVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dishHardwareVersion) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isRouterAviationConformed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isGuest != false {
      try visitor.visitSingularBoolField(value: self.isGuest, fieldNumber: 1)
    }
    if self.isOnline != false {
      try visitor.visitSingularBoolField(value: self.isOnline, fieldNumber: 2)
    }
    if !self.routerHardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.routerHardwareVersion, fieldNumber: 3)
    }
    if !self.dishHardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.dishHardwareVersion, fieldNumber: 4)
    }
    if self.isRouterAviationConformed != false {
      try visitor.visitSingularBoolField(value: self.isRouterAviationConformed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiGuestInfoResponse, rhs: SpaceX_API_Device_WifiGuestInfoResponse) -> Bool {
    if lhs.isGuest != rhs.isGuest {return false}
    if lhs.isOnline != rhs.isOnline {return false}
    if lhs.routerHardwareVersion != rhs.routerHardwareVersion {return false}
    if lhs.dishHardwareVersion != rhs.dishHardwareVersion {return false}
    if lhs.isRouterAviationConformed != rhs.isRouterAviationConformed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiFactoryTestCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiFactoryTestCommandRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iwpriv_command"),
    2: .standard(proto: "ip_link_set_command"),
    3: .standard(proto: "ip_addr_set_command"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SpaceX_API_Device_IwprivCommand?
        var hadOneofValue = false
        if let current = self.command {
          hadOneofValue = true
          if case .iwprivCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.command = .iwprivCommand(v)
        }
      }()
      case 2: try {
        var v: SpaceX_API_Device_IpLinkSetCommand?
        var hadOneofValue = false
        if let current = self.command {
          hadOneofValue = true
          if case .ipLinkSetCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.command = .ipLinkSetCommand(v)
        }
      }()
      case 3: try {
        var v: SpaceX_API_Device_IpAddrSetCommand?
        var hadOneofValue = false
        if let current = self.command {
          hadOneofValue = true
          if case .ipAddrSetCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.command = .ipAddrSetCommand(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.command {
    case .iwprivCommand?: try {
      guard case .iwprivCommand(let v)? = self.command else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .ipLinkSetCommand?: try {
      guard case .ipLinkSetCommand(let v)? = self.command else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .ipAddrSetCommand?: try {
      guard case .ipAddrSetCommand(let v)? = self.command else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiFactoryTestCommandRequest, rhs: SpaceX_API_Device_WifiFactoryTestCommandRequest) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiFactoryTestCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiFactoryTestCommandResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.response) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.response.isEmpty {
      try visitor.visitSingularStringField(value: self.response, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiFactoryTestCommandResponse, rhs: SpaceX_API_Device_WifiFactoryTestCommandResponse) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_IwprivCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IwprivCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iface"),
    2: .same(proto: "arg"),
    3: .same(proto: "ioctl"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iface) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.arg) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.ioctl) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iface.isEmpty {
      try visitor.visitSingularStringField(value: self.iface, fieldNumber: 1)
    }
    if !self.arg.isEmpty {
      try visitor.visitSingularStringField(value: self.arg, fieldNumber: 2)
    }
    if self.ioctl != .set {
      try visitor.visitSingularEnumField(value: self.ioctl, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_IwprivCommand, rhs: SpaceX_API_Device_IwprivCommand) -> Bool {
    if lhs.iface != rhs.iface {return false}
    if lhs.arg != rhs.arg {return false}
    if lhs.ioctl != rhs.ioctl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_IwprivCommand.Ioctl: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IOCTL_SET"),
    1: .same(proto: "IOCTL_E2P"),
    3: .same(proto: "IOCTL_MAC"),
    4: .same(proto: "IOCTL_SX_ALLOW_5GHZ_HIGH"),
  ]
}

extension SpaceX_API_Device_IpLinkSetCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IpLinkSetCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iface"),
    2: .same(proto: "up"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iface) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.up) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iface.isEmpty {
      try visitor.visitSingularStringField(value: self.iface, fieldNumber: 1)
    }
    if self.up != false {
      try visitor.visitSingularBoolField(value: self.up, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_IpLinkSetCommand, rhs: SpaceX_API_Device_IpLinkSetCommand) -> Bool {
    if lhs.iface != rhs.iface {return false}
    if lhs.up != rhs.up {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_IpAddrSetCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IpAddrSetCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iface"),
    2: .same(proto: "add"),
    3: .same(proto: "cidr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iface) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.add) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cidr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iface.isEmpty {
      try visitor.visitSingularStringField(value: self.iface, fieldNumber: 1)
    }
    if self.add != false {
      try visitor.visitSingularBoolField(value: self.add, fieldNumber: 2)
    }
    if !self.cidr.isEmpty {
      try visitor.visitSingularStringField(value: self.cidr, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_IpAddrSetCommand, rhs: SpaceX_API_Device_IpAddrSetCommand) -> Bool {
    if lhs.iface != rhs.iface {return false}
    if lhs.add != rhs.add {return false}
    if lhs.cidr != rhs.cidr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiStartLocalTelemProxyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiStartLocalTelemProxyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "port"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.port) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiStartLocalTelemProxyRequest, rhs: SpaceX_API_Device_WifiStartLocalTelemProxyRequest) -> Bool {
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiBackhaulStatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiBackhaulStatsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiBackhaulStatsRequest, rhs: SpaceX_API_Device_WifiBackhaulStatsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiBackhaulStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiBackhaulStatsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "bssid"),
    3: .same(proto: "iface"),
    4: .same(proto: "preference"),
    5: .same(proto: "siteSurveyScan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bssid) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.iface) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.preference) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.siteSurveyScan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.bssid.isEmpty {
      try visitor.visitSingularStringField(value: self.bssid, fieldNumber: 2)
    }
    if self.iface != .unknown {
      try visitor.visitSingularEnumField(value: self.iface, fieldNumber: 3)
    }
    if self.preference != 0 {
      try visitor.visitSingularUInt32Field(value: self.preference, fieldNumber: 4)
    }
    if !self.siteSurveyScan.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.siteSurveyScan, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiBackhaulStatsResponse, rhs: SpaceX_API_Device_WifiBackhaulStatsResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.bssid != rhs.bssid {return false}
    if lhs.iface != rhs.iface {return false}
    if lhs.preference != rhs.preference {return false}
    if lhs.siteSurveyScan != rhs.siteSurveyScan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiToggleUmbilicalModeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiToggleUmbilicalModeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enable != false {
      try visitor.visitSingularBoolField(value: self.enable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiToggleUmbilicalModeRequest, rhs: SpaceX_API_Device_WifiToggleUmbilicalModeRequest) -> Bool {
    if lhs.enable != rhs.enable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
