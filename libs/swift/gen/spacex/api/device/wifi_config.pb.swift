// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/wifi_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SpaceX_API_Device_MeshAuth: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case new // = 1
  case trusted // = 2
  case untrusted // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .new
    case 2: self = .trusted
    case 3: self = .untrusted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .new: return 1
    case .trusted: return 2
    case .untrusted: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_MeshAuth] = [
    .unknown,
    .new,
    .trusted,
    .untrusted,
  ]

}

enum SpaceX_API_Device_CakeAckFilter: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case noAckFilter // = 0
  case ackFilter // = 1
  case ackFilterAggressive // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .noAckFilter
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noAckFilter
    case 1: self = .ackFilter
    case 2: self = .ackFilterAggressive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noAckFilter: return 0
    case .ackFilter: return 1
    case .ackFilterAggressive: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_CakeAckFilter] = [
    .noAckFilter,
    .ackFilter,
    .ackFilterAggressive,
  ]

}

enum SpaceX_API_Device_CakePriorityQueueParameter: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case diffserv3 // = 0
  case diffserv4 // = 1
  case precedence // = 2
  case bestEffort // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .diffserv3
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .diffserv3
    case 1: self = .diffserv4
    case 2: self = .precedence
    case 3: self = .bestEffort
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .diffserv3: return 0
    case .diffserv4: return 1
    case .precedence: return 2
    case .bestEffort: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_CakePriorityQueueParameter] = [
    .diffserv3,
    .diffserv4,
    .precedence,
    .bestEffort,
  ]

}

struct SpaceX_API_Device_MeshConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var displayName: String = String()

  var applyDisplayName: Bool = false

  var auth: SpaceX_API_Device_MeshAuth = .unknown

  var applyAuth: Bool = false

  var lastConnected: Int64 = 0

  var incarnation: UInt64 = 0

  var hardwareVersion: String = String()

  var supports5GhzHigh: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_WifiConfig: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  var applyCountryCode: Bool {
    get {return _storage._applyCountryCode}
    set {_uniqueStorage()._applyCountryCode = newValue}
  }

  var pinCountryCode: Bool {
    get {return _storage._pinCountryCode}
    set {_uniqueStorage()._pinCountryCode = newValue}
  }

  var applyPinCountryCode: Bool {
    get {return _storage._applyPinCountryCode}
    set {_uniqueStorage()._applyPinCountryCode = newValue}
  }

  var customPowerTable: Bool {
    get {return _storage._customPowerTable}
    set {_uniqueStorage()._customPowerTable = newValue}
  }

  var applyCustomPowerTable: Bool {
    get {return _storage._applyCustomPowerTable}
    set {_uniqueStorage()._applyCustomPowerTable = newValue}
  }

  var setupComplete: Bool {
    get {return _storage._setupComplete}
    set {_uniqueStorage()._setupComplete = newValue}
  }

  var applySetupComplete: Bool {
    get {return _storage._applySetupComplete}
    set {_uniqueStorage()._applySetupComplete = newValue}
  }

  var version: UInt32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  var macWan: String {
    get {return _storage._macWan}
    set {_uniqueStorage()._macWan = newValue}
  }

  var macLan: String {
    get {return _storage._macLan}
    set {_uniqueStorage()._macLan = newValue}
  }

  var channel2Ghz: UInt32 {
    get {return _storage._channel2Ghz}
    set {_uniqueStorage()._channel2Ghz = newValue}
  }

  var applyChannel2Ghz: Bool {
    get {return _storage._applyChannel2Ghz}
    set {_uniqueStorage()._applyChannel2Ghz = newValue}
  }

  var channel5Ghz: UInt32 {
    get {return _storage._channel5Ghz}
    set {_uniqueStorage()._channel5Ghz = newValue}
  }

  var applyChannel5Ghz: Bool {
    get {return _storage._applyChannel5Ghz}
    set {_uniqueStorage()._applyChannel5Ghz = newValue}
  }

  var channel5GhzHigh: UInt32 {
    get {return _storage._channel5GhzHigh}
    set {_uniqueStorage()._channel5GhzHigh = newValue}
  }

  var applyChannel5GhzHigh: Bool {
    get {return _storage._applyChannel5GhzHigh}
    set {_uniqueStorage()._applyChannel5GhzHigh = newValue}
  }

  var meshConfigs: Dictionary<String,SpaceX_API_Device_MeshConfig> {
    get {return _storage._meshConfigs}
    set {_uniqueStorage()._meshConfigs = newValue}
  }

  var meshConfigsUpdates: Dictionary<String,SpaceX_API_Device_MeshConfig> {
    get {return _storage._meshConfigsUpdates}
    set {_uniqueStorage()._meshConfigsUpdates = newValue}
  }

  var applyMeshConfigs: Bool {
    get {return _storage._applyMeshConfigs}
    set {_uniqueStorage()._applyMeshConfigs = newValue}
  }

  var dynamicKeys: [SpaceX_API_Device_PublicKey] {
    get {return _storage._dynamicKeys}
    set {_uniqueStorage()._dynamicKeys = newValue}
  }

  var applyDynamicKeys: Bool {
    get {return _storage._applyDynamicKeys}
    set {_uniqueStorage()._applyDynamicKeys = newValue}
  }

  var isRepeater: Bool {
    get {return _storage._isRepeater}
    set {_uniqueStorage()._isRepeater = newValue}
  }

  var applyIsRepeater: Bool {
    get {return _storage._applyIsRepeater}
    set {_uniqueStorage()._applyIsRepeater = newValue}
  }

  var apMode: Bool {
    get {return _storage._apMode}
    set {_uniqueStorage()._apMode = newValue}
  }

  var applyApMode: Bool {
    get {return _storage._applyApMode}
    set {_uniqueStorage()._applyApMode = newValue}
  }

  var isAviation: Bool {
    get {return _storage._isAviation}
    set {_uniqueStorage()._isAviation = newValue}
  }

  var applyIsAviation: Bool {
    get {return _storage._applyIsAviation}
    set {_uniqueStorage()._applyIsAviation = newValue}
  }

  var bootCount: Int32 {
    get {return _storage._bootCount}
    set {_uniqueStorage()._bootCount = newValue}
  }

  var boot: SpaceX_API_Device_BootInfo {
    get {return _storage._boot ?? SpaceX_API_Device_BootInfo()}
    set {_uniqueStorage()._boot = newValue}
  }
  /// Returns true if `boot` has been explicitly set.
  var hasBoot: Bool {return _storage._boot != nil}
  /// Clears the value of `boot`. Subsequent reads from it will return its default value.
  mutating func clearBoot() {_uniqueStorage()._boot = nil}

  var nameservers: [String] {
    get {return _storage._nameservers}
    set {_uniqueStorage()._nameservers = newValue}
  }

  var applyNameservers: Bool {
    get {return _storage._applyNameservers}
    set {_uniqueStorage()._applyNameservers = newValue}
  }

  var secureDns: Bool {
    get {return _storage._secureDns}
    set {_uniqueStorage()._secureDns = newValue}
  }

  var applySecureDns: Bool {
    get {return _storage._applySecureDns}
    set {_uniqueStorage()._applySecureDns = newValue}
  }

  var bypassMode: Bool {
    get {return _storage._bypassMode}
    set {_uniqueStorage()._bypassMode = newValue}
  }

  var applyBypassMode: Bool {
    get {return _storage._applyBypassMode}
    set {_uniqueStorage()._applyBypassMode = newValue}
  }

  var dfsEnabled: Bool {
    get {return _storage._dfsEnabled}
    set {_uniqueStorage()._dfsEnabled = newValue}
  }

  var applyDfsEnabled: Bool {
    get {return _storage._applyDfsEnabled}
    set {_uniqueStorage()._applyDfsEnabled = newValue}
  }

  var disableMeshOnboarding: Bool {
    get {return _storage._disableMeshOnboarding}
    set {_uniqueStorage()._disableMeshOnboarding = newValue}
  }

  var applyDisableMeshOnboarding: Bool {
    get {return _storage._applyDisableMeshOnboarding}
    set {_uniqueStorage()._applyDisableMeshOnboarding = newValue}
  }

  var networks: [SpaceX_API_Device_WifiConfig.Network] {
    get {return _storage._networks}
    set {_uniqueStorage()._networks = newValue}
  }

  var applyNetworks: Bool {
    get {return _storage._applyNetworks}
    set {_uniqueStorage()._applyNetworks = newValue}
  }

  var incarnation: UInt64 {
    get {return _storage._incarnation}
    set {_uniqueStorage()._incarnation = newValue}
  }

  var wirelessMode2Ghz: SpaceX_API_Device_WifiConfig.WirelessMode {
    get {return _storage._wirelessMode2Ghz}
    set {_uniqueStorage()._wirelessMode2Ghz = newValue}
  }

  var applyWirelessMode2Ghz: Bool {
    get {return _storage._applyWirelessMode2Ghz}
    set {_uniqueStorage()._applyWirelessMode2Ghz = newValue}
  }

  var wirelessMode5Ghz: SpaceX_API_Device_WifiConfig.WirelessMode {
    get {return _storage._wirelessMode5Ghz}
    set {_uniqueStorage()._wirelessMode5Ghz = newValue}
  }

  var applyWirelessMode5Ghz: Bool {
    get {return _storage._applyWirelessMode5Ghz}
    set {_uniqueStorage()._applyWirelessMode5Ghz = newValue}
  }

  var wirelessMode5GhzHigh: SpaceX_API_Device_WifiConfig.WirelessMode {
    get {return _storage._wirelessMode5GhzHigh}
    set {_uniqueStorage()._wirelessMode5GhzHigh = newValue}
  }

  var applyWirelessMode5GhzHigh: Bool {
    get {return _storage._applyWirelessMode5GhzHigh}
    set {_uniqueStorage()._applyWirelessMode5GhzHigh = newValue}
  }

  var htBandwidth2Ghz: SpaceX_API_Device_WifiConfig.HTBandwidth {
    get {return _storage._htBandwidth2Ghz}
    set {_uniqueStorage()._htBandwidth2Ghz = newValue}
  }

  var applyHtBandwidth2Ghz: Bool {
    get {return _storage._applyHtBandwidth2Ghz}
    set {_uniqueStorage()._applyHtBandwidth2Ghz = newValue}
  }

  var htBandwidth5Ghz: SpaceX_API_Device_WifiConfig.HTBandwidth {
    get {return _storage._htBandwidth5Ghz}
    set {_uniqueStorage()._htBandwidth5Ghz = newValue}
  }

  var applyHtBandwidth5Ghz: Bool {
    get {return _storage._applyHtBandwidth5Ghz}
    set {_uniqueStorage()._applyHtBandwidth5Ghz = newValue}
  }

  var htBandwidth5GhzHigh: SpaceX_API_Device_WifiConfig.HTBandwidth {
    get {return _storage._htBandwidth5GhzHigh}
    set {_uniqueStorage()._htBandwidth5GhzHigh = newValue}
  }

  var applyHtBandwidth5GhzHigh: Bool {
    get {return _storage._applyHtBandwidth5GhzHigh}
    set {_uniqueStorage()._applyHtBandwidth5GhzHigh = newValue}
  }

  var vhtBandwidth: SpaceX_API_Device_WifiConfig.VHTBandwidth {
    get {return _storage._vhtBandwidth}
    set {_uniqueStorage()._vhtBandwidth = newValue}
  }

  var applyVhtBandwidth: Bool {
    get {return _storage._applyVhtBandwidth}
    set {_uniqueStorage()._applyVhtBandwidth = newValue}
  }

  var vhtBandwidth5GhzHigh: SpaceX_API_Device_WifiConfig.VHTBandwidth {
    get {return _storage._vhtBandwidth5GhzHigh}
    set {_uniqueStorage()._vhtBandwidth5GhzHigh = newValue}
  }

  var applyVhtBandwidth5GhzHigh: Bool {
    get {return _storage._applyVhtBandwidth5GhzHigh}
    set {_uniqueStorage()._applyVhtBandwidth5GhzHigh = newValue}
  }

  var usePublicServices: Bool {
    get {return _storage._usePublicServices}
    set {_uniqueStorage()._usePublicServices = newValue}
  }

  var applyUsePublicServices: Bool {
    get {return _storage._applyUsePublicServices}
    set {_uniqueStorage()._applyUsePublicServices = newValue}
  }

  var disableAutomatedSpeedtests: Bool {
    get {return _storage._disableAutomatedSpeedtests}
    set {_uniqueStorage()._disableAutomatedSpeedtests = newValue}
  }

  var applyDisableAutomatedSpeedtests: Bool {
    get {return _storage._applyDisableAutomatedSpeedtests}
    set {_uniqueStorage()._applyDisableAutomatedSpeedtests = newValue}
  }

  var enableUmbilicalVlan: Bool {
    get {return _storage._enableUmbilicalVlan}
    set {_uniqueStorage()._enableUmbilicalVlan = newValue}
  }

  var applyEnableUmbilicalVlan: Bool {
    get {return _storage._applyEnableUmbilicalVlan}
    set {_uniqueStorage()._applyEnableUmbilicalVlan = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var clientNames: [SpaceX_API_Device_ClientName] {
    get {return _storage._clientNames}
    set {_uniqueStorage()._clientNames = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var applyClientNames: Bool {
    get {return _storage._applyClientNames}
    set {_uniqueStorage()._applyClientNames = newValue}
  }

  var outdoorMode: Bool {
    get {return _storage._outdoorMode}
    set {_uniqueStorage()._outdoorMode = newValue}
  }

  var applyOutdoorMode: Bool {
    get {return _storage._applyOutdoorMode}
    set {_uniqueStorage()._applyOutdoorMode = newValue}
  }

  var disable2Ghz: Bool {
    get {return _storage._disable2Ghz}
    set {_uniqueStorage()._disable2Ghz = newValue}
  }

  var applyDisable2Ghz: Bool {
    get {return _storage._applyDisable2Ghz}
    set {_uniqueStorage()._applyDisable2Ghz = newValue}
  }

  var disable5Ghz: Bool {
    get {return _storage._disable5Ghz}
    set {_uniqueStorage()._disable5Ghz = newValue}
  }

  var applyDisable5Ghz: Bool {
    get {return _storage._applyDisable5Ghz}
    set {_uniqueStorage()._applyDisable5Ghz = newValue}
  }

  var disable5GhzHigh: Bool {
    get {return _storage._disable5GhzHigh}
    set {_uniqueStorage()._disable5GhzHigh = newValue}
  }

  var applyDisable5GhzHigh: Bool {
    get {return _storage._applyDisable5GhzHigh}
    set {_uniqueStorage()._applyDisable5GhzHigh = newValue}
  }

  var disableXMeshBackhaul: Bool {
    get {return _storage._disableXMeshBackhaul}
    set {_uniqueStorage()._disableXMeshBackhaul = newValue}
  }

  var applyDisableXMeshBackhaul: Bool {
    get {return _storage._applyDisableXMeshBackhaul}
    set {_uniqueStorage()._applyDisableXMeshBackhaul = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var goldenBssid: String {
    get {return _storage._goldenBssid}
    set {_uniqueStorage()._goldenBssid = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var applyGoldenBssid: Bool {
    get {return _storage._applyGoldenBssid}
    set {_uniqueStorage()._applyGoldenBssid = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var goldenIfaceType: SpaceX_API_Device_IfaceType {
    get {return _storage._goldenIfaceType}
    set {_uniqueStorage()._goldenIfaceType = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var applyGoldenIfaceType: Bool {
    get {return _storage._applyGoldenIfaceType}
    set {_uniqueStorage()._applyGoldenIfaceType = newValue}
  }

  var txPowerLevel2Ghz: SpaceX_API_Device_TxPowerLevel {
    get {return _storage._txPowerLevel2Ghz}
    set {_uniqueStorage()._txPowerLevel2Ghz = newValue}
  }

  var applyTxPowerLevel2Ghz: Bool {
    get {return _storage._applyTxPowerLevel2Ghz}
    set {_uniqueStorage()._applyTxPowerLevel2Ghz = newValue}
  }

  var txPowerLevel5Ghz: SpaceX_API_Device_TxPowerLevel {
    get {return _storage._txPowerLevel5Ghz}
    set {_uniqueStorage()._txPowerLevel5Ghz = newValue}
  }

  var applyTxPowerLevel5Ghz: Bool {
    get {return _storage._applyTxPowerLevel5Ghz}
    set {_uniqueStorage()._applyTxPowerLevel5Ghz = newValue}
  }

  var txPowerLevel5GhzHigh: SpaceX_API_Device_TxPowerLevel {
    get {return _storage._txPowerLevel5GhzHigh}
    set {_uniqueStorage()._txPowerLevel5GhzHigh = newValue}
  }

  var applyTxPowerLevel5GhzHigh: Bool {
    get {return _storage._applyTxPowerLevel5GhzHigh}
    set {_uniqueStorage()._applyTxPowerLevel5GhzHigh = newValue}
  }

  var disablePendingUpdateReboot: Bool {
    get {return _storage._disablePendingUpdateReboot}
    set {_uniqueStorage()._disablePendingUpdateReboot = newValue}
  }

  var applyDisablePendingUpdateReboot: Bool {
    get {return _storage._applyDisablePendingUpdateReboot}
    set {_uniqueStorage()._applyDisablePendingUpdateReboot = newValue}
  }

  var clientConfigs: [SpaceX_API_Device_ClientConfig] {
    get {return _storage._clientConfigs}
    set {_uniqueStorage()._clientConfigs = newValue}
  }

  var applyClientConfigs: Bool {
    get {return _storage._applyClientConfigs}
    set {_uniqueStorage()._applyClientConfigs = newValue}
  }

  var disableSetWifiConfigFromController: Bool {
    get {return _storage._disableSetWifiConfigFromController}
    set {_uniqueStorage()._disableSetWifiConfigFromController = newValue}
  }

  var applyDisableSetWifiConfigFromController: Bool {
    get {return _storage._applyDisableSetWifiConfigFromController}
    set {_uniqueStorage()._applyDisableSetWifiConfigFromController = newValue}
  }

  var clientKey: Data {
    get {return _storage._clientKey}
    set {_uniqueStorage()._clientKey = newValue}
  }

  var applyClientKey: Bool {
    get {return _storage._applyClientKey}
    set {_uniqueStorage()._applyClientKey = newValue}
  }

  var wanTrafficControl: OneOf_WanTrafficControl? {
    get {return _storage._wanTrafficControl}
    set {_uniqueStorage()._wanTrafficControl = newValue}
  }

  var wanNoTrafficControl: SpaceX_API_Device_NoTrafficControl {
    get {
      if case .wanNoTrafficControl(let v)? = _storage._wanTrafficControl {return v}
      return SpaceX_API_Device_NoTrafficControl()
    }
    set {_uniqueStorage()._wanTrafficControl = .wanNoTrafficControl(newValue)}
  }

  var wanAckSuppression: SpaceX_API_Device_AckSuppression {
    get {
      if case .wanAckSuppression(let v)? = _storage._wanTrafficControl {return v}
      return SpaceX_API_Device_AckSuppression()
    }
    set {_uniqueStorage()._wanTrafficControl = .wanAckSuppression(newValue)}
  }

  var wanCakeRateLimit: SpaceX_API_Device_CakeRateLimit {
    get {
      if case .wanCakeRateLimit(let v)? = _storage._wanTrafficControl {return v}
      return SpaceX_API_Device_CakeRateLimit()
    }
    set {_uniqueStorage()._wanTrafficControl = .wanCakeRateLimit(newValue)}
  }

  var applyWanTrafficControl: Bool {
    get {return _storage._applyWanTrafficControl}
    set {_uniqueStorage()._applyWanTrafficControl = newValue}
  }

  var wanHostDscpMark: Int32 {
    get {return _storage._wanHostDscpMark}
    set {_uniqueStorage()._wanHostDscpMark = newValue}
  }

  var applyWanHostDscpMark: Bool {
    get {return _storage._applyWanHostDscpMark}
    set {_uniqueStorage()._applyWanHostDscpMark = newValue}
  }

  var debugPopPings: Bool {
    get {return _storage._debugPopPings}
    set {_uniqueStorage()._debugPopPings = newValue}
  }

  var applyDebugPopPings: Bool {
    get {return _storage._applyDebugPopPings}
    set {_uniqueStorage()._applyDebugPopPings = newValue}
  }

  var clientTester: Bool {
    get {return _storage._clientTester}
    set {_uniqueStorage()._clientTester = newValue}
  }

  var applyClientTester: Bool {
    get {return _storage._applyClientTester}
    set {_uniqueStorage()._applyClientTester = newValue}
  }

  var tag: UInt32 {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_WanTrafficControl: Equatable, Sendable {
    case wanNoTrafficControl(SpaceX_API_Device_NoTrafficControl)
    case wanAckSuppression(SpaceX_API_Device_AckSuppression)
    case wanCakeRateLimit(SpaceX_API_Device_CakeRateLimit)

  }

  enum Security: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case wpa2 // = 1
    case wpa3 // = 2
    case wpa2Wpa3 // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .wpa2
      case 2: self = .wpa3
      case 3: self = .wpa2Wpa3
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .wpa2: return 1
      case .wpa3: return 2
      case .wpa2Wpa3: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiConfig.Security] = [
      .unknown,
      .wpa2,
      .wpa3,
      .wpa2Wpa3,
    ]

  }

  enum Band: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case rfUnknown // = 0
    case rf2Ghz // = 2
    case rf5Ghz // = 5
    case rf5GhzHigh // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .rfUnknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .rfUnknown
      case 2: self = .rf2Ghz
      case 5: self = .rf5Ghz
      case 6: self = .rf5GhzHigh
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .rfUnknown: return 0
      case .rf2Ghz: return 2
      case .rf5Ghz: return 5
      case .rf5GhzHigh: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiConfig.Band] = [
      .rfUnknown,
      .rf2Ghz,
      .rf5Ghz,
      .rf5GhzHigh,
    ]

  }

  enum WirelessMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case `default` // = 0
    case aOnly // = 1
    case bOnly // = 2
    case gOnly // = 3
    case nOnly // = 4
    case bGMixed // = 5
    case aNMixed // = 6
    case gNMixed // = 7
    case bGNMixed // = 8
    case aAnAcMixed // = 9
    case anAcMixed // = 10
    case bGNAxMixed // = 11
    case aAnAcAxMixed // = 12
    case UNRECOGNIZED(Int)

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .aOnly
      case 2: self = .bOnly
      case 3: self = .gOnly
      case 4: self = .nOnly
      case 5: self = .bGMixed
      case 6: self = .aNMixed
      case 7: self = .gNMixed
      case 8: self = .bGNMixed
      case 9: self = .aAnAcMixed
      case 10: self = .anAcMixed
      case 11: self = .bGNAxMixed
      case 12: self = .aAnAcAxMixed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .aOnly: return 1
      case .bOnly: return 2
      case .gOnly: return 3
      case .nOnly: return 4
      case .bGMixed: return 5
      case .aNMixed: return 6
      case .gNMixed: return 7
      case .bGNMixed: return 8
      case .aAnAcMixed: return 9
      case .anAcMixed: return 10
      case .bGNAxMixed: return 11
      case .aAnAcAxMixed: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiConfig.WirelessMode] = [
      .default,
      .aOnly,
      .bOnly,
      .gOnly,
      .nOnly,
      .bGMixed,
      .aNMixed,
      .gNMixed,
      .bGNMixed,
      .aAnAcMixed,
      .anAcMixed,
      .bGNAxMixed,
      .aAnAcAxMixed,
    ]

  }

  enum HTBandwidth: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case `default` // = 0
    case htBandwidth20Mhz // = 1
    case htBandwidth20Or40Mhz // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .htBandwidth20Mhz
      case 2: self = .htBandwidth20Or40Mhz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .htBandwidth20Mhz: return 1
      case .htBandwidth20Or40Mhz: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiConfig.HTBandwidth] = [
      .default,
      .htBandwidth20Mhz,
      .htBandwidth20Or40Mhz,
    ]

  }

  enum VHTBandwidth: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case `default` // = 0
    case disabled // = 1
    case vhtBandwidth80Mhz // = 2
    case vhtBandwidth160Mhz // = 3
    case vhtBandwidth80Plus80Mhz // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .disabled
      case 2: self = .vhtBandwidth80Mhz
      case 3: self = .vhtBandwidth160Mhz
      case 4: self = .vhtBandwidth80Plus80Mhz
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .disabled: return 1
      case .vhtBandwidth80Mhz: return 2
      case .vhtBandwidth160Mhz: return 3
      case .vhtBandwidth80Plus80Mhz: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_WifiConfig.VHTBandwidth] = [
      .default,
      .disabled,
      .vhtBandwidth80Mhz,
      .vhtBandwidth160Mhz,
      .vhtBandwidth80Plus80Mhz,
    ]

  }

  struct BasicServiceSet: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bssid: String = String()

    var ssid: String = String()

    var auth: SpaceX_API_Device_WifiConfig.BasicServiceSet.OneOf_Auth? = nil

    var authOpen: SpaceX_API_Device_AuthOpen {
      get {
        if case .authOpen(let v)? = auth {return v}
        return SpaceX_API_Device_AuthOpen()
      }
      set {auth = .authOpen(newValue)}
    }

    var authWpa2: SpaceX_API_Device_AuthWpa2 {
      get {
        if case .authWpa2(let v)? = auth {return v}
        return SpaceX_API_Device_AuthWpa2()
      }
      set {auth = .authWpa2(newValue)}
    }

    var authWpa3: SpaceX_API_Device_AuthWpa3 {
      get {
        if case .authWpa3(let v)? = auth {return v}
        return SpaceX_API_Device_AuthWpa3()
      }
      set {auth = .authWpa3(newValue)}
    }

    var authWpa2Wpa3: SpaceX_API_Device_AuthWpa2Wpa3 {
      get {
        if case .authWpa2Wpa3(let v)? = auth {return v}
        return SpaceX_API_Device_AuthWpa2Wpa3()
      }
      set {auth = .authWpa2Wpa3(newValue)}
    }

    var authRadius: SpaceX_API_Device_AuthRadius {
      get {
        if case .authRadius(let v)? = auth {return v}
        return SpaceX_API_Device_AuthRadius()
      }
      set {auth = .authRadius(newValue)}
    }

    var band: SpaceX_API_Device_WifiConfig.Band = .rfUnknown

    var ifaceName: String = String()

    var disable: Bool = false

    var hidden: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Auth: Equatable, Sendable {
      case authOpen(SpaceX_API_Device_AuthOpen)
      case authWpa2(SpaceX_API_Device_AuthWpa2)
      case authWpa3(SpaceX_API_Device_AuthWpa3)
      case authWpa2Wpa3(SpaceX_API_Device_AuthWpa2Wpa3)
      case authRadius(SpaceX_API_Device_AuthRadius)

    }

    init() {}
  }

  struct Network: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ipv4: String = String()

    var dhcpv4Start: UInt32 = 0

    var dhcpDisabled: Bool = false

    var dhcpv4LeaseDurationS: UInt32 = 0

    var domain: String = String()

    var basicServiceSets: [SpaceX_API_Device_WifiConfig.BasicServiceSet] = []

    var clientIsolation: Bool = false

    var guest: Bool = false

    var landing: String = String()

    var landingPageV2: Bool = false

    var `internal`: Bool = false

    var vlan: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SpaceX_API_Device_WeeklyBlockSchedule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockRanges: [SpaceX_API_Device_WeeklyBlockSchedule.BlockRange] = []

  var groupID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct BlockRange: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startMinutes: UInt32 = 0

    var endMinutes: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct SpaceX_API_Device_ClientConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: UInt32 = 0

  var macAddress: String = String()

  var givenName: String = String()

  var weeklyBlockSchedules: [SpaceX_API_Device_WeeklyBlockSchedule] = []

  var groupID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_ClientName: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var macAddress: String = String()

  var givenName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AuthOpen: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AuthWpa2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AuthWpa3: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AuthWpa2Wpa3: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AuthRadius: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var server: String = String()

  /// NOTE: This field was marked as deprecated in the .proto file.
  var serverCa: String = String()

  var serverCaBase64: String = String()

  var password: String = String()

  var transport: SpaceX_API_Device_Protocol = .tcp

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_NoTrafficControl: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_AckSuppression: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ackMark: UInt32 = 0

  var htbAckQueueRate: Float = 0

  var htbAckQueueCeil: Float = 0

  var cakeQueueBandwidth: Float = 0

  var cakeAckFilterAggressive: Bool = false

  var cakeManualRtt: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_CakeRateLimit: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hostMark: UInt32 = 0

  var bandwidth: Float = 0

  var priorityQueueParameter: SpaceX_API_Device_CakePriorityQueueParameter = .diffserv3

  var ackFilter: SpaceX_API_Device_CakeAckFilter = .noAckFilter

  var manualRtt: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_MeshAuth: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MESH_AUTH_UNKNOWN"),
    1: .same(proto: "MESH_AUTH_NEW"),
    2: .same(proto: "MESH_AUTH_TRUSTED"),
    3: .same(proto: "MESH_AUTH_UNTRUSTED"),
  ]
}

extension SpaceX_API_Device_CakeAckFilter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ACK_FILTER"),
    1: .same(proto: "ACK_FILTER"),
    2: .same(proto: "ACK_FILTER_AGGRESSIVE"),
  ]
}

extension SpaceX_API_Device_CakePriorityQueueParameter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIFFSERV3"),
    1: .same(proto: "DIFFSERV4"),
    2: .same(proto: "PRECEDENCE"),
    3: .same(proto: "BEST_EFFORT"),
  ]
}

extension SpaceX_API_Device_MeshConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MeshConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .standard(proto: "apply_display_name"),
    3: .same(proto: "auth"),
    4: .standard(proto: "apply_auth"),
    5: .standard(proto: "last_connected"),
    7: .same(proto: "incarnation"),
    9: .standard(proto: "hardware_version"),
    10: .standard(proto: "supports_5ghz_high"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.applyDisplayName) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.auth) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.applyAuth) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastConnected) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.incarnation) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.hardwareVersion) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.supports5GhzHigh) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if self.applyDisplayName != false {
      try visitor.visitSingularBoolField(value: self.applyDisplayName, fieldNumber: 2)
    }
    if self.auth != .unknown {
      try visitor.visitSingularEnumField(value: self.auth, fieldNumber: 3)
    }
    if self.applyAuth != false {
      try visitor.visitSingularBoolField(value: self.applyAuth, fieldNumber: 4)
    }
    if self.lastConnected != 0 {
      try visitor.visitSingularInt64Field(value: self.lastConnected, fieldNumber: 5)
    }
    if self.incarnation != 0 {
      try visitor.visitSingularUInt64Field(value: self.incarnation, fieldNumber: 7)
    }
    if !self.hardwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareVersion, fieldNumber: 9)
    }
    if self.supports5GhzHigh != false {
      try visitor.visitSingularBoolField(value: self.supports5GhzHigh, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_MeshConfig, rhs: SpaceX_API_Device_MeshConfig) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.applyDisplayName != rhs.applyDisplayName {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.applyAuth != rhs.applyAuth {return false}
    if lhs.lastConnected != rhs.lastConnected {return false}
    if lhs.incarnation != rhs.incarnation {return false}
    if lhs.hardwareVersion != rhs.hardwareVersion {return false}
    if lhs.supports5GhzHigh != rhs.supports5GhzHigh {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WifiConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "country_code"),
    1085: .standard(proto: "apply_country_code"),
    53: .standard(proto: "pin_country_code"),
    1086: .standard(proto: "apply_pin_country_code"),
    54: .standard(proto: "custom_power_table"),
    1087: .standard(proto: "apply_custom_power_table"),
    7: .standard(proto: "setup_complete"),
    1010: .standard(proto: "apply_setup_complete"),
    9: .same(proto: "version"),
    12: .standard(proto: "mac_wan"),
    13: .standard(proto: "mac_lan"),
    19: .standard(proto: "channel_2ghz"),
    1013: .standard(proto: "apply_channel_2ghz"),
    20: .standard(proto: "channel_5ghz"),
    1014: .standard(proto: "apply_channel_5ghz"),
    57: .standard(proto: "channel_5ghz_high"),
    1016: .standard(proto: "apply_channel_5ghz_high"),
    33: .standard(proto: "mesh_configs"),
    3033: .standard(proto: "mesh_configs_updates"),
    1033: .standard(proto: "apply_mesh_configs"),
    22: .standard(proto: "dynamic_keys"),
    39: .standard(proto: "apply_dynamic_keys"),
    23: .standard(proto: "is_repeater"),
    1031: .standard(proto: "apply_is_repeater"),
    51: .standard(proto: "ap_mode"),
    1066: .standard(proto: "apply_ap_mode"),
    49: .standard(proto: "is_aviation"),
    1064: .standard(proto: "apply_is_aviation"),
    26: .standard(proto: "boot_count"),
    3001: .same(proto: "boot"),
    30: .same(proto: "nameservers"),
    1054: .standard(proto: "apply_nameservers"),
    50: .standard(proto: "secure_dns"),
    1065: .standard(proto: "apply_secure_dns"),
    31: .standard(proto: "bypass_mode"),
    1055: .standard(proto: "apply_bypass_mode"),
    42: .standard(proto: "dfs_enabled"),
    1058: .standard(proto: "apply_dfs_enabled"),
    52: .standard(proto: "disable_mesh_onboarding"),
    1067: .standard(proto: "apply_disable_mesh_onboarding"),
    1100: .same(proto: "networks"),
    1101: .standard(proto: "apply_networks"),
    43: .same(proto: "incarnation"),
    44: .standard(proto: "wireless_mode_2ghz"),
    1059: .standard(proto: "apply_wireless_mode_2ghz"),
    45: .standard(proto: "wireless_mode_5ghz"),
    1060: .standard(proto: "apply_wireless_mode_5ghz"),
    58: .standard(proto: "wireless_mode_5ghz_high"),
    1070: .standard(proto: "apply_wireless_mode_5ghz_high"),
    46: .standard(proto: "ht_bandwidth_2ghz"),
    1061: .standard(proto: "apply_ht_bandwidth_2ghz"),
    47: .standard(proto: "ht_bandwidth_5ghz"),
    1062: .standard(proto: "apply_ht_bandwidth_5ghz"),
    59: .standard(proto: "ht_bandwidth_5ghz_high"),
    1071: .standard(proto: "apply_ht_bandwidth_5ghz_high"),
    48: .standard(proto: "vht_bandwidth"),
    1063: .standard(proto: "apply_vht_bandwidth"),
    60: .standard(proto: "vht_bandwidth_5ghz_high"),
    1072: .standard(proto: "apply_vht_bandwidth_5ghz_high"),
    55: .standard(proto: "use_public_services"),
    1068: .standard(proto: "apply_use_public_services"),
    56: .standard(proto: "disable_automated_speedtests"),
    1069: .standard(proto: "apply_disable_automated_speedtests"),
    61: .standard(proto: "enable_umbilical_vlan"),
    1073: .standard(proto: "apply_enable_umbilical_vlan"),
    62: .standard(proto: "client_names"),
    1074: .standard(proto: "apply_client_names"),
    63: .standard(proto: "outdoor_mode"),
    1075: .standard(proto: "apply_outdoor_mode"),
    64: .standard(proto: "disable_2ghz"),
    1076: .standard(proto: "apply_disable_2ghz"),
    65: .standard(proto: "disable_5ghz"),
    1077: .standard(proto: "apply_disable_5ghz"),
    66: .standard(proto: "disable_5ghz_high"),
    1078: .standard(proto: "apply_disable_5ghz_high"),
    67: .standard(proto: "disable_x_mesh_backhaul"),
    1079: .standard(proto: "apply_disable_x_mesh_backhaul"),
    68: .standard(proto: "golden_bssid"),
    1080: .standard(proto: "apply_golden_bssid"),
    69: .standard(proto: "golden_iface_type"),
    1081: .standard(proto: "apply_golden_iface_type"),
    70: .standard(proto: "tx_power_level_2ghz"),
    1082: .standard(proto: "apply_tx_power_level_2ghz"),
    71: .standard(proto: "tx_power_level_5ghz"),
    1083: .standard(proto: "apply_tx_power_level_5ghz"),
    72: .standard(proto: "tx_power_level_5ghz_high"),
    1084: .standard(proto: "apply_tx_power_level_5ghz_high"),
    73: .standard(proto: "disable_pending_update_reboot"),
    1088: .standard(proto: "apply_disable_pending_update_reboot"),
    74: .standard(proto: "client_configs"),
    1089: .standard(proto: "apply_client_configs"),
    75: .standard(proto: "disable_set_wifi_config_from_controller"),
    1090: .standard(proto: "apply_disable_set_wifi_config_from_controller"),
    76: .standard(proto: "client_key"),
    1091: .standard(proto: "apply_client_key"),
    4001: .standard(proto: "wan_no_traffic_control"),
    4002: .standard(proto: "wan_ack_suppression"),
    4003: .standard(proto: "wan_cake_rate_limit"),
    1092: .standard(proto: "apply_wan_traffic_control"),
    77: .standard(proto: "wan_host_dscp_mark"),
    1093: .standard(proto: "apply_wan_host_dscp_mark"),
    79: .standard(proto: "debug_pop_pings"),
    1095: .standard(proto: "apply_debug_pop_pings"),
    80: .standard(proto: "client_tester"),
    1096: .standard(proto: "apply_client_tester"),
    78: .same(proto: "tag"),
  ]

  fileprivate class _StorageClass {
    var _countryCode: String = String()
    var _applyCountryCode: Bool = false
    var _pinCountryCode: Bool = false
    var _applyPinCountryCode: Bool = false
    var _customPowerTable: Bool = false
    var _applyCustomPowerTable: Bool = false
    var _setupComplete: Bool = false
    var _applySetupComplete: Bool = false
    var _version: UInt32 = 0
    var _macWan: String = String()
    var _macLan: String = String()
    var _channel2Ghz: UInt32 = 0
    var _applyChannel2Ghz: Bool = false
    var _channel5Ghz: UInt32 = 0
    var _applyChannel5Ghz: Bool = false
    var _channel5GhzHigh: UInt32 = 0
    var _applyChannel5GhzHigh: Bool = false
    var _meshConfigs: Dictionary<String,SpaceX_API_Device_MeshConfig> = [:]
    var _meshConfigsUpdates: Dictionary<String,SpaceX_API_Device_MeshConfig> = [:]
    var _applyMeshConfigs: Bool = false
    var _dynamicKeys: [SpaceX_API_Device_PublicKey] = []
    var _applyDynamicKeys: Bool = false
    var _isRepeater: Bool = false
    var _applyIsRepeater: Bool = false
    var _apMode: Bool = false
    var _applyApMode: Bool = false
    var _isAviation: Bool = false
    var _applyIsAviation: Bool = false
    var _bootCount: Int32 = 0
    var _boot: SpaceX_API_Device_BootInfo? = nil
    var _nameservers: [String] = []
    var _applyNameservers: Bool = false
    var _secureDns: Bool = false
    var _applySecureDns: Bool = false
    var _bypassMode: Bool = false
    var _applyBypassMode: Bool = false
    var _dfsEnabled: Bool = false
    var _applyDfsEnabled: Bool = false
    var _disableMeshOnboarding: Bool = false
    var _applyDisableMeshOnboarding: Bool = false
    var _networks: [SpaceX_API_Device_WifiConfig.Network] = []
    var _applyNetworks: Bool = false
    var _incarnation: UInt64 = 0
    var _wirelessMode2Ghz: SpaceX_API_Device_WifiConfig.WirelessMode = .default
    var _applyWirelessMode2Ghz: Bool = false
    var _wirelessMode5Ghz: SpaceX_API_Device_WifiConfig.WirelessMode = .default
    var _applyWirelessMode5Ghz: Bool = false
    var _wirelessMode5GhzHigh: SpaceX_API_Device_WifiConfig.WirelessMode = .default
    var _applyWirelessMode5GhzHigh: Bool = false
    var _htBandwidth2Ghz: SpaceX_API_Device_WifiConfig.HTBandwidth = .default
    var _applyHtBandwidth2Ghz: Bool = false
    var _htBandwidth5Ghz: SpaceX_API_Device_WifiConfig.HTBandwidth = .default
    var _applyHtBandwidth5Ghz: Bool = false
    var _htBandwidth5GhzHigh: SpaceX_API_Device_WifiConfig.HTBandwidth = .default
    var _applyHtBandwidth5GhzHigh: Bool = false
    var _vhtBandwidth: SpaceX_API_Device_WifiConfig.VHTBandwidth = .default
    var _applyVhtBandwidth: Bool = false
    var _vhtBandwidth5GhzHigh: SpaceX_API_Device_WifiConfig.VHTBandwidth = .default
    var _applyVhtBandwidth5GhzHigh: Bool = false
    var _usePublicServices: Bool = false
    var _applyUsePublicServices: Bool = false
    var _disableAutomatedSpeedtests: Bool = false
    var _applyDisableAutomatedSpeedtests: Bool = false
    var _enableUmbilicalVlan: Bool = false
    var _applyEnableUmbilicalVlan: Bool = false
    var _clientNames: [SpaceX_API_Device_ClientName] = []
    var _applyClientNames: Bool = false
    var _outdoorMode: Bool = false
    var _applyOutdoorMode: Bool = false
    var _disable2Ghz: Bool = false
    var _applyDisable2Ghz: Bool = false
    var _disable5Ghz: Bool = false
    var _applyDisable5Ghz: Bool = false
    var _disable5GhzHigh: Bool = false
    var _applyDisable5GhzHigh: Bool = false
    var _disableXMeshBackhaul: Bool = false
    var _applyDisableXMeshBackhaul: Bool = false
    var _goldenBssid: String = String()
    var _applyGoldenBssid: Bool = false
    var _goldenIfaceType: SpaceX_API_Device_IfaceType = .unknown
    var _applyGoldenIfaceType: Bool = false
    var _txPowerLevel2Ghz: SpaceX_API_Device_TxPowerLevel = .txPowerLevel100
    var _applyTxPowerLevel2Ghz: Bool = false
    var _txPowerLevel5Ghz: SpaceX_API_Device_TxPowerLevel = .txPowerLevel100
    var _applyTxPowerLevel5Ghz: Bool = false
    var _txPowerLevel5GhzHigh: SpaceX_API_Device_TxPowerLevel = .txPowerLevel100
    var _applyTxPowerLevel5GhzHigh: Bool = false
    var _disablePendingUpdateReboot: Bool = false
    var _applyDisablePendingUpdateReboot: Bool = false
    var _clientConfigs: [SpaceX_API_Device_ClientConfig] = []
    var _applyClientConfigs: Bool = false
    var _disableSetWifiConfigFromController: Bool = false
    var _applyDisableSetWifiConfigFromController: Bool = false
    var _clientKey: Data = Data()
    var _applyClientKey: Bool = false
    var _wanTrafficControl: SpaceX_API_Device_WifiConfig.OneOf_WanTrafficControl?
    var _applyWanTrafficControl: Bool = false
    var _wanHostDscpMark: Int32 = 0
    var _applyWanHostDscpMark: Bool = false
    var _debugPopPings: Bool = false
    var _applyDebugPopPings: Bool = false
    var _clientTester: Bool = false
    var _applyClientTester: Bool = false
    var _tag: UInt32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _countryCode = source._countryCode
      _applyCountryCode = source._applyCountryCode
      _pinCountryCode = source._pinCountryCode
      _applyPinCountryCode = source._applyPinCountryCode
      _customPowerTable = source._customPowerTable
      _applyCustomPowerTable = source._applyCustomPowerTable
      _setupComplete = source._setupComplete
      _applySetupComplete = source._applySetupComplete
      _version = source._version
      _macWan = source._macWan
      _macLan = source._macLan
      _channel2Ghz = source._channel2Ghz
      _applyChannel2Ghz = source._applyChannel2Ghz
      _channel5Ghz = source._channel5Ghz
      _applyChannel5Ghz = source._applyChannel5Ghz
      _channel5GhzHigh = source._channel5GhzHigh
      _applyChannel5GhzHigh = source._applyChannel5GhzHigh
      _meshConfigs = source._meshConfigs
      _meshConfigsUpdates = source._meshConfigsUpdates
      _applyMeshConfigs = source._applyMeshConfigs
      _dynamicKeys = source._dynamicKeys
      _applyDynamicKeys = source._applyDynamicKeys
      _isRepeater = source._isRepeater
      _applyIsRepeater = source._applyIsRepeater
      _apMode = source._apMode
      _applyApMode = source._applyApMode
      _isAviation = source._isAviation
      _applyIsAviation = source._applyIsAviation
      _bootCount = source._bootCount
      _boot = source._boot
      _nameservers = source._nameservers
      _applyNameservers = source._applyNameservers
      _secureDns = source._secureDns
      _applySecureDns = source._applySecureDns
      _bypassMode = source._bypassMode
      _applyBypassMode = source._applyBypassMode
      _dfsEnabled = source._dfsEnabled
      _applyDfsEnabled = source._applyDfsEnabled
      _disableMeshOnboarding = source._disableMeshOnboarding
      _applyDisableMeshOnboarding = source._applyDisableMeshOnboarding
      _networks = source._networks
      _applyNetworks = source._applyNetworks
      _incarnation = source._incarnation
      _wirelessMode2Ghz = source._wirelessMode2Ghz
      _applyWirelessMode2Ghz = source._applyWirelessMode2Ghz
      _wirelessMode5Ghz = source._wirelessMode5Ghz
      _applyWirelessMode5Ghz = source._applyWirelessMode5Ghz
      _wirelessMode5GhzHigh = source._wirelessMode5GhzHigh
      _applyWirelessMode5GhzHigh = source._applyWirelessMode5GhzHigh
      _htBandwidth2Ghz = source._htBandwidth2Ghz
      _applyHtBandwidth2Ghz = source._applyHtBandwidth2Ghz
      _htBandwidth5Ghz = source._htBandwidth5Ghz
      _applyHtBandwidth5Ghz = source._applyHtBandwidth5Ghz
      _htBandwidth5GhzHigh = source._htBandwidth5GhzHigh
      _applyHtBandwidth5GhzHigh = source._applyHtBandwidth5GhzHigh
      _vhtBandwidth = source._vhtBandwidth
      _applyVhtBandwidth = source._applyVhtBandwidth
      _vhtBandwidth5GhzHigh = source._vhtBandwidth5GhzHigh
      _applyVhtBandwidth5GhzHigh = source._applyVhtBandwidth5GhzHigh
      _usePublicServices = source._usePublicServices
      _applyUsePublicServices = source._applyUsePublicServices
      _disableAutomatedSpeedtests = source._disableAutomatedSpeedtests
      _applyDisableAutomatedSpeedtests = source._applyDisableAutomatedSpeedtests
      _enableUmbilicalVlan = source._enableUmbilicalVlan
      _applyEnableUmbilicalVlan = source._applyEnableUmbilicalVlan
      _clientNames = source._clientNames
      _applyClientNames = source._applyClientNames
      _outdoorMode = source._outdoorMode
      _applyOutdoorMode = source._applyOutdoorMode
      _disable2Ghz = source._disable2Ghz
      _applyDisable2Ghz = source._applyDisable2Ghz
      _disable5Ghz = source._disable5Ghz
      _applyDisable5Ghz = source._applyDisable5Ghz
      _disable5GhzHigh = source._disable5GhzHigh
      _applyDisable5GhzHigh = source._applyDisable5GhzHigh
      _disableXMeshBackhaul = source._disableXMeshBackhaul
      _applyDisableXMeshBackhaul = source._applyDisableXMeshBackhaul
      _goldenBssid = source._goldenBssid
      _applyGoldenBssid = source._applyGoldenBssid
      _goldenIfaceType = source._goldenIfaceType
      _applyGoldenIfaceType = source._applyGoldenIfaceType
      _txPowerLevel2Ghz = source._txPowerLevel2Ghz
      _applyTxPowerLevel2Ghz = source._applyTxPowerLevel2Ghz
      _txPowerLevel5Ghz = source._txPowerLevel5Ghz
      _applyTxPowerLevel5Ghz = source._applyTxPowerLevel5Ghz
      _txPowerLevel5GhzHigh = source._txPowerLevel5GhzHigh
      _applyTxPowerLevel5GhzHigh = source._applyTxPowerLevel5GhzHigh
      _disablePendingUpdateReboot = source._disablePendingUpdateReboot
      _applyDisablePendingUpdateReboot = source._applyDisablePendingUpdateReboot
      _clientConfigs = source._clientConfigs
      _applyClientConfigs = source._applyClientConfigs
      _disableSetWifiConfigFromController = source._disableSetWifiConfigFromController
      _applyDisableSetWifiConfigFromController = source._applyDisableSetWifiConfigFromController
      _clientKey = source._clientKey
      _applyClientKey = source._applyClientKey
      _wanTrafficControl = source._wanTrafficControl
      _applyWanTrafficControl = source._applyWanTrafficControl
      _wanHostDscpMark = source._wanHostDscpMark
      _applyWanHostDscpMark = source._applyWanHostDscpMark
      _debugPopPings = source._debugPopPings
      _applyDebugPopPings = source._applyDebugPopPings
      _clientTester = source._clientTester
      _applyClientTester = source._applyClientTester
      _tag = source._tag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._countryCode) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._setupComplete) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._version) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._macWan) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._macLan) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._channel2Ghz) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._channel5Ghz) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._dynamicKeys) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._isRepeater) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._bootCount) }()
        case 30: try { try decoder.decodeRepeatedStringField(value: &_storage._nameservers) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._bypassMode) }()
        case 33: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SpaceX_API_Device_MeshConfig>.self, value: &_storage._meshConfigs) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._applyDynamicKeys) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._dfsEnabled) }()
        case 43: try { try decoder.decodeSingularUInt64Field(value: &_storage._incarnation) }()
        case 44: try { try decoder.decodeSingularEnumField(value: &_storage._wirelessMode2Ghz) }()
        case 45: try { try decoder.decodeSingularEnumField(value: &_storage._wirelessMode5Ghz) }()
        case 46: try { try decoder.decodeSingularEnumField(value: &_storage._htBandwidth2Ghz) }()
        case 47: try { try decoder.decodeSingularEnumField(value: &_storage._htBandwidth5Ghz) }()
        case 48: try { try decoder.decodeSingularEnumField(value: &_storage._vhtBandwidth) }()
        case 49: try { try decoder.decodeSingularBoolField(value: &_storage._isAviation) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._secureDns) }()
        case 51: try { try decoder.decodeSingularBoolField(value: &_storage._apMode) }()
        case 52: try { try decoder.decodeSingularBoolField(value: &_storage._disableMeshOnboarding) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._pinCountryCode) }()
        case 54: try { try decoder.decodeSingularBoolField(value: &_storage._customPowerTable) }()
        case 55: try { try decoder.decodeSingularBoolField(value: &_storage._usePublicServices) }()
        case 56: try { try decoder.decodeSingularBoolField(value: &_storage._disableAutomatedSpeedtests) }()
        case 57: try { try decoder.decodeSingularUInt32Field(value: &_storage._channel5GhzHigh) }()
        case 58: try { try decoder.decodeSingularEnumField(value: &_storage._wirelessMode5GhzHigh) }()
        case 59: try { try decoder.decodeSingularEnumField(value: &_storage._htBandwidth5GhzHigh) }()
        case 60: try { try decoder.decodeSingularEnumField(value: &_storage._vhtBandwidth5GhzHigh) }()
        case 61: try { try decoder.decodeSingularBoolField(value: &_storage._enableUmbilicalVlan) }()
        case 62: try { try decoder.decodeRepeatedMessageField(value: &_storage._clientNames) }()
        case 63: try { try decoder.decodeSingularBoolField(value: &_storage._outdoorMode) }()
        case 64: try { try decoder.decodeSingularBoolField(value: &_storage._disable2Ghz) }()
        case 65: try { try decoder.decodeSingularBoolField(value: &_storage._disable5Ghz) }()
        case 66: try { try decoder.decodeSingularBoolField(value: &_storage._disable5GhzHigh) }()
        case 67: try { try decoder.decodeSingularBoolField(value: &_storage._disableXMeshBackhaul) }()
        case 68: try { try decoder.decodeSingularStringField(value: &_storage._goldenBssid) }()
        case 69: try { try decoder.decodeSingularEnumField(value: &_storage._goldenIfaceType) }()
        case 70: try { try decoder.decodeSingularEnumField(value: &_storage._txPowerLevel2Ghz) }()
        case 71: try { try decoder.decodeSingularEnumField(value: &_storage._txPowerLevel5Ghz) }()
        case 72: try { try decoder.decodeSingularEnumField(value: &_storage._txPowerLevel5GhzHigh) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._disablePendingUpdateReboot) }()
        case 74: try { try decoder.decodeRepeatedMessageField(value: &_storage._clientConfigs) }()
        case 75: try { try decoder.decodeSingularBoolField(value: &_storage._disableSetWifiConfigFromController) }()
        case 76: try { try decoder.decodeSingularBytesField(value: &_storage._clientKey) }()
        case 77: try { try decoder.decodeSingularInt32Field(value: &_storage._wanHostDscpMark) }()
        case 78: try { try decoder.decodeSingularUInt32Field(value: &_storage._tag) }()
        case 79: try { try decoder.decodeSingularBoolField(value: &_storage._debugPopPings) }()
        case 80: try { try decoder.decodeSingularBoolField(value: &_storage._clientTester) }()
        case 1010: try { try decoder.decodeSingularBoolField(value: &_storage._applySetupComplete) }()
        case 1013: try { try decoder.decodeSingularBoolField(value: &_storage._applyChannel2Ghz) }()
        case 1014: try { try decoder.decodeSingularBoolField(value: &_storage._applyChannel5Ghz) }()
        case 1016: try { try decoder.decodeSingularBoolField(value: &_storage._applyChannel5GhzHigh) }()
        case 1031: try { try decoder.decodeSingularBoolField(value: &_storage._applyIsRepeater) }()
        case 1033: try { try decoder.decodeSingularBoolField(value: &_storage._applyMeshConfigs) }()
        case 1054: try { try decoder.decodeSingularBoolField(value: &_storage._applyNameservers) }()
        case 1055: try { try decoder.decodeSingularBoolField(value: &_storage._applyBypassMode) }()
        case 1058: try { try decoder.decodeSingularBoolField(value: &_storage._applyDfsEnabled) }()
        case 1059: try { try decoder.decodeSingularBoolField(value: &_storage._applyWirelessMode2Ghz) }()
        case 1060: try { try decoder.decodeSingularBoolField(value: &_storage._applyWirelessMode5Ghz) }()
        case 1061: try { try decoder.decodeSingularBoolField(value: &_storage._applyHtBandwidth2Ghz) }()
        case 1062: try { try decoder.decodeSingularBoolField(value: &_storage._applyHtBandwidth5Ghz) }()
        case 1063: try { try decoder.decodeSingularBoolField(value: &_storage._applyVhtBandwidth) }()
        case 1064: try { try decoder.decodeSingularBoolField(value: &_storage._applyIsAviation) }()
        case 1065: try { try decoder.decodeSingularBoolField(value: &_storage._applySecureDns) }()
        case 1066: try { try decoder.decodeSingularBoolField(value: &_storage._applyApMode) }()
        case 1067: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisableMeshOnboarding) }()
        case 1068: try { try decoder.decodeSingularBoolField(value: &_storage._applyUsePublicServices) }()
        case 1069: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisableAutomatedSpeedtests) }()
        case 1070: try { try decoder.decodeSingularBoolField(value: &_storage._applyWirelessMode5GhzHigh) }()
        case 1071: try { try decoder.decodeSingularBoolField(value: &_storage._applyHtBandwidth5GhzHigh) }()
        case 1072: try { try decoder.decodeSingularBoolField(value: &_storage._applyVhtBandwidth5GhzHigh) }()
        case 1073: try { try decoder.decodeSingularBoolField(value: &_storage._applyEnableUmbilicalVlan) }()
        case 1074: try { try decoder.decodeSingularBoolField(value: &_storage._applyClientNames) }()
        case 1075: try { try decoder.decodeSingularBoolField(value: &_storage._applyOutdoorMode) }()
        case 1076: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisable2Ghz) }()
        case 1077: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisable5Ghz) }()
        case 1078: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisable5GhzHigh) }()
        case 1079: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisableXMeshBackhaul) }()
        case 1080: try { try decoder.decodeSingularBoolField(value: &_storage._applyGoldenBssid) }()
        case 1081: try { try decoder.decodeSingularBoolField(value: &_storage._applyGoldenIfaceType) }()
        case 1082: try { try decoder.decodeSingularBoolField(value: &_storage._applyTxPowerLevel2Ghz) }()
        case 1083: try { try decoder.decodeSingularBoolField(value: &_storage._applyTxPowerLevel5Ghz) }()
        case 1084: try { try decoder.decodeSingularBoolField(value: &_storage._applyTxPowerLevel5GhzHigh) }()
        case 1085: try { try decoder.decodeSingularBoolField(value: &_storage._applyCountryCode) }()
        case 1086: try { try decoder.decodeSingularBoolField(value: &_storage._applyPinCountryCode) }()
        case 1087: try { try decoder.decodeSingularBoolField(value: &_storage._applyCustomPowerTable) }()
        case 1088: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisablePendingUpdateReboot) }()
        case 1089: try { try decoder.decodeSingularBoolField(value: &_storage._applyClientConfigs) }()
        case 1090: try { try decoder.decodeSingularBoolField(value: &_storage._applyDisableSetWifiConfigFromController) }()
        case 1091: try { try decoder.decodeSingularBoolField(value: &_storage._applyClientKey) }()
        case 1092: try { try decoder.decodeSingularBoolField(value: &_storage._applyWanTrafficControl) }()
        case 1093: try { try decoder.decodeSingularBoolField(value: &_storage._applyWanHostDscpMark) }()
        case 1095: try { try decoder.decodeSingularBoolField(value: &_storage._applyDebugPopPings) }()
        case 1096: try { try decoder.decodeSingularBoolField(value: &_storage._applyClientTester) }()
        case 1100: try { try decoder.decodeRepeatedMessageField(value: &_storage._networks) }()
        case 1101: try { try decoder.decodeSingularBoolField(value: &_storage._applyNetworks) }()
        case 3001: try { try decoder.decodeSingularMessageField(value: &_storage._boot) }()
        case 3033: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SpaceX_API_Device_MeshConfig>.self, value: &_storage._meshConfigsUpdates) }()
        case 4001: try {
          var v: SpaceX_API_Device_NoTrafficControl?
          var hadOneofValue = false
          if let current = _storage._wanTrafficControl {
            hadOneofValue = true
            if case .wanNoTrafficControl(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._wanTrafficControl = .wanNoTrafficControl(v)
          }
        }()
        case 4002: try {
          var v: SpaceX_API_Device_AckSuppression?
          var hadOneofValue = false
          if let current = _storage._wanTrafficControl {
            hadOneofValue = true
            if case .wanAckSuppression(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._wanTrafficControl = .wanAckSuppression(v)
          }
        }()
        case 4003: try {
          var v: SpaceX_API_Device_CakeRateLimit?
          var hadOneofValue = false
          if let current = _storage._wanTrafficControl {
            hadOneofValue = true
            if case .wanCakeRateLimit(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._wanTrafficControl = .wanCakeRateLimit(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 3)
      }
      if _storage._setupComplete != false {
        try visitor.visitSingularBoolField(value: _storage._setupComplete, fieldNumber: 7)
      }
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 9)
      }
      if !_storage._macWan.isEmpty {
        try visitor.visitSingularStringField(value: _storage._macWan, fieldNumber: 12)
      }
      if !_storage._macLan.isEmpty {
        try visitor.visitSingularStringField(value: _storage._macLan, fieldNumber: 13)
      }
      if _storage._channel2Ghz != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._channel2Ghz, fieldNumber: 19)
      }
      if _storage._channel5Ghz != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._channel5Ghz, fieldNumber: 20)
      }
      if !_storage._dynamicKeys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dynamicKeys, fieldNumber: 22)
      }
      if _storage._isRepeater != false {
        try visitor.visitSingularBoolField(value: _storage._isRepeater, fieldNumber: 23)
      }
      if _storage._bootCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bootCount, fieldNumber: 26)
      }
      if !_storage._nameservers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._nameservers, fieldNumber: 30)
      }
      if _storage._bypassMode != false {
        try visitor.visitSingularBoolField(value: _storage._bypassMode, fieldNumber: 31)
      }
      if !_storage._meshConfigs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SpaceX_API_Device_MeshConfig>.self, value: _storage._meshConfigs, fieldNumber: 33)
      }
      if _storage._applyDynamicKeys != false {
        try visitor.visitSingularBoolField(value: _storage._applyDynamicKeys, fieldNumber: 39)
      }
      if _storage._dfsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._dfsEnabled, fieldNumber: 42)
      }
      if _storage._incarnation != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._incarnation, fieldNumber: 43)
      }
      if _storage._wirelessMode2Ghz != .default {
        try visitor.visitSingularEnumField(value: _storage._wirelessMode2Ghz, fieldNumber: 44)
      }
      if _storage._wirelessMode5Ghz != .default {
        try visitor.visitSingularEnumField(value: _storage._wirelessMode5Ghz, fieldNumber: 45)
      }
      if _storage._htBandwidth2Ghz != .default {
        try visitor.visitSingularEnumField(value: _storage._htBandwidth2Ghz, fieldNumber: 46)
      }
      if _storage._htBandwidth5Ghz != .default {
        try visitor.visitSingularEnumField(value: _storage._htBandwidth5Ghz, fieldNumber: 47)
      }
      if _storage._vhtBandwidth != .default {
        try visitor.visitSingularEnumField(value: _storage._vhtBandwidth, fieldNumber: 48)
      }
      if _storage._isAviation != false {
        try visitor.visitSingularBoolField(value: _storage._isAviation, fieldNumber: 49)
      }
      if _storage._secureDns != false {
        try visitor.visitSingularBoolField(value: _storage._secureDns, fieldNumber: 50)
      }
      if _storage._apMode != false {
        try visitor.visitSingularBoolField(value: _storage._apMode, fieldNumber: 51)
      }
      if _storage._disableMeshOnboarding != false {
        try visitor.visitSingularBoolField(value: _storage._disableMeshOnboarding, fieldNumber: 52)
      }
      if _storage._pinCountryCode != false {
        try visitor.visitSingularBoolField(value: _storage._pinCountryCode, fieldNumber: 53)
      }
      if _storage._customPowerTable != false {
        try visitor.visitSingularBoolField(value: _storage._customPowerTable, fieldNumber: 54)
      }
      if _storage._usePublicServices != false {
        try visitor.visitSingularBoolField(value: _storage._usePublicServices, fieldNumber: 55)
      }
      if _storage._disableAutomatedSpeedtests != false {
        try visitor.visitSingularBoolField(value: _storage._disableAutomatedSpeedtests, fieldNumber: 56)
      }
      if _storage._channel5GhzHigh != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._channel5GhzHigh, fieldNumber: 57)
      }
      if _storage._wirelessMode5GhzHigh != .default {
        try visitor.visitSingularEnumField(value: _storage._wirelessMode5GhzHigh, fieldNumber: 58)
      }
      if _storage._htBandwidth5GhzHigh != .default {
        try visitor.visitSingularEnumField(value: _storage._htBandwidth5GhzHigh, fieldNumber: 59)
      }
      if _storage._vhtBandwidth5GhzHigh != .default {
        try visitor.visitSingularEnumField(value: _storage._vhtBandwidth5GhzHigh, fieldNumber: 60)
      }
      if _storage._enableUmbilicalVlan != false {
        try visitor.visitSingularBoolField(value: _storage._enableUmbilicalVlan, fieldNumber: 61)
      }
      if !_storage._clientNames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._clientNames, fieldNumber: 62)
      }
      if _storage._outdoorMode != false {
        try visitor.visitSingularBoolField(value: _storage._outdoorMode, fieldNumber: 63)
      }
      if _storage._disable2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._disable2Ghz, fieldNumber: 64)
      }
      if _storage._disable5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._disable5Ghz, fieldNumber: 65)
      }
      if _storage._disable5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._disable5GhzHigh, fieldNumber: 66)
      }
      if _storage._disableXMeshBackhaul != false {
        try visitor.visitSingularBoolField(value: _storage._disableXMeshBackhaul, fieldNumber: 67)
      }
      if !_storage._goldenBssid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._goldenBssid, fieldNumber: 68)
      }
      if _storage._goldenIfaceType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._goldenIfaceType, fieldNumber: 69)
      }
      if _storage._txPowerLevel2Ghz != .txPowerLevel100 {
        try visitor.visitSingularEnumField(value: _storage._txPowerLevel2Ghz, fieldNumber: 70)
      }
      if _storage._txPowerLevel5Ghz != .txPowerLevel100 {
        try visitor.visitSingularEnumField(value: _storage._txPowerLevel5Ghz, fieldNumber: 71)
      }
      if _storage._txPowerLevel5GhzHigh != .txPowerLevel100 {
        try visitor.visitSingularEnumField(value: _storage._txPowerLevel5GhzHigh, fieldNumber: 72)
      }
      if _storage._disablePendingUpdateReboot != false {
        try visitor.visitSingularBoolField(value: _storage._disablePendingUpdateReboot, fieldNumber: 73)
      }
      if !_storage._clientConfigs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._clientConfigs, fieldNumber: 74)
      }
      if _storage._disableSetWifiConfigFromController != false {
        try visitor.visitSingularBoolField(value: _storage._disableSetWifiConfigFromController, fieldNumber: 75)
      }
      if !_storage._clientKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._clientKey, fieldNumber: 76)
      }
      if _storage._wanHostDscpMark != 0 {
        try visitor.visitSingularInt32Field(value: _storage._wanHostDscpMark, fieldNumber: 77)
      }
      if _storage._tag != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._tag, fieldNumber: 78)
      }
      if _storage._debugPopPings != false {
        try visitor.visitSingularBoolField(value: _storage._debugPopPings, fieldNumber: 79)
      }
      if _storage._clientTester != false {
        try visitor.visitSingularBoolField(value: _storage._clientTester, fieldNumber: 80)
      }
      if _storage._applySetupComplete != false {
        try visitor.visitSingularBoolField(value: _storage._applySetupComplete, fieldNumber: 1010)
      }
      if _storage._applyChannel2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyChannel2Ghz, fieldNumber: 1013)
      }
      if _storage._applyChannel5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyChannel5Ghz, fieldNumber: 1014)
      }
      if _storage._applyChannel5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyChannel5GhzHigh, fieldNumber: 1016)
      }
      if _storage._applyIsRepeater != false {
        try visitor.visitSingularBoolField(value: _storage._applyIsRepeater, fieldNumber: 1031)
      }
      if _storage._applyMeshConfigs != false {
        try visitor.visitSingularBoolField(value: _storage._applyMeshConfigs, fieldNumber: 1033)
      }
      if _storage._applyNameservers != false {
        try visitor.visitSingularBoolField(value: _storage._applyNameservers, fieldNumber: 1054)
      }
      if _storage._applyBypassMode != false {
        try visitor.visitSingularBoolField(value: _storage._applyBypassMode, fieldNumber: 1055)
      }
      if _storage._applyDfsEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._applyDfsEnabled, fieldNumber: 1058)
      }
      if _storage._applyWirelessMode2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyWirelessMode2Ghz, fieldNumber: 1059)
      }
      if _storage._applyWirelessMode5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyWirelessMode5Ghz, fieldNumber: 1060)
      }
      if _storage._applyHtBandwidth2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyHtBandwidth2Ghz, fieldNumber: 1061)
      }
      if _storage._applyHtBandwidth5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyHtBandwidth5Ghz, fieldNumber: 1062)
      }
      if _storage._applyVhtBandwidth != false {
        try visitor.visitSingularBoolField(value: _storage._applyVhtBandwidth, fieldNumber: 1063)
      }
      if _storage._applyIsAviation != false {
        try visitor.visitSingularBoolField(value: _storage._applyIsAviation, fieldNumber: 1064)
      }
      if _storage._applySecureDns != false {
        try visitor.visitSingularBoolField(value: _storage._applySecureDns, fieldNumber: 1065)
      }
      if _storage._applyApMode != false {
        try visitor.visitSingularBoolField(value: _storage._applyApMode, fieldNumber: 1066)
      }
      if _storage._applyDisableMeshOnboarding != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisableMeshOnboarding, fieldNumber: 1067)
      }
      if _storage._applyUsePublicServices != false {
        try visitor.visitSingularBoolField(value: _storage._applyUsePublicServices, fieldNumber: 1068)
      }
      if _storage._applyDisableAutomatedSpeedtests != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisableAutomatedSpeedtests, fieldNumber: 1069)
      }
      if _storage._applyWirelessMode5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyWirelessMode5GhzHigh, fieldNumber: 1070)
      }
      if _storage._applyHtBandwidth5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyHtBandwidth5GhzHigh, fieldNumber: 1071)
      }
      if _storage._applyVhtBandwidth5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyVhtBandwidth5GhzHigh, fieldNumber: 1072)
      }
      if _storage._applyEnableUmbilicalVlan != false {
        try visitor.visitSingularBoolField(value: _storage._applyEnableUmbilicalVlan, fieldNumber: 1073)
      }
      if _storage._applyClientNames != false {
        try visitor.visitSingularBoolField(value: _storage._applyClientNames, fieldNumber: 1074)
      }
      if _storage._applyOutdoorMode != false {
        try visitor.visitSingularBoolField(value: _storage._applyOutdoorMode, fieldNumber: 1075)
      }
      if _storage._applyDisable2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisable2Ghz, fieldNumber: 1076)
      }
      if _storage._applyDisable5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisable5Ghz, fieldNumber: 1077)
      }
      if _storage._applyDisable5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisable5GhzHigh, fieldNumber: 1078)
      }
      if _storage._applyDisableXMeshBackhaul != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisableXMeshBackhaul, fieldNumber: 1079)
      }
      if _storage._applyGoldenBssid != false {
        try visitor.visitSingularBoolField(value: _storage._applyGoldenBssid, fieldNumber: 1080)
      }
      if _storage._applyGoldenIfaceType != false {
        try visitor.visitSingularBoolField(value: _storage._applyGoldenIfaceType, fieldNumber: 1081)
      }
      if _storage._applyTxPowerLevel2Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyTxPowerLevel2Ghz, fieldNumber: 1082)
      }
      if _storage._applyTxPowerLevel5Ghz != false {
        try visitor.visitSingularBoolField(value: _storage._applyTxPowerLevel5Ghz, fieldNumber: 1083)
      }
      if _storage._applyTxPowerLevel5GhzHigh != false {
        try visitor.visitSingularBoolField(value: _storage._applyTxPowerLevel5GhzHigh, fieldNumber: 1084)
      }
      if _storage._applyCountryCode != false {
        try visitor.visitSingularBoolField(value: _storage._applyCountryCode, fieldNumber: 1085)
      }
      if _storage._applyPinCountryCode != false {
        try visitor.visitSingularBoolField(value: _storage._applyPinCountryCode, fieldNumber: 1086)
      }
      if _storage._applyCustomPowerTable != false {
        try visitor.visitSingularBoolField(value: _storage._applyCustomPowerTable, fieldNumber: 1087)
      }
      if _storage._applyDisablePendingUpdateReboot != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisablePendingUpdateReboot, fieldNumber: 1088)
      }
      if _storage._applyClientConfigs != false {
        try visitor.visitSingularBoolField(value: _storage._applyClientConfigs, fieldNumber: 1089)
      }
      if _storage._applyDisableSetWifiConfigFromController != false {
        try visitor.visitSingularBoolField(value: _storage._applyDisableSetWifiConfigFromController, fieldNumber: 1090)
      }
      if _storage._applyClientKey != false {
        try visitor.visitSingularBoolField(value: _storage._applyClientKey, fieldNumber: 1091)
      }
      if _storage._applyWanTrafficControl != false {
        try visitor.visitSingularBoolField(value: _storage._applyWanTrafficControl, fieldNumber: 1092)
      }
      if _storage._applyWanHostDscpMark != false {
        try visitor.visitSingularBoolField(value: _storage._applyWanHostDscpMark, fieldNumber: 1093)
      }
      if _storage._applyDebugPopPings != false {
        try visitor.visitSingularBoolField(value: _storage._applyDebugPopPings, fieldNumber: 1095)
      }
      if _storage._applyClientTester != false {
        try visitor.visitSingularBoolField(value: _storage._applyClientTester, fieldNumber: 1096)
      }
      if !_storage._networks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._networks, fieldNumber: 1100)
      }
      if _storage._applyNetworks != false {
        try visitor.visitSingularBoolField(value: _storage._applyNetworks, fieldNumber: 1101)
      }
      try { if let v = _storage._boot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3001)
      } }()
      if !_storage._meshConfigsUpdates.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SpaceX_API_Device_MeshConfig>.self, value: _storage._meshConfigsUpdates, fieldNumber: 3033)
      }
      switch _storage._wanTrafficControl {
      case .wanNoTrafficControl?: try {
        guard case .wanNoTrafficControl(let v)? = _storage._wanTrafficControl else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4001)
      }()
      case .wanAckSuppression?: try {
        guard case .wanAckSuppression(let v)? = _storage._wanTrafficControl else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4002)
      }()
      case .wanCakeRateLimit?: try {
        guard case .wanCakeRateLimit(let v)? = _storage._wanTrafficControl else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4003)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiConfig, rhs: SpaceX_API_Device_WifiConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._countryCode != rhs_storage._countryCode {return false}
        if _storage._applyCountryCode != rhs_storage._applyCountryCode {return false}
        if _storage._pinCountryCode != rhs_storage._pinCountryCode {return false}
        if _storage._applyPinCountryCode != rhs_storage._applyPinCountryCode {return false}
        if _storage._customPowerTable != rhs_storage._customPowerTable {return false}
        if _storage._applyCustomPowerTable != rhs_storage._applyCustomPowerTable {return false}
        if _storage._setupComplete != rhs_storage._setupComplete {return false}
        if _storage._applySetupComplete != rhs_storage._applySetupComplete {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._macWan != rhs_storage._macWan {return false}
        if _storage._macLan != rhs_storage._macLan {return false}
        if _storage._channel2Ghz != rhs_storage._channel2Ghz {return false}
        if _storage._applyChannel2Ghz != rhs_storage._applyChannel2Ghz {return false}
        if _storage._channel5Ghz != rhs_storage._channel5Ghz {return false}
        if _storage._applyChannel5Ghz != rhs_storage._applyChannel5Ghz {return false}
        if _storage._channel5GhzHigh != rhs_storage._channel5GhzHigh {return false}
        if _storage._applyChannel5GhzHigh != rhs_storage._applyChannel5GhzHigh {return false}
        if _storage._meshConfigs != rhs_storage._meshConfigs {return false}
        if _storage._meshConfigsUpdates != rhs_storage._meshConfigsUpdates {return false}
        if _storage._applyMeshConfigs != rhs_storage._applyMeshConfigs {return false}
        if _storage._dynamicKeys != rhs_storage._dynamicKeys {return false}
        if _storage._applyDynamicKeys != rhs_storage._applyDynamicKeys {return false}
        if _storage._isRepeater != rhs_storage._isRepeater {return false}
        if _storage._applyIsRepeater != rhs_storage._applyIsRepeater {return false}
        if _storage._apMode != rhs_storage._apMode {return false}
        if _storage._applyApMode != rhs_storage._applyApMode {return false}
        if _storage._isAviation != rhs_storage._isAviation {return false}
        if _storage._applyIsAviation != rhs_storage._applyIsAviation {return false}
        if _storage._bootCount != rhs_storage._bootCount {return false}
        if _storage._boot != rhs_storage._boot {return false}
        if _storage._nameservers != rhs_storage._nameservers {return false}
        if _storage._applyNameservers != rhs_storage._applyNameservers {return false}
        if _storage._secureDns != rhs_storage._secureDns {return false}
        if _storage._applySecureDns != rhs_storage._applySecureDns {return false}
        if _storage._bypassMode != rhs_storage._bypassMode {return false}
        if _storage._applyBypassMode != rhs_storage._applyBypassMode {return false}
        if _storage._dfsEnabled != rhs_storage._dfsEnabled {return false}
        if _storage._applyDfsEnabled != rhs_storage._applyDfsEnabled {return false}
        if _storage._disableMeshOnboarding != rhs_storage._disableMeshOnboarding {return false}
        if _storage._applyDisableMeshOnboarding != rhs_storage._applyDisableMeshOnboarding {return false}
        if _storage._networks != rhs_storage._networks {return false}
        if _storage._applyNetworks != rhs_storage._applyNetworks {return false}
        if _storage._incarnation != rhs_storage._incarnation {return false}
        if _storage._wirelessMode2Ghz != rhs_storage._wirelessMode2Ghz {return false}
        if _storage._applyWirelessMode2Ghz != rhs_storage._applyWirelessMode2Ghz {return false}
        if _storage._wirelessMode5Ghz != rhs_storage._wirelessMode5Ghz {return false}
        if _storage._applyWirelessMode5Ghz != rhs_storage._applyWirelessMode5Ghz {return false}
        if _storage._wirelessMode5GhzHigh != rhs_storage._wirelessMode5GhzHigh {return false}
        if _storage._applyWirelessMode5GhzHigh != rhs_storage._applyWirelessMode5GhzHigh {return false}
        if _storage._htBandwidth2Ghz != rhs_storage._htBandwidth2Ghz {return false}
        if _storage._applyHtBandwidth2Ghz != rhs_storage._applyHtBandwidth2Ghz {return false}
        if _storage._htBandwidth5Ghz != rhs_storage._htBandwidth5Ghz {return false}
        if _storage._applyHtBandwidth5Ghz != rhs_storage._applyHtBandwidth5Ghz {return false}
        if _storage._htBandwidth5GhzHigh != rhs_storage._htBandwidth5GhzHigh {return false}
        if _storage._applyHtBandwidth5GhzHigh != rhs_storage._applyHtBandwidth5GhzHigh {return false}
        if _storage._vhtBandwidth != rhs_storage._vhtBandwidth {return false}
        if _storage._applyVhtBandwidth != rhs_storage._applyVhtBandwidth {return false}
        if _storage._vhtBandwidth5GhzHigh != rhs_storage._vhtBandwidth5GhzHigh {return false}
        if _storage._applyVhtBandwidth5GhzHigh != rhs_storage._applyVhtBandwidth5GhzHigh {return false}
        if _storage._usePublicServices != rhs_storage._usePublicServices {return false}
        if _storage._applyUsePublicServices != rhs_storage._applyUsePublicServices {return false}
        if _storage._disableAutomatedSpeedtests != rhs_storage._disableAutomatedSpeedtests {return false}
        if _storage._applyDisableAutomatedSpeedtests != rhs_storage._applyDisableAutomatedSpeedtests {return false}
        if _storage._enableUmbilicalVlan != rhs_storage._enableUmbilicalVlan {return false}
        if _storage._applyEnableUmbilicalVlan != rhs_storage._applyEnableUmbilicalVlan {return false}
        if _storage._clientNames != rhs_storage._clientNames {return false}
        if _storage._applyClientNames != rhs_storage._applyClientNames {return false}
        if _storage._outdoorMode != rhs_storage._outdoorMode {return false}
        if _storage._applyOutdoorMode != rhs_storage._applyOutdoorMode {return false}
        if _storage._disable2Ghz != rhs_storage._disable2Ghz {return false}
        if _storage._applyDisable2Ghz != rhs_storage._applyDisable2Ghz {return false}
        if _storage._disable5Ghz != rhs_storage._disable5Ghz {return false}
        if _storage._applyDisable5Ghz != rhs_storage._applyDisable5Ghz {return false}
        if _storage._disable5GhzHigh != rhs_storage._disable5GhzHigh {return false}
        if _storage._applyDisable5GhzHigh != rhs_storage._applyDisable5GhzHigh {return false}
        if _storage._disableXMeshBackhaul != rhs_storage._disableXMeshBackhaul {return false}
        if _storage._applyDisableXMeshBackhaul != rhs_storage._applyDisableXMeshBackhaul {return false}
        if _storage._goldenBssid != rhs_storage._goldenBssid {return false}
        if _storage._applyGoldenBssid != rhs_storage._applyGoldenBssid {return false}
        if _storage._goldenIfaceType != rhs_storage._goldenIfaceType {return false}
        if _storage._applyGoldenIfaceType != rhs_storage._applyGoldenIfaceType {return false}
        if _storage._txPowerLevel2Ghz != rhs_storage._txPowerLevel2Ghz {return false}
        if _storage._applyTxPowerLevel2Ghz != rhs_storage._applyTxPowerLevel2Ghz {return false}
        if _storage._txPowerLevel5Ghz != rhs_storage._txPowerLevel5Ghz {return false}
        if _storage._applyTxPowerLevel5Ghz != rhs_storage._applyTxPowerLevel5Ghz {return false}
        if _storage._txPowerLevel5GhzHigh != rhs_storage._txPowerLevel5GhzHigh {return false}
        if _storage._applyTxPowerLevel5GhzHigh != rhs_storage._applyTxPowerLevel5GhzHigh {return false}
        if _storage._disablePendingUpdateReboot != rhs_storage._disablePendingUpdateReboot {return false}
        if _storage._applyDisablePendingUpdateReboot != rhs_storage._applyDisablePendingUpdateReboot {return false}
        if _storage._clientConfigs != rhs_storage._clientConfigs {return false}
        if _storage._applyClientConfigs != rhs_storage._applyClientConfigs {return false}
        if _storage._disableSetWifiConfigFromController != rhs_storage._disableSetWifiConfigFromController {return false}
        if _storage._applyDisableSetWifiConfigFromController != rhs_storage._applyDisableSetWifiConfigFromController {return false}
        if _storage._clientKey != rhs_storage._clientKey {return false}
        if _storage._applyClientKey != rhs_storage._applyClientKey {return false}
        if _storage._wanTrafficControl != rhs_storage._wanTrafficControl {return false}
        if _storage._applyWanTrafficControl != rhs_storage._applyWanTrafficControl {return false}
        if _storage._wanHostDscpMark != rhs_storage._wanHostDscpMark {return false}
        if _storage._applyWanHostDscpMark != rhs_storage._applyWanHostDscpMark {return false}
        if _storage._debugPopPings != rhs_storage._debugPopPings {return false}
        if _storage._applyDebugPopPings != rhs_storage._applyDebugPopPings {return false}
        if _storage._clientTester != rhs_storage._clientTester {return false}
        if _storage._applyClientTester != rhs_storage._applyClientTester {return false}
        if _storage._tag != rhs_storage._tag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiConfig.Security: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "WPA2"),
    2: .same(proto: "WPA3"),
    3: .same(proto: "WPA2WPA3"),
  ]
}

extension SpaceX_API_Device_WifiConfig.Band: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RF_UNKNOWN"),
    2: .same(proto: "RF_2GHZ"),
    5: .same(proto: "RF_5GHZ"),
    6: .same(proto: "RF_5GHZ_HIGH"),
  ]
}

extension SpaceX_API_Device_WifiConfig.WirelessMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WIRELESS_MODE_DEFAULT"),
    1: .same(proto: "A_ONLY"),
    2: .same(proto: "B_ONLY"),
    3: .same(proto: "G_ONLY"),
    4: .same(proto: "N_ONLY"),
    5: .same(proto: "B_G_MIXED"),
    6: .same(proto: "A_N_MIXED"),
    7: .same(proto: "G_N_MIXED"),
    8: .same(proto: "B_G_N_MIXED"),
    9: .same(proto: "A_AN_AC_MIXED"),
    10: .same(proto: "AN_AC_MIXED"),
    11: .same(proto: "B_G_N_AX_MIXED"),
    12: .same(proto: "A_AN_AC_AX_MIXED"),
  ]
}

extension SpaceX_API_Device_WifiConfig.HTBandwidth: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HT_BANDWIDTH_DEFAULT"),
    1: .same(proto: "HT_BANDWIDTH_20_MHZ"),
    2: .same(proto: "HT_BANDWIDTH_20_OR_40_MHZ"),
  ]
}

extension SpaceX_API_Device_WifiConfig.VHTBandwidth: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VHT_BANDWIDTH_DEFAULT"),
    1: .same(proto: "VHT_BANDWIDTH_DISABLED"),
    2: .same(proto: "VHT_BANDWIDTH_80_MHZ"),
    3: .same(proto: "VHT_BANDWIDTH_160_MHZ"),
    4: .same(proto: "VHT_BANDWIDTH_80_PLUS_80_MHZ"),
  ]
}

extension SpaceX_API_Device_WifiConfig.BasicServiceSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiConfig.protoMessageName + ".BasicServiceSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1003: .same(proto: "bssid"),
    1005: .same(proto: "ssid"),
    2001: .standard(proto: "auth_open"),
    2002: .standard(proto: "auth_wpa2"),
    2003: .standard(proto: "auth_wpa3"),
    2004: .standard(proto: "auth_wpa2_wpa3"),
    2005: .standard(proto: "auth_radius"),
    1011: .same(proto: "band"),
    1017: .standard(proto: "iface_name"),
    1013: .same(proto: "disable"),
    1015: .same(proto: "hidden"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1003: try { try decoder.decodeSingularStringField(value: &self.bssid) }()
      case 1005: try { try decoder.decodeSingularStringField(value: &self.ssid) }()
      case 1011: try { try decoder.decodeSingularEnumField(value: &self.band) }()
      case 1013: try { try decoder.decodeSingularBoolField(value: &self.disable) }()
      case 1015: try { try decoder.decodeSingularBoolField(value: &self.hidden) }()
      case 1017: try { try decoder.decodeSingularStringField(value: &self.ifaceName) }()
      case 2001: try {
        var v: SpaceX_API_Device_AuthOpen?
        var hadOneofValue = false
        if let current = self.auth {
          hadOneofValue = true
          if case .authOpen(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.auth = .authOpen(v)
        }
      }()
      case 2002: try {
        var v: SpaceX_API_Device_AuthWpa2?
        var hadOneofValue = false
        if let current = self.auth {
          hadOneofValue = true
          if case .authWpa2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.auth = .authWpa2(v)
        }
      }()
      case 2003: try {
        var v: SpaceX_API_Device_AuthWpa3?
        var hadOneofValue = false
        if let current = self.auth {
          hadOneofValue = true
          if case .authWpa3(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.auth = .authWpa3(v)
        }
      }()
      case 2004: try {
        var v: SpaceX_API_Device_AuthWpa2Wpa3?
        var hadOneofValue = false
        if let current = self.auth {
          hadOneofValue = true
          if case .authWpa2Wpa3(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.auth = .authWpa2Wpa3(v)
        }
      }()
      case 2005: try {
        var v: SpaceX_API_Device_AuthRadius?
        var hadOneofValue = false
        if let current = self.auth {
          hadOneofValue = true
          if case .authRadius(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.auth = .authRadius(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bssid.isEmpty {
      try visitor.visitSingularStringField(value: self.bssid, fieldNumber: 1003)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 1005)
    }
    if self.band != .rfUnknown {
      try visitor.visitSingularEnumField(value: self.band, fieldNumber: 1011)
    }
    if self.disable != false {
      try visitor.visitSingularBoolField(value: self.disable, fieldNumber: 1013)
    }
    if self.hidden != false {
      try visitor.visitSingularBoolField(value: self.hidden, fieldNumber: 1015)
    }
    if !self.ifaceName.isEmpty {
      try visitor.visitSingularStringField(value: self.ifaceName, fieldNumber: 1017)
    }
    switch self.auth {
    case .authOpen?: try {
      guard case .authOpen(let v)? = self.auth else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2001)
    }()
    case .authWpa2?: try {
      guard case .authWpa2(let v)? = self.auth else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2002)
    }()
    case .authWpa3?: try {
      guard case .authWpa3(let v)? = self.auth else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2003)
    }()
    case .authWpa2Wpa3?: try {
      guard case .authWpa2Wpa3(let v)? = self.auth else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2004)
    }()
    case .authRadius?: try {
      guard case .authRadius(let v)? = self.auth else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2005)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiConfig.BasicServiceSet, rhs: SpaceX_API_Device_WifiConfig.BasicServiceSet) -> Bool {
    if lhs.bssid != rhs.bssid {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.band != rhs.band {return false}
    if lhs.ifaceName != rhs.ifaceName {return false}
    if lhs.disable != rhs.disable {return false}
    if lhs.hidden != rhs.hidden {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WifiConfig.Network: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WifiConfig.protoMessageName + ".Network"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1003: .same(proto: "ipv4"),
    1012: .standard(proto: "dhcpv4_start"),
    1015: .standard(proto: "dhcp_disabled"),
    1016: .standard(proto: "dhcpv4_lease_duration_s"),
    1011: .same(proto: "domain"),
    1007: .standard(proto: "basic_service_sets"),
    1008: .standard(proto: "client_isolation"),
    1009: .same(proto: "guest"),
    1010: .same(proto: "landing"),
    1017: .standard(proto: "landing_page_v2"),
    1013: .same(proto: "internal"),
    1014: .same(proto: "vlan"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1003: try { try decoder.decodeSingularStringField(value: &self.ipv4) }()
      case 1007: try { try decoder.decodeRepeatedMessageField(value: &self.basicServiceSets) }()
      case 1008: try { try decoder.decodeSingularBoolField(value: &self.clientIsolation) }()
      case 1009: try { try decoder.decodeSingularBoolField(value: &self.guest) }()
      case 1010: try { try decoder.decodeSingularStringField(value: &self.landing) }()
      case 1011: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 1012: try { try decoder.decodeSingularUInt32Field(value: &self.dhcpv4Start) }()
      case 1013: try { try decoder.decodeSingularBoolField(value: &self.`internal`) }()
      case 1014: try { try decoder.decodeSingularUInt32Field(value: &self.vlan) }()
      case 1015: try { try decoder.decodeSingularBoolField(value: &self.dhcpDisabled) }()
      case 1016: try { try decoder.decodeSingularUInt32Field(value: &self.dhcpv4LeaseDurationS) }()
      case 1017: try { try decoder.decodeSingularBoolField(value: &self.landingPageV2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ipv4.isEmpty {
      try visitor.visitSingularStringField(value: self.ipv4, fieldNumber: 1003)
    }
    if !self.basicServiceSets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.basicServiceSets, fieldNumber: 1007)
    }
    if self.clientIsolation != false {
      try visitor.visitSingularBoolField(value: self.clientIsolation, fieldNumber: 1008)
    }
    if self.guest != false {
      try visitor.visitSingularBoolField(value: self.guest, fieldNumber: 1009)
    }
    if !self.landing.isEmpty {
      try visitor.visitSingularStringField(value: self.landing, fieldNumber: 1010)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 1011)
    }
    if self.dhcpv4Start != 0 {
      try visitor.visitSingularUInt32Field(value: self.dhcpv4Start, fieldNumber: 1012)
    }
    if self.`internal` != false {
      try visitor.visitSingularBoolField(value: self.`internal`, fieldNumber: 1013)
    }
    if self.vlan != 0 {
      try visitor.visitSingularUInt32Field(value: self.vlan, fieldNumber: 1014)
    }
    if self.dhcpDisabled != false {
      try visitor.visitSingularBoolField(value: self.dhcpDisabled, fieldNumber: 1015)
    }
    if self.dhcpv4LeaseDurationS != 0 {
      try visitor.visitSingularUInt32Field(value: self.dhcpv4LeaseDurationS, fieldNumber: 1016)
    }
    if self.landingPageV2 != false {
      try visitor.visitSingularBoolField(value: self.landingPageV2, fieldNumber: 1017)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WifiConfig.Network, rhs: SpaceX_API_Device_WifiConfig.Network) -> Bool {
    if lhs.ipv4 != rhs.ipv4 {return false}
    if lhs.dhcpv4Start != rhs.dhcpv4Start {return false}
    if lhs.dhcpDisabled != rhs.dhcpDisabled {return false}
    if lhs.dhcpv4LeaseDurationS != rhs.dhcpv4LeaseDurationS {return false}
    if lhs.domain != rhs.domain {return false}
    if lhs.basicServiceSets != rhs.basicServiceSets {return false}
    if lhs.clientIsolation != rhs.clientIsolation {return false}
    if lhs.guest != rhs.guest {return false}
    if lhs.landing != rhs.landing {return false}
    if lhs.landingPageV2 != rhs.landingPageV2 {return false}
    if lhs.`internal` != rhs.`internal` {return false}
    if lhs.vlan != rhs.vlan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WeeklyBlockSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeeklyBlockSchedule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_ranges"),
    2: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.blockRanges) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockRanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blockRanges, fieldNumber: 1)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WeeklyBlockSchedule, rhs: SpaceX_API_Device_WeeklyBlockSchedule) -> Bool {
    if lhs.blockRanges != rhs.blockRanges {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_WeeklyBlockSchedule.BlockRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SpaceX_API_Device_WeeklyBlockSchedule.protoMessageName + ".BlockRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_minutes"),
    2: .standard(proto: "end_minutes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.startMinutes) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.endMinutes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinutes, fieldNumber: 1)
    }
    if self.endMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinutes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_WeeklyBlockSchedule.BlockRange, rhs: SpaceX_API_Device_WeeklyBlockSchedule.BlockRange) -> Bool {
    if lhs.startMinutes != rhs.startMinutes {return false}
    if lhs.endMinutes != rhs.endMinutes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_ClientConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "mac_address"),
    3: .standard(proto: "given_name"),
    5: .standard(proto: "weekly_block_schedules"),
    6: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.macAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.givenName) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.weeklyBlockSchedules) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularUInt32Field(value: self.clientID, fieldNumber: 1)
    }
    if !self.macAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.macAddress, fieldNumber: 2)
    }
    if !self.givenName.isEmpty {
      try visitor.visitSingularStringField(value: self.givenName, fieldNumber: 3)
    }
    if !self.weeklyBlockSchedules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.weeklyBlockSchedules, fieldNumber: 5)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_ClientConfig, rhs: SpaceX_API_Device_ClientConfig) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.macAddress != rhs.macAddress {return false}
    if lhs.givenName != rhs.givenName {return false}
    if lhs.weeklyBlockSchedules != rhs.weeklyBlockSchedules {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_ClientName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mac_address"),
    2: .standard(proto: "given_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.macAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.givenName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.macAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.macAddress, fieldNumber: 1)
    }
    if !self.givenName.isEmpty {
      try visitor.visitSingularStringField(value: self.givenName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_ClientName, rhs: SpaceX_API_Device_ClientName) -> Bool {
    if lhs.macAddress != rhs.macAddress {return false}
    if lhs.givenName != rhs.givenName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AuthOpen: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthOpen"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AuthOpen, rhs: SpaceX_API_Device_AuthOpen) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AuthWpa2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthWpa2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AuthWpa2, rhs: SpaceX_API_Device_AuthWpa2) -> Bool {
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AuthWpa3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthWpa3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AuthWpa3, rhs: SpaceX_API_Device_AuthWpa3) -> Bool {
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AuthWpa2Wpa3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthWpa2Wpa3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AuthWpa2Wpa3, rhs: SpaceX_API_Device_AuthWpa2Wpa3) -> Bool {
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AuthRadius: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthRadius"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "server"),
    3: .standard(proto: "server_ca"),
    4: .standard(proto: "server_ca_base_64"),
    2: .same(proto: "password"),
    5: .same(proto: "transport"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.server) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serverCa) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serverCaBase64) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.transport) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.server.isEmpty {
      try visitor.visitSingularStringField(value: self.server, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if !self.serverCa.isEmpty {
      try visitor.visitSingularStringField(value: self.serverCa, fieldNumber: 3)
    }
    if !self.serverCaBase64.isEmpty {
      try visitor.visitSingularStringField(value: self.serverCaBase64, fieldNumber: 4)
    }
    if self.transport != .tcp {
      try visitor.visitSingularEnumField(value: self.transport, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AuthRadius, rhs: SpaceX_API_Device_AuthRadius) -> Bool {
    if lhs.server != rhs.server {return false}
    if lhs.serverCa != rhs.serverCa {return false}
    if lhs.serverCaBase64 != rhs.serverCaBase64 {return false}
    if lhs.password != rhs.password {return false}
    if lhs.transport != rhs.transport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_NoTrafficControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NoTrafficControl"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_NoTrafficControl, rhs: SpaceX_API_Device_NoTrafficControl) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_AckSuppression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AckSuppression"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ack_mark"),
    2: .standard(proto: "htb_ack_queue_rate"),
    3: .standard(proto: "htb_ack_queue_ceil"),
    4: .standard(proto: "cake_queue_bandwidth"),
    5: .standard(proto: "cake_ack_filter_aggressive"),
    6: .standard(proto: "cake_manual_rtt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.ackMark) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.htbAckQueueRate) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.htbAckQueueCeil) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.cakeQueueBandwidth) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.cakeAckFilterAggressive) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.cakeManualRtt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ackMark != 0 {
      try visitor.visitSingularUInt32Field(value: self.ackMark, fieldNumber: 1)
    }
    if self.htbAckQueueRate.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.htbAckQueueRate, fieldNumber: 2)
    }
    if self.htbAckQueueCeil.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.htbAckQueueCeil, fieldNumber: 3)
    }
    if self.cakeQueueBandwidth.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.cakeQueueBandwidth, fieldNumber: 4)
    }
    if self.cakeAckFilterAggressive != false {
      try visitor.visitSingularBoolField(value: self.cakeAckFilterAggressive, fieldNumber: 5)
    }
    if self.cakeManualRtt.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.cakeManualRtt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_AckSuppression, rhs: SpaceX_API_Device_AckSuppression) -> Bool {
    if lhs.ackMark != rhs.ackMark {return false}
    if lhs.htbAckQueueRate != rhs.htbAckQueueRate {return false}
    if lhs.htbAckQueueCeil != rhs.htbAckQueueCeil {return false}
    if lhs.cakeQueueBandwidth != rhs.cakeQueueBandwidth {return false}
    if lhs.cakeAckFilterAggressive != rhs.cakeAckFilterAggressive {return false}
    if lhs.cakeManualRtt != rhs.cakeManualRtt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_CakeRateLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CakeRateLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_mark"),
    2: .same(proto: "bandwidth"),
    3: .standard(proto: "priority_queue_parameter"),
    4: .standard(proto: "ack_filter"),
    6: .standard(proto: "manual_rtt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.hostMark) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.bandwidth) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.priorityQueueParameter) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.ackFilter) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.manualRtt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hostMark != 0 {
      try visitor.visitSingularUInt32Field(value: self.hostMark, fieldNumber: 1)
    }
    if self.bandwidth.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.bandwidth, fieldNumber: 2)
    }
    if self.priorityQueueParameter != .diffserv3 {
      try visitor.visitSingularEnumField(value: self.priorityQueueParameter, fieldNumber: 3)
    }
    if self.ackFilter != .noAckFilter {
      try visitor.visitSingularEnumField(value: self.ackFilter, fieldNumber: 4)
    }
    if self.manualRtt.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.manualRtt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_CakeRateLimit, rhs: SpaceX_API_Device_CakeRateLimit) -> Bool {
    if lhs.hostMark != rhs.hostMark {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.priorityQueueParameter != rhs.priorityQueueParameter {return false}
    if lhs.ackFilter != rhs.ackFilter {return false}
    if lhs.manualRtt != rhs.manualRtt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
