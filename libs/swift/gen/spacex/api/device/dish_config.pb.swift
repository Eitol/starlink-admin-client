// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/dish_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SpaceX_API_Device_DishConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var snowMeltMode: SpaceX_API_Device_DishConfig.SnowMeltMode = .auto

  var applySnowMeltMode: Bool = false

  var locationRequestMode: SpaceX_API_Device_DishConfig.LocationRequestMode = .none

  var applyLocationRequestMode: Bool = false

  var levelDishMode: SpaceX_API_Device_DishConfig.LevelDishMode = .tiltLikeNormal

  var applyLevelDishMode: Bool = false

  var powerSaveStartMinutes: UInt32 = 0

  var applyPowerSaveStartMinutes: Bool = false

  var powerSaveDurationMinutes: UInt32 = 0

  var applyPowerSaveDurationMinutes: Bool = false

  var powerSaveMode: Bool = false

  var applyPowerSaveMode: Bool = false

  var swupdateThreeDayDeferralEnabled: Bool = false

  var applySwupdateThreeDayDeferralEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SnowMeltMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case auto // = 0
    case alwaysOn // = 1
    case alwaysOff // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .auto
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .auto
      case 1: self = .alwaysOn
      case 2: self = .alwaysOff
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .auto: return 0
      case .alwaysOn: return 1
      case .alwaysOff: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_DishConfig.SnowMeltMode] = [
      .auto,
      .alwaysOn,
      .alwaysOff,
    ]

  }

  enum LocationRequestMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case none // = 0
    case local // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .local
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .local: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_DishConfig.LocationRequestMode] = [
      .none,
      .local,
    ]

  }

  enum LevelDishMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case tiltLikeNormal // = 0
    case forceLevel // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .tiltLikeNormal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .tiltLikeNormal
      case 1: self = .forceLevel
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .tiltLikeNormal: return 0
      case .forceLevel: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [SpaceX_API_Device_DishConfig.LevelDishMode] = [
      .tiltLikeNormal,
      .forceLevel,
    ]

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_DishConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DishConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "snow_melt_mode"),
    1001: .standard(proto: "apply_snow_melt_mode"),
    2: .standard(proto: "location_request_mode"),
    2001: .standard(proto: "apply_location_request_mode"),
    3: .standard(proto: "level_dish_mode"),
    3001: .standard(proto: "apply_level_dish_mode"),
    4: .standard(proto: "power_save_start_minutes"),
    4001: .standard(proto: "apply_power_save_start_minutes"),
    5: .standard(proto: "power_save_duration_minutes"),
    5001: .standard(proto: "apply_power_save_duration_minutes"),
    6: .standard(proto: "power_save_mode"),
    6001: .standard(proto: "apply_power_save_mode"),
    7: .standard(proto: "swupdate_three_day_deferral_enabled"),
    7001: .standard(proto: "apply_swupdate_three_day_deferral_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.snowMeltMode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.locationRequestMode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.levelDishMode) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.powerSaveStartMinutes) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.powerSaveDurationMinutes) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.powerSaveMode) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.swupdateThreeDayDeferralEnabled) }()
      case 1001: try { try decoder.decodeSingularBoolField(value: &self.applySnowMeltMode) }()
      case 2001: try { try decoder.decodeSingularBoolField(value: &self.applyLocationRequestMode) }()
      case 3001: try { try decoder.decodeSingularBoolField(value: &self.applyLevelDishMode) }()
      case 4001: try { try decoder.decodeSingularBoolField(value: &self.applyPowerSaveStartMinutes) }()
      case 5001: try { try decoder.decodeSingularBoolField(value: &self.applyPowerSaveDurationMinutes) }()
      case 6001: try { try decoder.decodeSingularBoolField(value: &self.applyPowerSaveMode) }()
      case 7001: try { try decoder.decodeSingularBoolField(value: &self.applySwupdateThreeDayDeferralEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.snowMeltMode != .auto {
      try visitor.visitSingularEnumField(value: self.snowMeltMode, fieldNumber: 1)
    }
    if self.locationRequestMode != .none {
      try visitor.visitSingularEnumField(value: self.locationRequestMode, fieldNumber: 2)
    }
    if self.levelDishMode != .tiltLikeNormal {
      try visitor.visitSingularEnumField(value: self.levelDishMode, fieldNumber: 3)
    }
    if self.powerSaveStartMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.powerSaveStartMinutes, fieldNumber: 4)
    }
    if self.powerSaveDurationMinutes != 0 {
      try visitor.visitSingularUInt32Field(value: self.powerSaveDurationMinutes, fieldNumber: 5)
    }
    if self.powerSaveMode != false {
      try visitor.visitSingularBoolField(value: self.powerSaveMode, fieldNumber: 6)
    }
    if self.swupdateThreeDayDeferralEnabled != false {
      try visitor.visitSingularBoolField(value: self.swupdateThreeDayDeferralEnabled, fieldNumber: 7)
    }
    if self.applySnowMeltMode != false {
      try visitor.visitSingularBoolField(value: self.applySnowMeltMode, fieldNumber: 1001)
    }
    if self.applyLocationRequestMode != false {
      try visitor.visitSingularBoolField(value: self.applyLocationRequestMode, fieldNumber: 2001)
    }
    if self.applyLevelDishMode != false {
      try visitor.visitSingularBoolField(value: self.applyLevelDishMode, fieldNumber: 3001)
    }
    if self.applyPowerSaveStartMinutes != false {
      try visitor.visitSingularBoolField(value: self.applyPowerSaveStartMinutes, fieldNumber: 4001)
    }
    if self.applyPowerSaveDurationMinutes != false {
      try visitor.visitSingularBoolField(value: self.applyPowerSaveDurationMinutes, fieldNumber: 5001)
    }
    if self.applyPowerSaveMode != false {
      try visitor.visitSingularBoolField(value: self.applyPowerSaveMode, fieldNumber: 6001)
    }
    if self.applySwupdateThreeDayDeferralEnabled != false {
      try visitor.visitSingularBoolField(value: self.applySwupdateThreeDayDeferralEnabled, fieldNumber: 7001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_DishConfig, rhs: SpaceX_API_Device_DishConfig) -> Bool {
    if lhs.snowMeltMode != rhs.snowMeltMode {return false}
    if lhs.applySnowMeltMode != rhs.applySnowMeltMode {return false}
    if lhs.locationRequestMode != rhs.locationRequestMode {return false}
    if lhs.applyLocationRequestMode != rhs.applyLocationRequestMode {return false}
    if lhs.levelDishMode != rhs.levelDishMode {return false}
    if lhs.applyLevelDishMode != rhs.applyLevelDishMode {return false}
    if lhs.powerSaveStartMinutes != rhs.powerSaveStartMinutes {return false}
    if lhs.applyPowerSaveStartMinutes != rhs.applyPowerSaveStartMinutes {return false}
    if lhs.powerSaveDurationMinutes != rhs.powerSaveDurationMinutes {return false}
    if lhs.applyPowerSaveDurationMinutes != rhs.applyPowerSaveDurationMinutes {return false}
    if lhs.powerSaveMode != rhs.powerSaveMode {return false}
    if lhs.applyPowerSaveMode != rhs.applyPowerSaveMode {return false}
    if lhs.swupdateThreeDayDeferralEnabled != rhs.swupdateThreeDayDeferralEnabled {return false}
    if lhs.applySwupdateThreeDayDeferralEnabled != rhs.applySwupdateThreeDayDeferralEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_DishConfig.SnowMeltMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO"),
    1: .same(proto: "ALWAYS_ON"),
    2: .same(proto: "ALWAYS_OFF"),
  ]
}

extension SpaceX_API_Device_DishConfig.LocationRequestMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "LOCAL"),
  ]
}

extension SpaceX_API_Device_DishConfig.LevelDishMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TILT_LIKE_NORMAL"),
    1: .same(proto: "FORCE_LEVEL"),
  ]
}
