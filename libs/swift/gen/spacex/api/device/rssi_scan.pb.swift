// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/rssi_scan.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SpaceX_API_Device_RssiEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thetaDegree: Double = 0

  var phiDegree: Double = 0

  var rssiDbf: Double = 0

  var scanTimestampMs: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_DishActivateRssiScan: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var channel: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_DishGetRssiScanResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var channel: UInt32 = 0

  var requestTimestamp: UInt64 = 0

  var numberSamples: UInt32 = 0

  var rssiScanPoints: [SpaceX_API_Device_RssiEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_RssiEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RssiEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "theta_degree"),
    2: .standard(proto: "phi_degree"),
    3: .standard(proto: "rssi_dbf"),
    4: .standard(proto: "scan_timestamp_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.thetaDegree) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.phiDegree) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.rssiDbf) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.scanTimestampMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.thetaDegree.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.thetaDegree, fieldNumber: 1)
    }
    if self.phiDegree.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.phiDegree, fieldNumber: 2)
    }
    if self.rssiDbf.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.rssiDbf, fieldNumber: 3)
    }
    if self.scanTimestampMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.scanTimestampMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_RssiEntry, rhs: SpaceX_API_Device_RssiEntry) -> Bool {
    if lhs.thetaDegree != rhs.thetaDegree {return false}
    if lhs.phiDegree != rhs.phiDegree {return false}
    if lhs.rssiDbf != rhs.rssiDbf {return false}
    if lhs.scanTimestampMs != rhs.scanTimestampMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_DishActivateRssiScan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DishActivateRssiScan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_DishActivateRssiScan, rhs: SpaceX_API_Device_DishActivateRssiScan) -> Bool {
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_DishGetRssiScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DishGetRssiScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "channel"),
    3: .standard(proto: "request_timestamp"),
    4: .standard(proto: "number_samples"),
    5: .standard(proto: "rssi_scan_points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.requestTimestamp) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.numberSamples) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.rssiScanPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if self.requestTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.requestTimestamp, fieldNumber: 3)
    }
    if self.numberSamples != 0 {
      try visitor.visitSingularUInt32Field(value: self.numberSamples, fieldNumber: 4)
    }
    if !self.rssiScanPoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rssiScanPoints, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_DishGetRssiScanResult, rhs: SpaceX_API_Device_DishGetRssiScanResult) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.requestTimestamp != rhs.requestTimestamp {return false}
    if lhs.numberSamples != rhs.numberSamples {return false}
    if lhs.rssiScanPoints != rhs.rssiScanPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
