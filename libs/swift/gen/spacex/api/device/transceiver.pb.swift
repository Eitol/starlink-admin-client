// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/device/transceiver.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SpaceX_API_Device_TransceiverModulatorState: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case modstateUnknown // = 0
  case modstateEnabled // = 1
  case modstateDisabled // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .modstateUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .modstateUnknown
    case 1: self = .modstateEnabled
    case 2: self = .modstateDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .modstateUnknown: return 0
    case .modstateEnabled: return 1
    case .modstateDisabled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_TransceiverModulatorState] = [
    .modstateUnknown,
    .modstateEnabled,
    .modstateDisabled,
  ]

}

enum SpaceX_API_Device_TransceiverTxRxState: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case txrxUnknown // = 0
  case txrxEnabled // = 1
  case txrxDisabled // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .txrxUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .txrxUnknown
    case 1: self = .txrxEnabled
    case 2: self = .txrxDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .txrxUnknown: return 0
    case .txrxEnabled: return 1
    case .txrxDisabled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_TransceiverTxRxState] = [
    .txrxUnknown,
    .txrxEnabled,
    .txrxDisabled,
  ]

}

enum SpaceX_API_Device_TransceiverTransmitBlankingState: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case tbUnknown // = 0
  case tbEnabled // = 1
  case tbDisabled // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .tbUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tbUnknown
    case 1: self = .tbEnabled
    case 2: self = .tbDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .tbUnknown: return 0
    case .tbEnabled: return 1
    case .tbDisabled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Device_TransceiverTransmitBlankingState] = [
    .tbUnknown,
    .tbEnabled,
    .tbDisabled,
  ]

}

struct SpaceX_API_Device_TransceiverIFLoopbackTestRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enableIfLoopback: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_TransceiverIFLoopbackTestResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var berLoopbackTest: Float = 0

  var snrLoopbackTest: Float = 0

  var rssiLoopbackTest: Float = 0

  var pllLock: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_TransceiverGetStatusRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_TransceiverGetStatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var modState: SpaceX_API_Device_TransceiverModulatorState = .modstateUnknown

  var demodState: SpaceX_API_Device_TransceiverModulatorState = .modstateUnknown

  var txState: SpaceX_API_Device_TransceiverTxRxState = .txrxUnknown

  var rxState: SpaceX_API_Device_TransceiverTxRxState = .txrxUnknown

  var state: SpaceX_API_Device_DishState = .unknown

  var faults: SpaceX_API_Device_TransceiverFaults {
    get {return _faults ?? SpaceX_API_Device_TransceiverFaults()}
    set {_faults = newValue}
  }
  /// Returns true if `faults` has been explicitly set.
  var hasFaults: Bool {return self._faults != nil}
  /// Clears the value of `faults`. Subsequent reads from it will return its default value.
  mutating func clearFaults() {self._faults = nil}

  var transmitBlankingState: SpaceX_API_Device_TransceiverTransmitBlankingState = .tbUnknown

  var modemAsicTemp: Float = 0

  var txIfTemp: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _faults: SpaceX_API_Device_TransceiverFaults? = nil
}

struct SpaceX_API_Device_TransceiverFaults: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overTempModemAsicFault: Bool = false

  var overTempPcbaFault: Bool = false

  var dcVoltageFault: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_TransceiverGetTelemetryRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SpaceX_API_Device_TransceiverGetTelemetryResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var antennaPointingMode: UInt32 {
    get {return _storage._antennaPointingMode}
    set {_uniqueStorage()._antennaPointingMode = newValue}
  }

  var antennaPitch: Float {
    get {return _storage._antennaPitch}
    set {_uniqueStorage()._antennaPitch = newValue}
  }

  var antennaRoll: Float {
    get {return _storage._antennaRoll}
    set {_uniqueStorage()._antennaRoll = newValue}
  }

  var antennaRxTheta: Float {
    get {return _storage._antennaRxTheta}
    set {_uniqueStorage()._antennaRxTheta = newValue}
  }

  var antennaTrueHeading: Float {
    get {return _storage._antennaTrueHeading}
    set {_uniqueStorage()._antennaTrueHeading = newValue}
  }

  var rxChannel: UInt32 {
    get {return _storage._rxChannel}
    set {_uniqueStorage()._rxChannel = newValue}
  }

  var currentCellID: UInt32 {
    get {return _storage._currentCellID}
    set {_uniqueStorage()._currentCellID = newValue}
  }

  var secondsUntilSlotEnd: Float {
    get {return _storage._secondsUntilSlotEnd}
    set {_uniqueStorage()._secondsUntilSlotEnd = newValue}
  }

  var wbRssiPeakMagDb: Float {
    get {return _storage._wbRssiPeakMagDb}
    set {_uniqueStorage()._wbRssiPeakMagDb = newValue}
  }

  var popPingDropRate: Float {
    get {return _storage._popPingDropRate}
    set {_uniqueStorage()._popPingDropRate = newValue}
  }

  var snrDb: Float {
    get {return _storage._snrDb}
    set {_uniqueStorage()._snrDb = newValue}
  }

  var l1SnrAvgDb: Float {
    get {return _storage._l1SnrAvgDb}
    set {_uniqueStorage()._l1SnrAvgDb = newValue}
  }

  var l1SnrMinDb: Float {
    get {return _storage._l1SnrMinDb}
    set {_uniqueStorage()._l1SnrMinDb = newValue}
  }

  var l1SnrMaxDb: Float {
    get {return _storage._l1SnrMaxDb}
    set {_uniqueStorage()._l1SnrMaxDb = newValue}
  }

  var lmacSatelliteID: UInt32 {
    get {return _storage._lmacSatelliteID}
    set {_uniqueStorage()._lmacSatelliteID = newValue}
  }

  var targetSatelliteID: UInt32 {
    get {return _storage._targetSatelliteID}
    set {_uniqueStorage()._targetSatelliteID = newValue}
  }

  var grantMcs: UInt32 {
    get {return _storage._grantMcs}
    set {_uniqueStorage()._grantMcs = newValue}
  }

  var grantSymbolsAvg: Float {
    get {return _storage._grantSymbolsAvg}
    set {_uniqueStorage()._grantSymbolsAvg = newValue}
  }

  var dedGrant: UInt32 {
    get {return _storage._dedGrant}
    set {_uniqueStorage()._dedGrant = newValue}
  }

  var mobilityProactiveSlotChange: UInt32 {
    get {return _storage._mobilityProactiveSlotChange}
    set {_uniqueStorage()._mobilityProactiveSlotChange = newValue}
  }

  var mobilityReactiveSlotChange: UInt32 {
    get {return _storage._mobilityReactiveSlotChange}
    set {_uniqueStorage()._mobilityReactiveSlotChange = newValue}
  }

  var rfpTotalSynFailed: UInt32 {
    get {return _storage._rfpTotalSynFailed}
    set {_uniqueStorage()._rfpTotalSynFailed = newValue}
  }

  var numOutOfSeq: UInt32 {
    get {return _storage._numOutOfSeq}
    set {_uniqueStorage()._numOutOfSeq = newValue}
  }

  var numUlmapDrop: UInt32 {
    get {return _storage._numUlmapDrop}
    set {_uniqueStorage()._numUlmapDrop = newValue}
  }

  var currentSecondsOfSchedule: Float {
    get {return _storage._currentSecondsOfSchedule}
    set {_uniqueStorage()._currentSecondsOfSchedule = newValue}
  }

  var sendLabelSwitchToGroundFailedCalls: UInt32 {
    get {return _storage._sendLabelSwitchToGroundFailedCalls}
    set {_uniqueStorage()._sendLabelSwitchToGroundFailedCalls = newValue}
  }

  var emaVelocityX: Double {
    get {return _storage._emaVelocityX}
    set {_uniqueStorage()._emaVelocityX = newValue}
  }

  var emaVelocityY: Double {
    get {return _storage._emaVelocityY}
    set {_uniqueStorage()._emaVelocityY = newValue}
  }

  var emaVelocityZ: Double {
    get {return _storage._emaVelocityZ}
    set {_uniqueStorage()._emaVelocityZ = newValue}
  }

  var ceRssiDb: Float {
    get {return _storage._ceRssiDb}
    set {_uniqueStorage()._ceRssiDb = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Device"

extension SpaceX_API_Device_TransceiverModulatorState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODSTATE_UNKNOWN"),
    1: .same(proto: "MODSTATE_ENABLED"),
    2: .same(proto: "MODSTATE_DISABLED"),
  ]
}

extension SpaceX_API_Device_TransceiverTxRxState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TXRX_UNKNOWN"),
    1: .same(proto: "TXRX_ENABLED"),
    2: .same(proto: "TXRX_DISABLED"),
  ]
}

extension SpaceX_API_Device_TransceiverTransmitBlankingState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TB_UNKNOWN"),
    1: .same(proto: "TB_ENABLED"),
    2: .same(proto: "TB_DISABLED"),
  ]
}

extension SpaceX_API_Device_TransceiverIFLoopbackTestRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverIFLoopbackTestRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_if_loopback"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enableIfLoopback) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableIfLoopback != false {
      try visitor.visitSingularBoolField(value: self.enableIfLoopback, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverIFLoopbackTestRequest, rhs: SpaceX_API_Device_TransceiverIFLoopbackTestRequest) -> Bool {
    if lhs.enableIfLoopback != rhs.enableIfLoopback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverIFLoopbackTestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverIFLoopbackTestResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ber_loopback_test"),
    2: .standard(proto: "snr_loopback_test"),
    3: .standard(proto: "rssi_loopback_test"),
    4: .standard(proto: "pll_lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.berLoopbackTest) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.snrLoopbackTest) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.rssiLoopbackTest) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.pllLock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.berLoopbackTest.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.berLoopbackTest, fieldNumber: 1)
    }
    if self.snrLoopbackTest.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.snrLoopbackTest, fieldNumber: 2)
    }
    if self.rssiLoopbackTest.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.rssiLoopbackTest, fieldNumber: 3)
    }
    if self.pllLock != false {
      try visitor.visitSingularBoolField(value: self.pllLock, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverIFLoopbackTestResponse, rhs: SpaceX_API_Device_TransceiverIFLoopbackTestResponse) -> Bool {
    if lhs.berLoopbackTest != rhs.berLoopbackTest {return false}
    if lhs.snrLoopbackTest != rhs.snrLoopbackTest {return false}
    if lhs.rssiLoopbackTest != rhs.rssiLoopbackTest {return false}
    if lhs.pllLock != rhs.pllLock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverGetStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverGetStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverGetStatusRequest, rhs: SpaceX_API_Device_TransceiverGetStatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverGetStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverGetStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mod_state"),
    2: .standard(proto: "demod_state"),
    3: .standard(proto: "tx_state"),
    4: .standard(proto: "rx_state"),
    1006: .same(proto: "state"),
    1007: .same(proto: "faults"),
    1008: .standard(proto: "transmit_blanking_state"),
    1009: .standard(proto: "modem_asic_temp"),
    1010: .standard(proto: "tx_if_temp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.modState) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.demodState) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.txState) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.rxState) }()
      case 1006: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 1007: try { try decoder.decodeSingularMessageField(value: &self._faults) }()
      case 1008: try { try decoder.decodeSingularEnumField(value: &self.transmitBlankingState) }()
      case 1009: try { try decoder.decodeSingularFloatField(value: &self.modemAsicTemp) }()
      case 1010: try { try decoder.decodeSingularFloatField(value: &self.txIfTemp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.modState != .modstateUnknown {
      try visitor.visitSingularEnumField(value: self.modState, fieldNumber: 1)
    }
    if self.demodState != .modstateUnknown {
      try visitor.visitSingularEnumField(value: self.demodState, fieldNumber: 2)
    }
    if self.txState != .txrxUnknown {
      try visitor.visitSingularEnumField(value: self.txState, fieldNumber: 3)
    }
    if self.rxState != .txrxUnknown {
      try visitor.visitSingularEnumField(value: self.rxState, fieldNumber: 4)
    }
    if self.state != .unknown {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1006)
    }
    try { if let v = self._faults {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1007)
    } }()
    if self.transmitBlankingState != .tbUnknown {
      try visitor.visitSingularEnumField(value: self.transmitBlankingState, fieldNumber: 1008)
    }
    if self.modemAsicTemp.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.modemAsicTemp, fieldNumber: 1009)
    }
    if self.txIfTemp.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.txIfTemp, fieldNumber: 1010)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverGetStatusResponse, rhs: SpaceX_API_Device_TransceiverGetStatusResponse) -> Bool {
    if lhs.modState != rhs.modState {return false}
    if lhs.demodState != rhs.demodState {return false}
    if lhs.txState != rhs.txState {return false}
    if lhs.rxState != rhs.rxState {return false}
    if lhs.state != rhs.state {return false}
    if lhs._faults != rhs._faults {return false}
    if lhs.transmitBlankingState != rhs.transmitBlankingState {return false}
    if lhs.modemAsicTemp != rhs.modemAsicTemp {return false}
    if lhs.txIfTemp != rhs.txIfTemp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverFaults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverFaults"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "over_temp_modem_asic_fault"),
    2: .standard(proto: "over_temp_pcba_fault"),
    3: .standard(proto: "dc_voltage_fault"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.overTempModemAsicFault) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.overTempPcbaFault) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.dcVoltageFault) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.overTempModemAsicFault != false {
      try visitor.visitSingularBoolField(value: self.overTempModemAsicFault, fieldNumber: 1)
    }
    if self.overTempPcbaFault != false {
      try visitor.visitSingularBoolField(value: self.overTempPcbaFault, fieldNumber: 2)
    }
    if self.dcVoltageFault != false {
      try visitor.visitSingularBoolField(value: self.dcVoltageFault, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverFaults, rhs: SpaceX_API_Device_TransceiverFaults) -> Bool {
    if lhs.overTempModemAsicFault != rhs.overTempModemAsicFault {return false}
    if lhs.overTempPcbaFault != rhs.overTempPcbaFault {return false}
    if lhs.dcVoltageFault != rhs.dcVoltageFault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverGetTelemetryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverGetTelemetryRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverGetTelemetryRequest, rhs: SpaceX_API_Device_TransceiverGetTelemetryRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SpaceX_API_Device_TransceiverGetTelemetryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransceiverGetTelemetryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1001: .standard(proto: "antenna_pointing_mode"),
    1002: .standard(proto: "antenna_pitch"),
    1003: .standard(proto: "antenna_roll"),
    1004: .standard(proto: "antenna_rx_theta"),
    1005: .standard(proto: "antenna_true_heading"),
    1006: .standard(proto: "rx_channel"),
    1007: .standard(proto: "current_cell_id"),
    1008: .standard(proto: "seconds_until_slot_end"),
    1009: .standard(proto: "wb_rssi_peak_mag_db"),
    1010: .standard(proto: "pop_ping_drop_rate"),
    1011: .standard(proto: "snr_db"),
    1012: .standard(proto: "l1_snr_avg_db"),
    1013: .standard(proto: "l1_snr_min_db"),
    1014: .standard(proto: "l1_snr_max_db"),
    1015: .standard(proto: "lmac_satellite_id"),
    1016: .standard(proto: "target_satellite_id"),
    1017: .standard(proto: "grant_mcs"),
    1018: .standard(proto: "grant_symbols_avg"),
    1019: .standard(proto: "ded_grant"),
    1020: .standard(proto: "mobility_proactive_slot_change"),
    1021: .standard(proto: "mobility_reactive_slot_change"),
    1022: .standard(proto: "rfp_total_syn_failed"),
    1023: .standard(proto: "num_out_of_seq"),
    1024: .standard(proto: "num_ulmap_drop"),
    1025: .standard(proto: "current_seconds_of_schedule"),
    1026: .standard(proto: "send_label_switch_to_ground_failed_calls"),
    1027: .standard(proto: "ema_velocity_x"),
    1028: .standard(proto: "ema_velocity_y"),
    1029: .standard(proto: "ema_velocity_z"),
    1030: .standard(proto: "ce_rssi_db"),
  ]

  fileprivate class _StorageClass {
    var _antennaPointingMode: UInt32 = 0
    var _antennaPitch: Float = 0
    var _antennaRoll: Float = 0
    var _antennaRxTheta: Float = 0
    var _antennaTrueHeading: Float = 0
    var _rxChannel: UInt32 = 0
    var _currentCellID: UInt32 = 0
    var _secondsUntilSlotEnd: Float = 0
    var _wbRssiPeakMagDb: Float = 0
    var _popPingDropRate: Float = 0
    var _snrDb: Float = 0
    var _l1SnrAvgDb: Float = 0
    var _l1SnrMinDb: Float = 0
    var _l1SnrMaxDb: Float = 0
    var _lmacSatelliteID: UInt32 = 0
    var _targetSatelliteID: UInt32 = 0
    var _grantMcs: UInt32 = 0
    var _grantSymbolsAvg: Float = 0
    var _dedGrant: UInt32 = 0
    var _mobilityProactiveSlotChange: UInt32 = 0
    var _mobilityReactiveSlotChange: UInt32 = 0
    var _rfpTotalSynFailed: UInt32 = 0
    var _numOutOfSeq: UInt32 = 0
    var _numUlmapDrop: UInt32 = 0
    var _currentSecondsOfSchedule: Float = 0
    var _sendLabelSwitchToGroundFailedCalls: UInt32 = 0
    var _emaVelocityX: Double = 0
    var _emaVelocityY: Double = 0
    var _emaVelocityZ: Double = 0
    var _ceRssiDb: Float = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _antennaPointingMode = source._antennaPointingMode
      _antennaPitch = source._antennaPitch
      _antennaRoll = source._antennaRoll
      _antennaRxTheta = source._antennaRxTheta
      _antennaTrueHeading = source._antennaTrueHeading
      _rxChannel = source._rxChannel
      _currentCellID = source._currentCellID
      _secondsUntilSlotEnd = source._secondsUntilSlotEnd
      _wbRssiPeakMagDb = source._wbRssiPeakMagDb
      _popPingDropRate = source._popPingDropRate
      _snrDb = source._snrDb
      _l1SnrAvgDb = source._l1SnrAvgDb
      _l1SnrMinDb = source._l1SnrMinDb
      _l1SnrMaxDb = source._l1SnrMaxDb
      _lmacSatelliteID = source._lmacSatelliteID
      _targetSatelliteID = source._targetSatelliteID
      _grantMcs = source._grantMcs
      _grantSymbolsAvg = source._grantSymbolsAvg
      _dedGrant = source._dedGrant
      _mobilityProactiveSlotChange = source._mobilityProactiveSlotChange
      _mobilityReactiveSlotChange = source._mobilityReactiveSlotChange
      _rfpTotalSynFailed = source._rfpTotalSynFailed
      _numOutOfSeq = source._numOutOfSeq
      _numUlmapDrop = source._numUlmapDrop
      _currentSecondsOfSchedule = source._currentSecondsOfSchedule
      _sendLabelSwitchToGroundFailedCalls = source._sendLabelSwitchToGroundFailedCalls
      _emaVelocityX = source._emaVelocityX
      _emaVelocityY = source._emaVelocityY
      _emaVelocityZ = source._emaVelocityZ
      _ceRssiDb = source._ceRssiDb
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1001: try { try decoder.decodeSingularUInt32Field(value: &_storage._antennaPointingMode) }()
        case 1002: try { try decoder.decodeSingularFloatField(value: &_storage._antennaPitch) }()
        case 1003: try { try decoder.decodeSingularFloatField(value: &_storage._antennaRoll) }()
        case 1004: try { try decoder.decodeSingularFloatField(value: &_storage._antennaRxTheta) }()
        case 1005: try { try decoder.decodeSingularFloatField(value: &_storage._antennaTrueHeading) }()
        case 1006: try { try decoder.decodeSingularUInt32Field(value: &_storage._rxChannel) }()
        case 1007: try { try decoder.decodeSingularUInt32Field(value: &_storage._currentCellID) }()
        case 1008: try { try decoder.decodeSingularFloatField(value: &_storage._secondsUntilSlotEnd) }()
        case 1009: try { try decoder.decodeSingularFloatField(value: &_storage._wbRssiPeakMagDb) }()
        case 1010: try { try decoder.decodeSingularFloatField(value: &_storage._popPingDropRate) }()
        case 1011: try { try decoder.decodeSingularFloatField(value: &_storage._snrDb) }()
        case 1012: try { try decoder.decodeSingularFloatField(value: &_storage._l1SnrAvgDb) }()
        case 1013: try { try decoder.decodeSingularFloatField(value: &_storage._l1SnrMinDb) }()
        case 1014: try { try decoder.decodeSingularFloatField(value: &_storage._l1SnrMaxDb) }()
        case 1015: try { try decoder.decodeSingularUInt32Field(value: &_storage._lmacSatelliteID) }()
        case 1016: try { try decoder.decodeSingularUInt32Field(value: &_storage._targetSatelliteID) }()
        case 1017: try { try decoder.decodeSingularUInt32Field(value: &_storage._grantMcs) }()
        case 1018: try { try decoder.decodeSingularFloatField(value: &_storage._grantSymbolsAvg) }()
        case 1019: try { try decoder.decodeSingularUInt32Field(value: &_storage._dedGrant) }()
        case 1020: try { try decoder.decodeSingularUInt32Field(value: &_storage._mobilityProactiveSlotChange) }()
        case 1021: try { try decoder.decodeSingularUInt32Field(value: &_storage._mobilityReactiveSlotChange) }()
        case 1022: try { try decoder.decodeSingularUInt32Field(value: &_storage._rfpTotalSynFailed) }()
        case 1023: try { try decoder.decodeSingularUInt32Field(value: &_storage._numOutOfSeq) }()
        case 1024: try { try decoder.decodeSingularUInt32Field(value: &_storage._numUlmapDrop) }()
        case 1025: try { try decoder.decodeSingularFloatField(value: &_storage._currentSecondsOfSchedule) }()
        case 1026: try { try decoder.decodeSingularUInt32Field(value: &_storage._sendLabelSwitchToGroundFailedCalls) }()
        case 1027: try { try decoder.decodeSingularDoubleField(value: &_storage._emaVelocityX) }()
        case 1028: try { try decoder.decodeSingularDoubleField(value: &_storage._emaVelocityY) }()
        case 1029: try { try decoder.decodeSingularDoubleField(value: &_storage._emaVelocityZ) }()
        case 1030: try { try decoder.decodeSingularFloatField(value: &_storage._ceRssiDb) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._antennaPointingMode != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._antennaPointingMode, fieldNumber: 1001)
      }
      if _storage._antennaPitch.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._antennaPitch, fieldNumber: 1002)
      }
      if _storage._antennaRoll.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._antennaRoll, fieldNumber: 1003)
      }
      if _storage._antennaRxTheta.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._antennaRxTheta, fieldNumber: 1004)
      }
      if _storage._antennaTrueHeading.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._antennaTrueHeading, fieldNumber: 1005)
      }
      if _storage._rxChannel != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rxChannel, fieldNumber: 1006)
      }
      if _storage._currentCellID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._currentCellID, fieldNumber: 1007)
      }
      if _storage._secondsUntilSlotEnd.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._secondsUntilSlotEnd, fieldNumber: 1008)
      }
      if _storage._wbRssiPeakMagDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._wbRssiPeakMagDb, fieldNumber: 1009)
      }
      if _storage._popPingDropRate.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._popPingDropRate, fieldNumber: 1010)
      }
      if _storage._snrDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._snrDb, fieldNumber: 1011)
      }
      if _storage._l1SnrAvgDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._l1SnrAvgDb, fieldNumber: 1012)
      }
      if _storage._l1SnrMinDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._l1SnrMinDb, fieldNumber: 1013)
      }
      if _storage._l1SnrMaxDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._l1SnrMaxDb, fieldNumber: 1014)
      }
      if _storage._lmacSatelliteID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lmacSatelliteID, fieldNumber: 1015)
      }
      if _storage._targetSatelliteID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._targetSatelliteID, fieldNumber: 1016)
      }
      if _storage._grantMcs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._grantMcs, fieldNumber: 1017)
      }
      if _storage._grantSymbolsAvg.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._grantSymbolsAvg, fieldNumber: 1018)
      }
      if _storage._dedGrant != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._dedGrant, fieldNumber: 1019)
      }
      if _storage._mobilityProactiveSlotChange != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._mobilityProactiveSlotChange, fieldNumber: 1020)
      }
      if _storage._mobilityReactiveSlotChange != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._mobilityReactiveSlotChange, fieldNumber: 1021)
      }
      if _storage._rfpTotalSynFailed != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rfpTotalSynFailed, fieldNumber: 1022)
      }
      if _storage._numOutOfSeq != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numOutOfSeq, fieldNumber: 1023)
      }
      if _storage._numUlmapDrop != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numUlmapDrop, fieldNumber: 1024)
      }
      if _storage._currentSecondsOfSchedule.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._currentSecondsOfSchedule, fieldNumber: 1025)
      }
      if _storage._sendLabelSwitchToGroundFailedCalls != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sendLabelSwitchToGroundFailedCalls, fieldNumber: 1026)
      }
      if _storage._emaVelocityX.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._emaVelocityX, fieldNumber: 1027)
      }
      if _storage._emaVelocityY.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._emaVelocityY, fieldNumber: 1028)
      }
      if _storage._emaVelocityZ.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._emaVelocityZ, fieldNumber: 1029)
      }
      if _storage._ceRssiDb.bitPattern != 0 {
        try visitor.visitSingularFloatField(value: _storage._ceRssiDb, fieldNumber: 1030)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Device_TransceiverGetTelemetryResponse, rhs: SpaceX_API_Device_TransceiverGetTelemetryResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._antennaPointingMode != rhs_storage._antennaPointingMode {return false}
        if _storage._antennaPitch != rhs_storage._antennaPitch {return false}
        if _storage._antennaRoll != rhs_storage._antennaRoll {return false}
        if _storage._antennaRxTheta != rhs_storage._antennaRxTheta {return false}
        if _storage._antennaTrueHeading != rhs_storage._antennaTrueHeading {return false}
        if _storage._rxChannel != rhs_storage._rxChannel {return false}
        if _storage._currentCellID != rhs_storage._currentCellID {return false}
        if _storage._secondsUntilSlotEnd != rhs_storage._secondsUntilSlotEnd {return false}
        if _storage._wbRssiPeakMagDb != rhs_storage._wbRssiPeakMagDb {return false}
        if _storage._popPingDropRate != rhs_storage._popPingDropRate {return false}
        if _storage._snrDb != rhs_storage._snrDb {return false}
        if _storage._l1SnrAvgDb != rhs_storage._l1SnrAvgDb {return false}
        if _storage._l1SnrMinDb != rhs_storage._l1SnrMinDb {return false}
        if _storage._l1SnrMaxDb != rhs_storage._l1SnrMaxDb {return false}
        if _storage._lmacSatelliteID != rhs_storage._lmacSatelliteID {return false}
        if _storage._targetSatelliteID != rhs_storage._targetSatelliteID {return false}
        if _storage._grantMcs != rhs_storage._grantMcs {return false}
        if _storage._grantSymbolsAvg != rhs_storage._grantSymbolsAvg {return false}
        if _storage._dedGrant != rhs_storage._dedGrant {return false}
        if _storage._mobilityProactiveSlotChange != rhs_storage._mobilityProactiveSlotChange {return false}
        if _storage._mobilityReactiveSlotChange != rhs_storage._mobilityReactiveSlotChange {return false}
        if _storage._rfpTotalSynFailed != rhs_storage._rfpTotalSynFailed {return false}
        if _storage._numOutOfSeq != rhs_storage._numOutOfSeq {return false}
        if _storage._numUlmapDrop != rhs_storage._numUlmapDrop {return false}
        if _storage._currentSecondsOfSchedule != rhs_storage._currentSecondsOfSchedule {return false}
        if _storage._sendLabelSwitchToGroundFailedCalls != rhs_storage._sendLabelSwitchToGroundFailedCalls {return false}
        if _storage._emaVelocityX != rhs_storage._emaVelocityX {return false}
        if _storage._emaVelocityY != rhs_storage._emaVelocityY {return false}
        if _storage._emaVelocityZ != rhs_storage._emaVelocityZ {return false}
        if _storage._ceRssiDb != rhs_storage._ceRssiDb {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
