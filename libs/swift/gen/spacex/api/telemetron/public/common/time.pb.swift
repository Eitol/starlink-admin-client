// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: spacex/api/telemetron/public/common/time.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SpaceX_API_Telemetron_Public_Common_Epoch: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unix // = 0
  case gps // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unix
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unix
    case 1: self = .gps
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unix: return 0
    case .gps: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SpaceX_API_Telemetron_Public_Common_Epoch] = [
    .unix,
    .gps,
  ]

}

struct SpaceX_API_Telemetron_Public_Common_TimestampInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epoch: SpaceX_API_Telemetron_Public_Common_Epoch = .unix

  var nanoseconds: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SpaceX.API.Telemetron.Public.Common"

extension SpaceX_API_Telemetron_Public_Common_Epoch: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNIX"),
    1: .same(proto: "GPS"),
  ]
}

extension SpaceX_API_Telemetron_Public_Common_TimestampInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimestampInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epoch"),
    2: .same(proto: "nanoseconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.epoch) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.nanoseconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epoch != .unix {
      try visitor.visitSingularEnumField(value: self.epoch, fieldNumber: 1)
    }
    if self.nanoseconds != 0 {
      try visitor.visitSingularInt64Field(value: self.nanoseconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SpaceX_API_Telemetron_Public_Common_TimestampInfo, rhs: SpaceX_API_Telemetron_Public_Common_TimestampInfo) -> Bool {
    if lhs.epoch != rhs.epoch {return false}
    if lhs.nanoseconds != rhs.nanoseconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
