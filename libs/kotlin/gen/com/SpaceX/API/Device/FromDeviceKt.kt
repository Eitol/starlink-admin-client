// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/device.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializefromDevice")
public inline fun fromDevice(block: com.SpaceX.API.Device.FromDeviceKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.FromDevice =
  com.SpaceX.API.Device.FromDeviceKt.Dsl._create(com.SpaceX.API.Device.FromDevice.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.FromDevice`
 */
public object FromDeviceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.FromDevice.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.FromDevice.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.FromDevice = _builder.build()

    /**
     * `.SpaceX.API.Device.Response response = 1 [json_name = "response"];`
     */
    public var response: com.SpaceX.API.Device.Response
      @JvmName("getResponse")
      get() = _builder.response
      @JvmName("setResponse")
      set(value) {
        _builder.response = value
      }
    /**
     * `.SpaceX.API.Device.Response response = 1 [json_name = "response"];`
     */
    public fun clearResponse() {
      _builder.clearResponse()
    }
    /**
     * `.SpaceX.API.Device.Response response = 1 [json_name = "response"];`
     * @return Whether the response field is set.
     */
    public fun hasResponse(): kotlin.Boolean {
      return _builder.hasResponse()
    }

    /**
     * `.SpaceX.API.Device.Event event = 2 [json_name = "event"];`
     */
    public var event: com.SpaceX.API.Device.Event
      @JvmName("getEvent")
      get() = _builder.event
      @JvmName("setEvent")
      set(value) {
        _builder.event = value
      }
    /**
     * `.SpaceX.API.Device.Event event = 2 [json_name = "event"];`
     */
    public fun clearEvent() {
      _builder.clearEvent()
    }
    /**
     * `.SpaceX.API.Device.Event event = 2 [json_name = "event"];`
     * @return Whether the event field is set.
     */
    public fun hasEvent(): kotlin.Boolean {
      return _builder.hasEvent()
    }

    /**
     * `.SpaceX.API.Device.HealthCheck health_check = 3 [json_name = "healthCheck"];`
     */
    public var healthCheck: com.SpaceX.API.Device.HealthCheck
      @JvmName("getHealthCheck")
      get() = _builder.healthCheck
      @JvmName("setHealthCheck")
      set(value) {
        _builder.healthCheck = value
      }
    /**
     * `.SpaceX.API.Device.HealthCheck health_check = 3 [json_name = "healthCheck"];`
     */
    public fun clearHealthCheck() {
      _builder.clearHealthCheck()
    }
    /**
     * `.SpaceX.API.Device.HealthCheck health_check = 3 [json_name = "healthCheck"];`
     * @return Whether the healthCheck field is set.
     */
    public fun hasHealthCheck(): kotlin.Boolean {
      return _builder.hasHealthCheck()
    }
    public val messageCase: com.SpaceX.API.Device.FromDevice.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.FromDevice.copy(block: `com.SpaceX.API.Device`.FromDeviceKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.FromDevice =
  `com.SpaceX.API.Device`.FromDeviceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.SpaceX.API.Device.FromDeviceOrBuilder.responseOrNull: com.SpaceX.API.Device.Response?
  get() = if (hasResponse()) getResponse() else null

public val com.SpaceX.API.Device.FromDeviceOrBuilder.eventOrNull: com.SpaceX.API.Device.Event?
  get() = if (hasEvent()) getEvent() else null

public val com.SpaceX.API.Device.FromDeviceOrBuilder.healthCheckOrNull: com.SpaceX.API.Device.HealthCheck?
  get() = if (hasHealthCheck()) getHealthCheck() else null

