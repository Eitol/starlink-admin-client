// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_util.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializepoeStats")
public inline fun poeStats(block: com.SpaceX.API.Device.PoeStatsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.PoeStats =
  com.SpaceX.API.Device.PoeStatsKt.Dsl._create(com.SpaceX.API.Device.PoeStats.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.PoeStats`
 */
public object PoeStatsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.PoeStats.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.PoeStats.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.PoeStats = _builder.build()

    /**
     * `.SpaceX.API.Device.PoeState poe_state = 1 [json_name = "poeState"];`
     */
    public var poeState: com.SpaceX.API.Device.PoeState
      @JvmName("getPoeState")
      get() = _builder.poeState
      @JvmName("setPoeState")
      set(value) {
        _builder.poeState = value
      }
    public var poeStateValue: kotlin.Int
      @JvmName("getPoeStateValue")
      get() = _builder.poeStateValue
      @JvmName("setPoeStateValue")
      set(value) {
        _builder.poeStateValue = value
      }
    /**
     * `.SpaceX.API.Device.PoeState poe_state = 1 [json_name = "poeState"];`
     */
    public fun clearPoeState() {
      _builder.clearPoeState()
    }

    /**
     * `float poe_power = 2 [json_name = "poePower"];`
     */
    public var poePower: kotlin.Float
      @JvmName("getPoePower")
      get() = _builder.poePower
      @JvmName("setPoePower")
      set(value) {
        _builder.poePower = value
      }
    /**
     * `float poe_power = 2 [json_name = "poePower"];`
     */
    public fun clearPoePower() {
      _builder.clearPoePower()
    }

    /**
     * `uint32 poe_faults_fast_overcurrent = 3 [json_name = "poeFaultsFastOvercurrent"];`
     */
    public var poeFaultsFastOvercurrent: kotlin.Int
      @JvmName("getPoeFaultsFastOvercurrent")
      get() = _builder.poeFaultsFastOvercurrent
      @JvmName("setPoeFaultsFastOvercurrent")
      set(value) {
        _builder.poeFaultsFastOvercurrent = value
      }
    /**
     * `uint32 poe_faults_fast_overcurrent = 3 [json_name = "poeFaultsFastOvercurrent"];`
     */
    public fun clearPoeFaultsFastOvercurrent() {
      _builder.clearPoeFaultsFastOvercurrent()
    }

    /**
     * `uint32 poe_faults_slow_overcurrent = 4 [json_name = "poeFaultsSlowOvercurrent"];`
     */
    public var poeFaultsSlowOvercurrent: kotlin.Int
      @JvmName("getPoeFaultsSlowOvercurrent")
      get() = _builder.poeFaultsSlowOvercurrent
      @JvmName("setPoeFaultsSlowOvercurrent")
      set(value) {
        _builder.poeFaultsSlowOvercurrent = value
      }
    /**
     * `uint32 poe_faults_slow_overcurrent = 4 [json_name = "poeFaultsSlowOvercurrent"];`
     */
    public fun clearPoeFaultsSlowOvercurrent() {
      _builder.clearPoeFaultsSlowOvercurrent()
    }

    /**
     * `uint32 poe_faults_overvoltage = 5 [json_name = "poeFaultsOvervoltage"];`
     */
    public var poeFaultsOvervoltage: kotlin.Int
      @JvmName("getPoeFaultsOvervoltage")
      get() = _builder.poeFaultsOvervoltage
      @JvmName("setPoeFaultsOvervoltage")
      set(value) {
        _builder.poeFaultsOvervoltage = value
      }
    /**
     * `uint32 poe_faults_overvoltage = 5 [json_name = "poeFaultsOvervoltage"];`
     */
    public fun clearPoeFaultsOvervoltage() {
      _builder.clearPoeFaultsOvervoltage()
    }

    /**
     * `uint32 poe_faults_undervoltage = 6 [json_name = "poeFaultsUndervoltage"];`
     */
    public var poeFaultsUndervoltage: kotlin.Int
      @JvmName("getPoeFaultsUndervoltage")
      get() = _builder.poeFaultsUndervoltage
      @JvmName("setPoeFaultsUndervoltage")
      set(value) {
        _builder.poeFaultsUndervoltage = value
      }
    /**
     * `uint32 poe_faults_undervoltage = 6 [json_name = "poeFaultsUndervoltage"];`
     */
    public fun clearPoeFaultsUndervoltage() {
      _builder.clearPoeFaultsUndervoltage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.PoeStats.copy(block: `com.SpaceX.API.Device`.PoeStatsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.PoeStats =
  `com.SpaceX.API.Device`.PoeStatsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

