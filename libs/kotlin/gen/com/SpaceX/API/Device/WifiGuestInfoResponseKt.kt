// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializewifiGuestInfoResponse")
public inline fun wifiGuestInfoResponse(block: com.SpaceX.API.Device.WifiGuestInfoResponseKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiGuestInfoResponse =
  com.SpaceX.API.Device.WifiGuestInfoResponseKt.Dsl._create(com.SpaceX.API.Device.WifiGuestInfoResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.WifiGuestInfoResponse`
 */
public object WifiGuestInfoResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.WifiGuestInfoResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.WifiGuestInfoResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.WifiGuestInfoResponse = _builder.build()

    /**
     * `bool is_guest = 1 [json_name = "isGuest"];`
     */
    public var isGuest: kotlin.Boolean
      @JvmName("getIsGuest")
      get() = _builder.isGuest
      @JvmName("setIsGuest")
      set(value) {
        _builder.isGuest = value
      }
    /**
     * `bool is_guest = 1 [json_name = "isGuest"];`
     */
    public fun clearIsGuest() {
      _builder.clearIsGuest()
    }

    /**
     * `bool is_online = 2 [json_name = "isOnline"];`
     */
    public var isOnline: kotlin.Boolean
      @JvmName("getIsOnline")
      get() = _builder.isOnline
      @JvmName("setIsOnline")
      set(value) {
        _builder.isOnline = value
      }
    /**
     * `bool is_online = 2 [json_name = "isOnline"];`
     */
    public fun clearIsOnline() {
      _builder.clearIsOnline()
    }

    /**
     * `string router_hardware_version = 3 [json_name = "routerHardwareVersion"];`
     */
    public var routerHardwareVersion: kotlin.String
      @JvmName("getRouterHardwareVersion")
      get() = _builder.routerHardwareVersion
      @JvmName("setRouterHardwareVersion")
      set(value) {
        _builder.routerHardwareVersion = value
      }
    /**
     * `string router_hardware_version = 3 [json_name = "routerHardwareVersion"];`
     */
    public fun clearRouterHardwareVersion() {
      _builder.clearRouterHardwareVersion()
    }

    /**
     * `string dish_hardware_version = 4 [json_name = "dishHardwareVersion"];`
     */
    public var dishHardwareVersion: kotlin.String
      @JvmName("getDishHardwareVersion")
      get() = _builder.dishHardwareVersion
      @JvmName("setDishHardwareVersion")
      set(value) {
        _builder.dishHardwareVersion = value
      }
    /**
     * `string dish_hardware_version = 4 [json_name = "dishHardwareVersion"];`
     */
    public fun clearDishHardwareVersion() {
      _builder.clearDishHardwareVersion()
    }

    /**
     * `bool is_router_aviation_conformed = 5 [json_name = "isRouterAviationConformed"];`
     */
    public var isRouterAviationConformed: kotlin.Boolean
      @JvmName("getIsRouterAviationConformed")
      get() = _builder.isRouterAviationConformed
      @JvmName("setIsRouterAviationConformed")
      set(value) {
        _builder.isRouterAviationConformed = value
      }
    /**
     * `bool is_router_aviation_conformed = 5 [json_name = "isRouterAviationConformed"];`
     */
    public fun clearIsRouterAviationConformed() {
      _builder.clearIsRouterAviationConformed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.WifiGuestInfoResponse.copy(block: `com.SpaceX.API.Device`.WifiGuestInfoResponseKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiGuestInfoResponse =
  `com.SpaceX.API.Device`.WifiGuestInfoResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

