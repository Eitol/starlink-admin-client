// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializeauthenticateRequest")
public inline fun authenticateRequest(block: com.SpaceX.API.Device.AuthenticateRequestKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.AuthenticateRequest =
  com.SpaceX.API.Device.AuthenticateRequestKt.Dsl._create(com.SpaceX.API.Device.AuthenticateRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.AuthenticateRequest`
 */
public object AuthenticateRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.AuthenticateRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.AuthenticateRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.AuthenticateRequest = _builder.build()

    /**
     * `.SpaceX.API.Device.SignedData challenge = 1 [json_name = "challenge"];`
     */
    public var challenge: com.SpaceX.API.Device.SignedData
      @JvmName("getChallenge")
      get() = _builder.challenge
      @JvmName("setChallenge")
      set(value) {
        _builder.challenge = value
      }
    /**
     * `.SpaceX.API.Device.SignedData challenge = 1 [json_name = "challenge"];`
     */
    public fun clearChallenge() {
      _builder.clearChallenge()
    }
    /**
     * `.SpaceX.API.Device.SignedData challenge = 1 [json_name = "challenge"];`
     * @return Whether the challenge field is set.
     */
    public fun hasChallenge(): kotlin.Boolean {
      return _builder.hasChallenge()
    }
    public val AuthenticateRequestKt.Dsl.challengeOrNull: com.SpaceX.API.Device.SignedData?
      get() = _builder.challengeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.AuthenticateRequest.copy(block: `com.SpaceX.API.Device`.AuthenticateRequestKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.AuthenticateRequest =
  `com.SpaceX.API.Device`.AuthenticateRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.SpaceX.API.Device.AuthenticateRequestOrBuilder.challengeOrNull: com.SpaceX.API.Device.SignedData?
  get() = if (hasChallenge()) getChallenge() else null

