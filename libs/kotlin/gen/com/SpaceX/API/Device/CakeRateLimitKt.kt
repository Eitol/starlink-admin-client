// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_config.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializecakeRateLimit")
public inline fun cakeRateLimit(block: com.SpaceX.API.Device.CakeRateLimitKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.CakeRateLimit =
  com.SpaceX.API.Device.CakeRateLimitKt.Dsl._create(com.SpaceX.API.Device.CakeRateLimit.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.CakeRateLimit`
 */
public object CakeRateLimitKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.CakeRateLimit.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.CakeRateLimit.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.CakeRateLimit = _builder.build()

    /**
     * `uint32 host_mark = 1 [json_name = "hostMark"];`
     */
    public var hostMark: kotlin.Int
      @JvmName("getHostMark")
      get() = _builder.hostMark
      @JvmName("setHostMark")
      set(value) {
        _builder.hostMark = value
      }
    /**
     * `uint32 host_mark = 1 [json_name = "hostMark"];`
     */
    public fun clearHostMark() {
      _builder.clearHostMark()
    }

    /**
     * `float bandwidth = 2 [json_name = "bandwidth"];`
     */
    public var bandwidth: kotlin.Float
      @JvmName("getBandwidth")
      get() = _builder.bandwidth
      @JvmName("setBandwidth")
      set(value) {
        _builder.bandwidth = value
      }
    /**
     * `float bandwidth = 2 [json_name = "bandwidth"];`
     */
    public fun clearBandwidth() {
      _builder.clearBandwidth()
    }

    /**
     * `.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];`
     */
    public var priorityQueueParameter: com.SpaceX.API.Device.CakePriorityQueueParameter
      @JvmName("getPriorityQueueParameter")
      get() = _builder.priorityQueueParameter
      @JvmName("setPriorityQueueParameter")
      set(value) {
        _builder.priorityQueueParameter = value
      }
    public var priorityQueueParameterValue: kotlin.Int
      @JvmName("getPriorityQueueParameterValue")
      get() = _builder.priorityQueueParameterValue
      @JvmName("setPriorityQueueParameterValue")
      set(value) {
        _builder.priorityQueueParameterValue = value
      }
    /**
     * `.SpaceX.API.Device.CakePriorityQueueParameter priority_queue_parameter = 3 [json_name = "priorityQueueParameter"];`
     */
    public fun clearPriorityQueueParameter() {
      _builder.clearPriorityQueueParameter()
    }

    /**
     * `.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];`
     */
    public var ackFilter: com.SpaceX.API.Device.CakeAckFilter
      @JvmName("getAckFilter")
      get() = _builder.ackFilter
      @JvmName("setAckFilter")
      set(value) {
        _builder.ackFilter = value
      }
    public var ackFilterValue: kotlin.Int
      @JvmName("getAckFilterValue")
      get() = _builder.ackFilterValue
      @JvmName("setAckFilterValue")
      set(value) {
        _builder.ackFilterValue = value
      }
    /**
     * `.SpaceX.API.Device.CakeAckFilter ack_filter = 4 [json_name = "ackFilter"];`
     */
    public fun clearAckFilter() {
      _builder.clearAckFilter()
    }

    /**
     * `float manual_rtt = 6 [json_name = "manualRtt"];`
     */
    public var manualRtt: kotlin.Float
      @JvmName("getManualRtt")
      get() = _builder.manualRtt
      @JvmName("setManualRtt")
      set(value) {
        _builder.manualRtt = value
      }
    /**
     * `float manual_rtt = 6 [json_name = "manualRtt"];`
     */
    public fun clearManualRtt() {
      _builder.clearManualRtt()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.CakeRateLimit.copy(block: `com.SpaceX.API.Device`.CakeRateLimitKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.CakeRateLimit =
  `com.SpaceX.API.Device`.CakeRateLimitKt.Dsl._create(this.toBuilder()).apply { block() }._build()

