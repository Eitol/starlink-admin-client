// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/device.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializegetPingResponse")
public inline fun getPingResponse(block: com.SpaceX.API.Device.GetPingResponseKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.GetPingResponse =
  com.SpaceX.API.Device.GetPingResponseKt.Dsl._create(com.SpaceX.API.Device.GetPingResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.GetPingResponse`
 */
public object GetPingResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.GetPingResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.GetPingResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.GetPingResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ResultsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
     public val results: com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getResultsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.resultsMap
      )
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
    @JvmName("putResults")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      .put(key: kotlin.String, value: com.SpaceX.API.Device.PingResult) {
         _builder.putResults(key, value)
       }
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setResults")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      .set(key: kotlin.String, value: com.SpaceX.API.Device.PingResult) {
         put(key, value)
       }
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeResults")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      .remove(key: kotlin.String) {
         _builder.removeResults(key)
       }
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllResults")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.SpaceX.API.Device.PingResult>) {
         _builder.putAllResults(map)
       }
    /**
     * `map<string, .SpaceX.API.Device.PingResult> results = 1 [json_name = "results"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearResults")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.PingResult, ResultsProxy>
      .clear() {
         _builder.clearResults()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.GetPingResponse.copy(block: `com.SpaceX.API.Device`.GetPingResponseKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.GetPingResponse =
  `com.SpaceX.API.Device`.GetPingResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

