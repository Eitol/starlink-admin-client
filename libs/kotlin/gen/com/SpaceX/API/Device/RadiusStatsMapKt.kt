// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_util.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializeradiusStatsMap")
public inline fun radiusStatsMap(block: com.SpaceX.API.Device.RadiusStatsMapKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.RadiusStatsMap =
  com.SpaceX.API.Device.RadiusStatsMapKt.Dsl._create(com.SpaceX.API.Device.RadiusStatsMap.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.RadiusStatsMap`
 */
public object RadiusStatsMapKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.RadiusStatsMap.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.RadiusStatsMap.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.RadiusStatsMap = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class RadiusStatsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
     public val radiusStats: com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getRadiusStatsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.radiusStatsMap
      )
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
    @JvmName("putRadiusStats")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      .put(key: kotlin.String, value: com.SpaceX.API.Device.RadiusStatsMap.RadiusStats) {
         _builder.putRadiusStats(key, value)
       }
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setRadiusStats")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      .set(key: kotlin.String, value: com.SpaceX.API.Device.RadiusStatsMap.RadiusStats) {
         put(key, value)
       }
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeRadiusStats")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      .remove(key: kotlin.String) {
         _builder.removeRadiusStats(key)
       }
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllRadiusStats")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats>) {
         _builder.putAllRadiusStats(map)
       }
    /**
     * `map<string, .SpaceX.API.Device.RadiusStatsMap.RadiusStats> radius_stats = 1 [json_name = "radiusStats"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearRadiusStats")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.SpaceX.API.Device.RadiusStatsMap.RadiusStats, RadiusStatsProxy>
      .clear() {
         _builder.clearRadiusStats()
       }
  }
  @kotlin.jvm.JvmName("-initializeradiusStats")
  public inline fun radiusStats(block: com.SpaceX.API.Device.RadiusStatsMapKt.RadiusStatsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.RadiusStatsMap.RadiusStats =
    com.SpaceX.API.Device.RadiusStatsMapKt.RadiusStatsKt.Dsl._create(com.SpaceX.API.Device.RadiusStatsMap.RadiusStats.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `SpaceX.API.Device.RadiusStatsMap.RadiusStats`
   */
  public object RadiusStatsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.SpaceX.API.Device.RadiusStatsMap.RadiusStats.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.SpaceX.API.Device.RadiusStatsMap.RadiusStats.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.SpaceX.API.Device.RadiusStatsMap.RadiusStats = _builder.build()

      /**
       * `string iface_name = 1 [json_name = "ifaceName"];`
       */
      public var ifaceName: kotlin.String
        @JvmName("getIfaceName")
        get() = _builder.ifaceName
        @JvmName("setIfaceName")
        set(value) {
          _builder.ifaceName = value
        }
      /**
       * `string iface_name = 1 [json_name = "ifaceName"];`
       */
      public fun clearIfaceName() {
        _builder.clearIfaceName()
      }

      /**
       * `uint32 timeout_count = 2 [json_name = "timeoutCount"];`
       */
      public var timeoutCount: kotlin.Int
        @JvmName("getTimeoutCount")
        get() = _builder.timeoutCount
        @JvmName("setTimeoutCount")
        set(value) {
          _builder.timeoutCount = value
        }
      /**
       * `uint32 timeout_count = 2 [json_name = "timeoutCount"];`
       */
      public fun clearTimeoutCount() {
        _builder.clearTimeoutCount()
      }

      /**
       * `uint32 access_request_count = 3 [json_name = "accessRequestCount"];`
       */
      public var accessRequestCount: kotlin.Int
        @JvmName("getAccessRequestCount")
        get() = _builder.accessRequestCount
        @JvmName("setAccessRequestCount")
        set(value) {
          _builder.accessRequestCount = value
        }
      /**
       * `uint32 access_request_count = 3 [json_name = "accessRequestCount"];`
       */
      public fun clearAccessRequestCount() {
        _builder.clearAccessRequestCount()
      }

      /**
       * `uint32 access_accept_count = 4 [json_name = "accessAcceptCount"];`
       */
      public var accessAcceptCount: kotlin.Int
        @JvmName("getAccessAcceptCount")
        get() = _builder.accessAcceptCount
        @JvmName("setAccessAcceptCount")
        set(value) {
          _builder.accessAcceptCount = value
        }
      /**
       * `uint32 access_accept_count = 4 [json_name = "accessAcceptCount"];`
       */
      public fun clearAccessAcceptCount() {
        _builder.clearAccessAcceptCount()
      }

      /**
       * `uint32 access_reject_count = 5 [json_name = "accessRejectCount"];`
       */
      public var accessRejectCount: kotlin.Int
        @JvmName("getAccessRejectCount")
        get() = _builder.accessRejectCount
        @JvmName("setAccessRejectCount")
        set(value) {
          _builder.accessRejectCount = value
        }
      /**
       * `uint32 access_reject_count = 5 [json_name = "accessRejectCount"];`
       */
      public fun clearAccessRejectCount() {
        _builder.clearAccessRejectCount()
      }

      /**
       * `uint32 access_challenge_count = 6 [json_name = "accessChallengeCount"];`
       */
      public var accessChallengeCount: kotlin.Int
        @JvmName("getAccessChallengeCount")
        get() = _builder.accessChallengeCount
        @JvmName("setAccessChallengeCount")
        set(value) {
          _builder.accessChallengeCount = value
        }
      /**
       * `uint32 access_challenge_count = 6 [json_name = "accessChallengeCount"];`
       */
      public fun clearAccessChallengeCount() {
        _builder.clearAccessChallengeCount()
      }

      /**
       * `uint32 accounting_request_count = 7 [json_name = "accountingRequestCount"];`
       */
      public var accountingRequestCount: kotlin.Int
        @JvmName("getAccountingRequestCount")
        get() = _builder.accountingRequestCount
        @JvmName("setAccountingRequestCount")
        set(value) {
          _builder.accountingRequestCount = value
        }
      /**
       * `uint32 accounting_request_count = 7 [json_name = "accountingRequestCount"];`
       */
      public fun clearAccountingRequestCount() {
        _builder.clearAccountingRequestCount()
      }

      /**
       * `uint32 accounting_response_count = 8 [json_name = "accountingResponseCount"];`
       */
      public var accountingResponseCount: kotlin.Int
        @JvmName("getAccountingResponseCount")
        get() = _builder.accountingResponseCount
        @JvmName("setAccountingResponseCount")
        set(value) {
          _builder.accountingResponseCount = value
        }
      /**
       * `uint32 accounting_response_count = 8 [json_name = "accountingResponseCount"];`
       */
      public fun clearAccountingResponseCount() {
        _builder.clearAccountingResponseCount()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.RadiusStatsMap.copy(block: `com.SpaceX.API.Device`.RadiusStatsMapKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.RadiusStatsMap =
  `com.SpaceX.API.Device`.RadiusStatsMapKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.RadiusStatsMap.RadiusStats.copy(block: `com.SpaceX.API.Device`.RadiusStatsMapKt.RadiusStatsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.RadiusStatsMap.RadiusStats =
  `com.SpaceX.API.Device`.RadiusStatsMapKt.RadiusStatsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

