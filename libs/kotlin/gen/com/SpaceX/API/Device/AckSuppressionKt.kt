// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/wifi_config.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializeackSuppression")
public inline fun ackSuppression(block: com.SpaceX.API.Device.AckSuppressionKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.AckSuppression =
  com.SpaceX.API.Device.AckSuppressionKt.Dsl._create(com.SpaceX.API.Device.AckSuppression.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.AckSuppression`
 */
public object AckSuppressionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.AckSuppression.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.AckSuppression.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.AckSuppression = _builder.build()

    /**
     * `uint32 ack_mark = 1 [json_name = "ackMark"];`
     */
    public var ackMark: kotlin.Int
      @JvmName("getAckMark")
      get() = _builder.ackMark
      @JvmName("setAckMark")
      set(value) {
        _builder.ackMark = value
      }
    /**
     * `uint32 ack_mark = 1 [json_name = "ackMark"];`
     */
    public fun clearAckMark() {
      _builder.clearAckMark()
    }

    /**
     * `float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];`
     */
    public var htbAckQueueRate: kotlin.Float
      @JvmName("getHtbAckQueueRate")
      get() = _builder.htbAckQueueRate
      @JvmName("setHtbAckQueueRate")
      set(value) {
        _builder.htbAckQueueRate = value
      }
    /**
     * `float htb_ack_queue_rate = 2 [json_name = "htbAckQueueRate"];`
     */
    public fun clearHtbAckQueueRate() {
      _builder.clearHtbAckQueueRate()
    }

    /**
     * `float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];`
     */
    public var htbAckQueueCeil: kotlin.Float
      @JvmName("getHtbAckQueueCeil")
      get() = _builder.htbAckQueueCeil
      @JvmName("setHtbAckQueueCeil")
      set(value) {
        _builder.htbAckQueueCeil = value
      }
    /**
     * `float htb_ack_queue_ceil = 3 [json_name = "htbAckQueueCeil"];`
     */
    public fun clearHtbAckQueueCeil() {
      _builder.clearHtbAckQueueCeil()
    }

    /**
     * `float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];`
     */
    public var cakeQueueBandwidth: kotlin.Float
      @JvmName("getCakeQueueBandwidth")
      get() = _builder.cakeQueueBandwidth
      @JvmName("setCakeQueueBandwidth")
      set(value) {
        _builder.cakeQueueBandwidth = value
      }
    /**
     * `float cake_queue_bandwidth = 4 [json_name = "cakeQueueBandwidth"];`
     */
    public fun clearCakeQueueBandwidth() {
      _builder.clearCakeQueueBandwidth()
    }

    /**
     * `bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];`
     */
    public var cakeAckFilterAggressive: kotlin.Boolean
      @JvmName("getCakeAckFilterAggressive")
      get() = _builder.cakeAckFilterAggressive
      @JvmName("setCakeAckFilterAggressive")
      set(value) {
        _builder.cakeAckFilterAggressive = value
      }
    /**
     * `bool cake_ack_filter_aggressive = 5 [json_name = "cakeAckFilterAggressive"];`
     */
    public fun clearCakeAckFilterAggressive() {
      _builder.clearCakeAckFilterAggressive()
    }

    /**
     * `float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];`
     */
    public var cakeManualRtt: kotlin.Float
      @JvmName("getCakeManualRtt")
      get() = _builder.cakeManualRtt
      @JvmName("setCakeManualRtt")
      set(value) {
        _builder.cakeManualRtt = value
      }
    /**
     * `float cake_manual_rtt = 6 [json_name = "cakeManualRtt"];`
     */
    public fun clearCakeManualRtt() {
      _builder.clearCakeManualRtt()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.AckSuppression.copy(block: `com.SpaceX.API.Device`.AckSuppressionKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.AckSuppression =
  `com.SpaceX.API.Device`.AckSuppressionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

