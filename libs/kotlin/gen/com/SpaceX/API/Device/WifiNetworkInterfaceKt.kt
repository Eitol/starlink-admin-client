// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: spacex/api/device/common.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.SpaceX.API.Device;

@kotlin.jvm.JvmName("-initializewifiNetworkInterface")
public inline fun wifiNetworkInterface(block: com.SpaceX.API.Device.WifiNetworkInterfaceKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiNetworkInterface =
  com.SpaceX.API.Device.WifiNetworkInterfaceKt.Dsl._create(com.SpaceX.API.Device.WifiNetworkInterface.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `SpaceX.API.Device.WifiNetworkInterface`
 */
public object WifiNetworkInterfaceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.SpaceX.API.Device.WifiNetworkInterface.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.SpaceX.API.Device.WifiNetworkInterface.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.SpaceX.API.Device.WifiNetworkInterface = _builder.build()

    /**
     * `.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts invalid_packet_counts = 2 [json_name = "invalidPacketCounts"];`
     */
    public var invalidPacketCounts: com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts
      @JvmName("getInvalidPacketCounts")
      get() = _builder.invalidPacketCounts
      @JvmName("setInvalidPacketCounts")
      set(value) {
        _builder.invalidPacketCounts = value
      }
    /**
     * `.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts invalid_packet_counts = 2 [json_name = "invalidPacketCounts"];`
     */
    public fun clearInvalidPacketCounts() {
      _builder.clearInvalidPacketCounts()
    }
    /**
     * `.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts invalid_packet_counts = 2 [json_name = "invalidPacketCounts"];`
     * @return Whether the invalidPacketCounts field is set.
     */
    public fun hasInvalidPacketCounts(): kotlin.Boolean {
      return _builder.hasInvalidPacketCounts()
    }
    public val WifiNetworkInterfaceKt.Dsl.invalidPacketCountsOrNull: com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts?
      get() = _builder.invalidPacketCountsOrNull

    /**
     * `uint32 channel = 3 [json_name = "channel"];`
     */
    public var channel: kotlin.Int
      @JvmName("getChannel")
      get() = _builder.channel
      @JvmName("setChannel")
      set(value) {
        _builder.channel = value
      }
    /**
     * `uint32 channel = 3 [json_name = "channel"];`
     */
    public fun clearChannel() {
      _builder.clearChannel()
    }

    /**
     * `uint32 missed_beacons = 8 [json_name = "missedBeacons"];`
     */
    public var missedBeacons: kotlin.Int
      @JvmName("getMissedBeacons")
      get() = _builder.missedBeacons
      @JvmName("setMissedBeacons")
      set(value) {
        _builder.missedBeacons = value
      }
    /**
     * `uint32 missed_beacons = 8 [json_name = "missedBeacons"];`
     */
    public fun clearMissedBeacons() {
      _builder.clearMissedBeacons()
    }

    /**
     * `double link_quality = 4 [json_name = "linkQuality"];`
     */
    public var linkQuality: kotlin.Double
      @JvmName("getLinkQuality")
      get() = _builder.linkQuality
      @JvmName("setLinkQuality")
      set(value) {
        _builder.linkQuality = value
      }
    /**
     * `double link_quality = 4 [json_name = "linkQuality"];`
     */
    public fun clearLinkQuality() {
      _builder.clearLinkQuality()
    }

    /**
     * `double signal_level = 5 [json_name = "signalLevel"];`
     */
    public var signalLevel: kotlin.Double
      @JvmName("getSignalLevel")
      get() = _builder.signalLevel
      @JvmName("setSignalLevel")
      set(value) {
        _builder.signalLevel = value
      }
    /**
     * `double signal_level = 5 [json_name = "signalLevel"];`
     */
    public fun clearSignalLevel() {
      _builder.clearSignalLevel()
    }

    /**
     * `double noise_level = 6 [json_name = "noiseLevel"];`
     */
    public var noiseLevel: kotlin.Double
      @JvmName("getNoiseLevel")
      get() = _builder.noiseLevel
      @JvmName("setNoiseLevel")
      set(value) {
        _builder.noiseLevel = value
      }
    /**
     * `double noise_level = 6 [json_name = "noiseLevel"];`
     */
    public fun clearNoiseLevel() {
      _builder.clearNoiseLevel()
    }
  }
  @kotlin.jvm.JvmName("-initializeinvalidPacketCounts")
  public inline fun invalidPacketCounts(block: com.SpaceX.API.Device.WifiNetworkInterfaceKt.InvalidPacketCountsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts =
    com.SpaceX.API.Device.WifiNetworkInterfaceKt.InvalidPacketCountsKt.Dsl._create(com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts`
   */
  public object InvalidPacketCountsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts = _builder.build()

      /**
       * `uint32 rx_invalid_nwid = 1 [json_name = "rxInvalidNwid"];`
       */
      public var rxInvalidNwid: kotlin.Int
        @JvmName("getRxInvalidNwid")
        get() = _builder.rxInvalidNwid
        @JvmName("setRxInvalidNwid")
        set(value) {
          _builder.rxInvalidNwid = value
        }
      /**
       * `uint32 rx_invalid_nwid = 1 [json_name = "rxInvalidNwid"];`
       */
      public fun clearRxInvalidNwid() {
        _builder.clearRxInvalidNwid()
      }

      /**
       * `uint32 rx_invalid_crypt = 2 [json_name = "rxInvalidCrypt"];`
       */
      public var rxInvalidCrypt: kotlin.Int
        @JvmName("getRxInvalidCrypt")
        get() = _builder.rxInvalidCrypt
        @JvmName("setRxInvalidCrypt")
        set(value) {
          _builder.rxInvalidCrypt = value
        }
      /**
       * `uint32 rx_invalid_crypt = 2 [json_name = "rxInvalidCrypt"];`
       */
      public fun clearRxInvalidCrypt() {
        _builder.clearRxInvalidCrypt()
      }

      /**
       * `uint32 rx_invalid_frag = 3 [json_name = "rxInvalidFrag"];`
       */
      public var rxInvalidFrag: kotlin.Int
        @JvmName("getRxInvalidFrag")
        get() = _builder.rxInvalidFrag
        @JvmName("setRxInvalidFrag")
        set(value) {
          _builder.rxInvalidFrag = value
        }
      /**
       * `uint32 rx_invalid_frag = 3 [json_name = "rxInvalidFrag"];`
       */
      public fun clearRxInvalidFrag() {
        _builder.clearRxInvalidFrag()
      }

      /**
       * `uint32 tx_excessive_retries = 4 [json_name = "txExcessiveRetries"];`
       */
      public var txExcessiveRetries: kotlin.Int
        @JvmName("getTxExcessiveRetries")
        get() = _builder.txExcessiveRetries
        @JvmName("setTxExcessiveRetries")
        set(value) {
          _builder.txExcessiveRetries = value
        }
      /**
       * `uint32 tx_excessive_retries = 4 [json_name = "txExcessiveRetries"];`
       */
      public fun clearTxExcessiveRetries() {
        _builder.clearTxExcessiveRetries()
      }

      /**
       * `uint32 invalid_misc = 5 [json_name = "invalidMisc"];`
       */
      public var invalidMisc: kotlin.Int
        @JvmName("getInvalidMisc")
        get() = _builder.invalidMisc
        @JvmName("setInvalidMisc")
        set(value) {
          _builder.invalidMisc = value
        }
      /**
       * `uint32 invalid_misc = 5 [json_name = "invalidMisc"];`
       */
      public fun clearInvalidMisc() {
        _builder.clearInvalidMisc()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.WifiNetworkInterface.copy(block: `com.SpaceX.API.Device`.WifiNetworkInterfaceKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiNetworkInterface =
  `com.SpaceX.API.Device`.WifiNetworkInterfaceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts.copy(block: `com.SpaceX.API.Device`.WifiNetworkInterfaceKt.InvalidPacketCountsKt.Dsl.() -> kotlin.Unit): com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts =
  `com.SpaceX.API.Device`.WifiNetworkInterfaceKt.InvalidPacketCountsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.SpaceX.API.Device.WifiNetworkInterfaceOrBuilder.invalidPacketCountsOrNull: com.SpaceX.API.Device.WifiNetworkInterface.InvalidPacketCounts?
  get() = if (hasInvalidPacketCounts()) getInvalidPacketCounts() else null

